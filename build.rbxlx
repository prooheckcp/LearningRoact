<roblox xmlns:xmime="http://www.w3.org/2005/05/xmlmime" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://www.roblox.com/roblox.xsd" version="4">
	<External>null</External>
	<External>nil</External>
	<Item class="Workspace" referent="10">
		<Properties>
			<bool name="AllowThirdPartySales">false</bool>
			<token name="AnimationWeightedBlendFix">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<token name="ClientAnimatorThrottling">0</token>
			<string name="CollisionGroups">Default^0^-1</string>
			<Ref name="CurrentCamera">RBXDEF431409CA84C3D857E261A87325E4A</Ref>
			<double name="DistributedGameTime">0</double>
			<bool name="ExplicitAutoJoints">true</bool>
			<float name="FallenPartsDestroyHeight">-500</float>
			<Vector3 name="GlobalWind">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<float name="Gravity">196.199997</float>
			<token name="HumanoidOnlySetCollisionsOnStateChange">0</token>
			<token name="InterpolationThrottling">0</token>
			<token name="LevelOfDetail">0</token>
			<token name="MeshPartHeadsAndAccessories">0</token>
			<CoordinateFrame name="ModelMeshCFrame">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
				<R00>1</R00>
				<R01>0</R01>
				<R02>0</R02>
				<R10>0</R10>
				<R11>1</R11>
				<R12>0</R12>
				<R20>0</R20>
				<R21>0</R21>
				<R22>1</R22>
			</CoordinateFrame>
			<SharedString name="ModelMeshData">yuZpQdnvvUBOTYh1jqZ2cA==</SharedString>
			<Vector3 name="ModelMeshSize">
				<X>0</X>
				<Y>0</Y>
				<Z>0</Z>
			</Vector3>
			<string name="Name">Workspace</string>
			<bool name="NeedsPivotMigration">false</bool>
			<token name="PhysicsSteppingMethod">0</token>
			<Ref name="PrimaryPart">null</Ref>
			<token name="Retargeting">0</token>
			<token name="SignalBehavior">0</token>
			<int64 name="SourceAssetId">-1</int64>
			<token name="StreamOutBehavior">0</token>
			<bool name="StreamingEnabled">false</bool>
			<int name="StreamingMinRadius">64</int>
			<token name="StreamingPauseMode">0</token>
			<int name="StreamingTargetRadius">1024</int>
			<BinaryString name="Tags"></BinaryString>
			<bool name="TerrainWeldsFixed">true</bool>
			<bool name="TouchesUseCollisionGroups">false</bool>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b900018c22</UniqueId>
			<OptionalCoordinateFrame name="WorldPivotData">
				<CFrame>
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CFrame>
			</OptionalCoordinateFrame>
		</Properties>
		<Item class="Camera" referent="RBXDEF431409CA84C3D857E261A87325E4A">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<CoordinateFrame name="CFrame">
					<X>-1.92662084</X>
					<Y>5.17905521</Y>
					<Z>3.94027543</Z>
					<R00>0.890346408</R00>
					<R01>0.272571415</R01>
					<R02>-0.364675343</R02>
					<R10>-1.49011594e-08</R10>
					<R11>0.80098474</R11>
					<R12>0.598684788</R12>
					<R20>0.455283701</R20>
					<R21>-0.533036828</R21>
					<R22>0.713153958</R22>
				</CoordinateFrame>
				<Ref name="CameraSubject">null</Ref>
				<token name="CameraType">0</token>
				<float name="FieldOfView">70</float>
				<token name="FieldOfViewMode">0</token>
				<CoordinateFrame name="Focus">
					<X>-1.19727015</X>
					<Y>3.98168564</Y>
					<Z>2.51396751</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="HeadLocked">true</bool>
				<float name="HeadScale">1</float>
				<string name="Name">Camera</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a114</UniqueId>
			</Properties>
		</Item>
		<Item class="Part" referent="11">
			<Properties>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>-10</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4284636770</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<string name="Name">Baseplate</string>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a18d</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<token name="formFactorRaw">1</token>
				<token name="shape">1</token>
				<Vector3 name="size">
					<X>512</X>
					<Y>20</Y>
					<Z>512</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="Terrain" referent="RBX2BE8553CC28644AFB1AE9CC76C67832E">
			<Properties>
				<token name="AcquisitionMethod">0</token>
				<bool name="Anchored">true</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">4</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="Decoration">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">true</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<BinaryString name="MaterialColors"><![CDATA[AAAAAAAAan8/P39rf2Y/ilY+j35fi21PZmxvZbDqw8faiVpHOi4kHh4lZlw76JxKc3trhHta
gcLgc4RKxr21zq2UlJSM]]></BinaryString>
				<string name="Name">Terrain</string>
				<BinaryString name="PhysicsGrid">AgMAAAAAAAAAAAAAAAA=</BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="SmoothGrid">AQU=</BinaryString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">3</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a18e</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Color3 name="WaterColor">
					<R>0.0500000007</R>
					<G>0.330000013</G>
					<B>0.360000014</B>
				</Color3>
				<float name="WaterReflectance">1</float>
				<float name="WaterTransparency">0.300000012</float>
				<float name="WaterWaveSize">0.150000006</float>
				<float name="WaterWaveSpeed">10</float>
				<Vector3 name="size">
					<X>2044</X>
					<Y>252</Y>
					<Z>2044</Z>
				</Vector3>
			</Properties>
		</Item>
		<Item class="MeshPart" referent="RBXA0FA30267AEB4F21A243AF3622C5F189">
			<Properties>
				<bool name="Anchored">false</bool>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<float name="BackParamA">-0.5</float>
				<float name="BackParamB">0.5</float>
				<token name="BackSurface">0</token>
				<token name="BackSurfaceInput">0</token>
				<float name="BottomParamA">-0.5</float>
				<float name="BottomParamB">0.5</float>
				<token name="BottomSurface">0</token>
				<token name="BottomSurfaceInput">0</token>
				<CoordinateFrame name="CFrame">
					<X>0.00931280851</X>
					<Y>1.7881695</Y>
					<Z>-0.770185649</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<bool name="CanCollide">true</bool>
				<bool name="CanQuery">true</bool>
				<bool name="CanTouch">true</bool>
				<bool name="CastShadow">true</bool>
				<int name="CollisionGroupId">0</int>
				<Color3uint8 name="Color3uint8">4288914085</Color3uint8>
				<PhysicalProperties name="CustomPhysicalProperties">
					<CustomPhysics>false</CustomPhysics>
				</PhysicalProperties>
				<bool name="DoubleSided">false</bool>
				<float name="FrontParamA">-0.5</float>
				<float name="FrontParamB">0.5</float>
				<token name="FrontSurface">0</token>
				<token name="FrontSurfaceInput">0</token>
				<bool name="HasJointOffset">false</bool>
				<bool name="HasSkinnedMesh">false</bool>
				<Vector3 name="InitialSize">
					<X>2.72521877</X>
					<Y>3.5506041</Y>
					<Z>4.23472357</Z>
				</Vector3>
				<Vector3 name="JointOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<BinaryString name="LODData"></BinaryString>
				<float name="LeftParamA">-0.5</float>
				<float name="LeftParamB">0.5</float>
				<token name="LeftSurface">0</token>
				<token name="LeftSurfaceInput">0</token>
				<bool name="Locked">false</bool>
				<bool name="Massless">false</bool>
				<token name="Material">256</token>
				<Content name="MeshID"><url>rbxassetid://8665114089</url></Content>
				<Content name="MeshId"><url>rbxassetid://8665114089</url></Content>
				<string name="Name">Meshes/NW_slime_cannon</string>
				<SharedString name="PhysicalConfigData">DAijy18UHOckKR7wFs8WPw==</SharedString>
				<BinaryString name="PhysicsData"></BinaryString>
				<CoordinateFrame name="PivotOffset">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
					<R00>1</R00>
					<R01>0</R01>
					<R02>0</R02>
					<R10>0</R10>
					<R11>1</R11>
					<R12>0</R12>
					<R20>0</R20>
					<R21>0</R21>
					<R22>1</R22>
				</CoordinateFrame>
				<float name="Reflectance">0</float>
				<token name="RenderFidelity">1</token>
				<float name="RightParamA">-0.5</float>
				<float name="RightParamB">0.5</float>
				<token name="RightSurface">0</token>
				<token name="RightSurfaceInput">0</token>
				<int name="RootPriority">0</int>
				<Vector3 name="RotVelocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<Content name="TextureID"><url>rbxassetid://8037264709</url></Content>
				<float name="TopParamA">-0.5</float>
				<float name="TopParamB">0.5</float>
				<token name="TopSurface">0</token>
				<token name="TopSurfaceInput">0</token>
				<float name="Transparency">0</float>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000fe6a5</UniqueId>
				<Vector3 name="Velocity">
					<X>0</X>
					<Y>0</Y>
					<Z>0</Z>
				</Vector3>
				<Vector3 name="size">
					<X>2.72521877</X>
					<Y>3.5506041</Y>
					<Z>4.23472357</Z>
				</Vector3>
			</Properties>
		</Item>
	</Item>
	<Item class="SoundService" referent="6">
		<Properties>
			<token name="AmbientReverb">0</token>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="DistanceFactor">3.32999992</float>
			<float name="DopplerScale">1</float>
			<string name="Name">SoundService</string>
			<bool name="RespectFilteringEnabled">true</bool>
			<float name="RolloffScale">1</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0cb</UniqueId>
		</Properties>
	</Item>
	<Item class="NonReplicatedCSGDictionaryService" referent="RBXB2CE4D7311F0474394EF983276D29535">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">NonReplicatedCSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0d7</UniqueId>
		</Properties>
	</Item>
	<Item class="CSGDictionaryService" referent="RBXBE9ECFDD8B5D43F5A1CB48696BFF059D">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CSGDictionaryService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0d8</UniqueId>
		</Properties>
	</Item>
	<Item class="Chat" referent="RBXCA2BF5315AB44B6387CE47F986079D56">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="BubbleChatEnabled">false</bool>
			<bool name="LoadDefaultChat">true</bool>
			<string name="Name">Chat</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0dd</UniqueId>
		</Properties>
	</Item>
	<Item class="TimerService" referent="RBX9D995D63F12D48A1B0896043BBB7F1B0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0de</UniqueId>
		</Properties>
	</Item>
	<Item class="Players" referent="RBX1CD930AD2A874CFC84A936E4911CA0CA">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CharacterAutoLoads">true</bool>
			<int name="MaxPlayersInternal">12</int>
			<string name="Name">Players</string>
			<int name="PreferredPlayersInternal">0</int>
			<float name="RespawnTime">5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0e0</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedFirst" referent="RBX3FFE1D49DFB7457BB036E5DAFCB36C10">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedFirst</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0e4</UniqueId>
		</Properties>
	</Item>
	<Item class="TweenService" referent="RBXB14881363F2B4D5C84193A70AD50F9ED">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TweenService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0e6</UniqueId>
		</Properties>
	</Item>
	<Item class="PermissionsService" referent="RBX97E7AD257BA34E7A8C215848382C4D10">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PermissionsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0ea</UniqueId>
		</Properties>
	</Item>
	<Item class="PlayerEmulatorService" referent="RBXD24B6E07249C4DEA92BADBC5CAD6BEF4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="CustomPoliciesEnabled">false</bool>
			<string name="EmulatedCountryCode"></string>
			<string name="EmulatedGameLocale"></string>
			<string name="Name">PlayerEmulatorService</string>
			<bool name="PlayerEmulationEnabled">false</bool>
			<BinaryString name="SerializedEmulatedPolicyInfo"></BinaryString>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0ec</UniqueId>
		</Properties>
	</Item>
	<Item class="StudioData" referent="RBX6C2D9F04436042399E748E9462AC14CD">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int64 name="CommitInflightAuthorId">0</int64>
			<string name="CommitInflightGuid"></string>
			<int name="CommitInflightPlaceVersion">0</int>
			<bool name="EnableScriptCollabByDefaultOnLoad">false</bool>
			<bool name="EnableTeamCreateStreamingOnLoad">false</bool>
			<string name="Name">StudioData</string>
			<int64 name="SourceAssetId">-1</int64>
			<int64 name="SrcPlaceId">8665112616</int64>
			<int64 name="SrcUniverseId">3295917679</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0ee</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterPlayer" referent="7">
		<Properties>
			<bool name="AllowCustomAnimations">true</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="AutoJumpEnabled">true</bool>
			<float name="CameraMaxZoomDistance">400</float>
			<float name="CameraMinZoomDistance">0.5</float>
			<token name="CameraMode">0</token>
			<float name="CharacterJumpHeight">7.19999981</float>
			<float name="CharacterJumpPower">50</float>
			<float name="CharacterMaxSlopeAngle">89</float>
			<bool name="CharacterUseJumpPower">true</bool>
			<float name="CharacterWalkSpeed">16</float>
			<token name="DevCameraOcclusionMode">0</token>
			<token name="DevComputerCameraMovementMode">0</token>
			<token name="DevComputerMovementMode">0</token>
			<token name="DevTouchCameraMovementMode">0</token>
			<token name="DevTouchMovementMode">0</token>
			<bool name="EnableMouseLockOption">true</bool>
			<int64 name="GameSettingsAssetIDFace">0</int64>
			<int64 name="GameSettingsAssetIDHead">0</int64>
			<int64 name="GameSettingsAssetIDLeftArm">0</int64>
			<int64 name="GameSettingsAssetIDLeftLeg">0</int64>
			<int64 name="GameSettingsAssetIDPants">0</int64>
			<int64 name="GameSettingsAssetIDRightArm">0</int64>
			<int64 name="GameSettingsAssetIDRightLeg">0</int64>
			<int64 name="GameSettingsAssetIDShirt">0</int64>
			<int64 name="GameSettingsAssetIDTeeShirt">0</int64>
			<int64 name="GameSettingsAssetIDTorso">0</int64>
			<token name="GameSettingsAvatar">1</token>
			<token name="GameSettingsR15Collision">0</token>
			<NumberRange name="GameSettingsScaleRangeBodyType">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHead">0.95 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeHeight">0.9 1.05 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeProportion">0 1 </NumberRange>
			<NumberRange name="GameSettingsScaleRangeWidth">0.7 1 </NumberRange>
			<float name="HealthDisplayDistance">100</float>
			<bool name="LoadCharacterAppearance">true</bool>
			<token name="LoadCharacterLayeredClothing">0</token>
			<string name="Name">StarterPlayer</string>
			<float name="NameDisplayDistance">100</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0ef</UniqueId>
			<bool name="UserEmotesEnabled">true</bool>
		</Properties>
		<Item class="StarterPlayerScripts" referent="8">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterPlayerScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a18b</UniqueId>
			</Properties>
			<Item class="LocalScript" referent="9">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<bool name="Disabled">false</bool>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Client</string>
					<string name="ScriptGuid">{41531312-5C39-4566-9926-31C6AF497E0B}</string>
					<ProtectedString name="Source"><![CDATA[--[[
    This file is being used to learn Roact
]]

--Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

--Root folders
local vendor = ReplicatedStorage.Vendor

--Variables
local player : Player = Players.LocalPlayer
local playerGui : PlayerGui = player.PlayerGui

--Dependencies
local Roact = require(vendor.Roact)

local app = Roact.createElement("ScreenGui", {}, {
    HelloWorld = Roact.createElement("TextLabel", {
        Size = UDim2.fromScale(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        TextScaled = true,
        Text = "Hello World"
    })
})
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a18c</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX71E6322332D847FFAB6201612C3A1BDF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">BasicTesting</string>
						<string name="ScriptGuid">{410E9712-7FC7-490B-9E63-7615C6DB265E}</string>
						<ProtectedString name="Source"><![CDATA[--[[
    This file is being used to learn Roact
]]

--Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

--Root folders
local vendor = ReplicatedStorage.Vendor

--Variables
local player : Player = Players.LocalPlayer
local playerGui : PlayerGui = player.PlayerGui

--Dependencies
local Roact = require(vendor.Roact)

local app = Roact.createElement("ScreenGui", {}, {
    HelloWorld = Roact.createElement("TextLabel", {
        Size = UDim2.fromScale(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        TextScaled = true,
        Text = "Hello World"
    })
})

local myHandle = Roact.mount(app, playerGui)

task.wait(1)

local app2 = Roact.createElement("ScreenGui", {}, {
    HelloWorld = Roact.createElement("TextLabel", {
        Size = UDim2.fromScale(0.5, 0.5),
        Position = UDim2.fromScale(0.5, 0.5),
        AnchorPoint = Vector2.new(0.5, 0.5),
        TextScaled = true,
        Text = "Hello World2"
    })
})

Roact.update(myHandle, app2)

task.wait(1)

Roact.unmount(myHandle)]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000fe4ab</UniqueId>
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBX32D2AF0790224422BB12C872E1F7C538">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Clock</string>
						<string name="ScriptGuid">{888B5D65-0B10-4CEF-867E-E757B20CD8DC}</string>
						<ProtectedString name="Source"><![CDATA[--Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

--Root folders
local vendor = ReplicatedStorage.Vendor

--Dependencies
local Roact = require(vendor.Roact)

--Variables
local player : Player = Players.LocalPlayer
local playerGui : PlayerGui = player.PlayerGui
local currentTime : number = 0

local function clock(currentTime)
    return Roact.createElement("ScreenGui", {}, {
        TimeLabel = Roact.createElement("TextLabel", {
            Size = UDim2.new(1, 0, 1, 0),
            Text = "Time Elapsed: " .. currentTime,
            TextScaled = true,
            BackgroundTransparency = 1
        })
    })
end
--[[
local handle = Roact.mount(clock(currentTime), playerGui, "Clock UI")

while task.wait(1) do
    currentTime = currentTime + 1
    handle = Roact.update(handle, clock(currentTime))
end    
]]
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000fe4ad</UniqueId>
					</Properties>
				</Item>
				<Item class="LocalScript" referent="RBXBE87EF6DA41F469FA72104C21D2E1B6E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<bool name="Disabled">false</bool>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">TestingRoact</string>
						<string name="ScriptGuid">{5BAACE63-2B31-44D3-A12C-7F668F175F3D}</string>
						<ProtectedString name="Source"><![CDATA[--Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Players = game:GetService("Players")

--Root folders
local vendor = ReplicatedStorage.Vendor

--Dependencies
local Roact = require(vendor.Roact)

--Variables
local player : Player = Players.LocalPlayer
local playerGui : PlayerGui = player.PlayerGui

local function clock(props)
    return Roact.createElement("TextLabel",{
        Size = UDim2.fromScale(0.5, 0.2),
        AnchorPoint = ,
        Text = "Current Time: "..props.text
    })
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273d7</UniqueId>
					</Properties>
				</Item>
			</Item>
		</Item>
		<Item class="StarterCharacterScripts" referent="RBX34FEC63B2FD441E4BC3755430084F209">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">StarterCharacterScripts</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a18f</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="StarterPack" referent="RBX63DBDBA4EB414AABB6AB705390C5C9C0">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterPack</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0f0</UniqueId>
		</Properties>
	</Item>
	<Item class="StarterGui" referent="RBX19D2FC6A35904CBFAF4DF00A81E1FDFA">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">StarterGui</string>
			<bool name="ResetPlayerGuiOnSpawn">true</bool>
			<token name="ScreenOrientation">2</token>
			<bool name="ShowDevelopmentGui">true</bool>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0f1</UniqueId>
			<token name="VirtualCursorMode">0</token>
		</Properties>
	</Item>
	<Item class="LocalizationService" referent="RBXDFF8F05ABD7B43D1A6183D1AE3BA12AC">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LocalizationService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0f3</UniqueId>
		</Properties>
	</Item>
	<Item class="TeleportService" referent="RBX16D092CC22BE409A9166204BF405C3E2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Teleport Service</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0f7</UniqueId>
		</Properties>
	</Item>
	<Item class="CollectionService" referent="RBX72D3B6C474D74DBFA9C5511239033865">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CollectionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0f9</UniqueId>
		</Properties>
	</Item>
	<Item class="PhysicsService" referent="RBXBA0CB8EA9FB34BE5A1118DD393375D01">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">PhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0fa</UniqueId>
		</Properties>
	</Item>
	<Item class="Geometry" referent="RBX82095D2924814EDFB930E05C4CAD4736">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Geometry</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0fc</UniqueId>
		</Properties>
	</Item>
	<Item class="InsertService" referent="RBX51E996BEC9E34F9BB50D35BD0B8D47F3">
		<Properties>
			<bool name="AllowClientInsertModels">false</bool>
			<bool name="AllowInsertFreeModels">false</bool>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">InsertService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0fe</UniqueId>
		</Properties>
		<Item class="StringValue" referent="RBXFCD6D2B92B554800890C6E00B03919AB">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">InsertionHash</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000fe588</UniqueId>
				<string name="Value">{B22BE5ED-AF6A-4EF2-A0DD-7166F2C8C6FE}</string>
			</Properties>
		</Item>
	</Item>
	<Item class="GamePassService" referent="RBX1ED0029229F34BA48DFACF0A593C87EE">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">GamePassService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a0ff</UniqueId>
		</Properties>
	</Item>
	<Item class="Debris" referent="RBX9C7685466A8F44F7B01ECBF97060744E">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<int name="MaxItems">1000</int>
			<string name="Name">Debris</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a100</UniqueId>
		</Properties>
	</Item>
	<Item class="CookiesService" referent="RBXB430C32E5D1241178477F293810EBFF6">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">CookiesService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a101</UniqueId>
		</Properties>
	</Item>
	<Item class="VRService" referent="RBX3B271B3E2FE84E1397B4B400773FFF26">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">VRService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a10b</UniqueId>
		</Properties>
	</Item>
	<Item class="ContextActionService" referent="RBX57083DA77C064B4E82E365C971DCE286">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ContextActionService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a10c</UniqueId>
		</Properties>
	</Item>
	<Item class="ScriptService" referent="RBX25E874D765FA4CF3819EE44C813B6BCC">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a10e</UniqueId>
		</Properties>
	</Item>
	<Item class="AssetService" referent="RBX063F36ECB5004E7AB5597CE345B6D0E2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AssetService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a10f</UniqueId>
		</Properties>
	</Item>
	<Item class="TouchInputService" referent="RBX6D1C157BF3394653A3217B2DB320D764">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">TouchInputService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a110</UniqueId>
		</Properties>
	</Item>
	<Item class="AnalyticsService" referent="RBXBD980919A0574EFD8F555554BA30F87E">
		<Properties>
			<string name="ApiKey"></string>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">AnalyticsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a113</UniqueId>
		</Properties>
	</Item>
	<Item class="Selection" referent="RBX49737AE81D434819BCCABAAE5E5F58A3">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Selection</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a116</UniqueId>
		</Properties>
	</Item>
	<Item class="ServerScriptService" referent="4">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="LoadStringEnabled">false</bool>
			<string name="Name">ServerScriptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a118</UniqueId>
		</Properties>
		<Item class="Script" referent="5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<bool name="Disabled">false</bool>
				<Content name="LinkedSource"><null></null></Content>
				<string name="Name">Server</string>
				<string name="ScriptGuid">{B126F77D-B739-4AF0-946A-19DE0057320C}</string>
				<ProtectedString name="Source"></ProtectedString>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a183</UniqueId>
			</Properties>
		</Item>
	</Item>
	<Item class="ServerStorage" referent="RBX68F5B2946F1846FBA2AEC22B2D402E28">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ServerStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a119</UniqueId>
		</Properties>
	</Item>
	<Item class="ReplicatedStorage" referent="1">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ReplicatedStorage</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a11a</UniqueId>
		</Properties>
		<Item class="Folder" referent="RBXCB33BA1C329C45CC9C22FE16B2CFA2D5">
			<Properties>
				<BinaryString name="AttributesSerialize"></BinaryString>
				<string name="Name">Vendor</string>
				<int64 name="SourceAssetId">-1</int64>
				<BinaryString name="Tags"></BinaryString>
				<UniqueId name="UniqueId">13c0f9da2de349530205c3b90002799e</UniqueId>
			</Properties>
			<Item class="ModuleScript" referent="RBXA5754DD323304A1B97B454A5273A61A4">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Roact</string>
					<string name="ScriptGuid">{0860AB09-68E4-4AA3-93B9-31DB67896837}</string>
					<ProtectedString name="Source"><![CDATA[--~strict
--[[
	Packages up the internals of Roact and exposes a public API for it.
]]

local GlobalConfig = require(script.GlobalConfig)
local createReconciler = require(script.createReconciler)
local createReconcilerCompat = require(script.createReconcilerCompat)
local RobloxRenderer = require(script.RobloxRenderer)
local strict = require(script.strict)
local Binding = require(script.Binding)

local robloxReconciler = createReconciler(RobloxRenderer)
local reconcilerCompat = createReconcilerCompat(robloxReconciler)

local Roact = strict({
	Component = require(script.Component),
	createElement = require(script.createElement),
	createFragment = require(script.createFragment),
	oneChild = require(script.oneChild),
	PureComponent = require(script.PureComponent),
	None = require(script.None),
	Portal = require(script.Portal),
	createRef = require(script.createRef),
	forwardRef = require(script.forwardRef),
	createBinding = Binding.create,
	joinBindings = Binding.join,
	createContext = require(script.createContext),

	Change = require(script.PropMarkers.Change),
	Children = require(script.PropMarkers.Children),
	Event = require(script.PropMarkers.Event),
	Ref = require(script.PropMarkers.Ref),

	mount = robloxReconciler.mountVirtualTree,
	unmount = robloxReconciler.unmountVirtualTree,
	update = robloxReconciler.updateVirtualTree,

	reify = reconcilerCompat.reify,
	teardown = reconcilerCompat.teardown,
	reconcile = reconcilerCompat.reconcile,

	setGlobalConfig = GlobalConfig.set,

	-- APIs that may change in the future without warning
	UNSTABLE = {},
})

return Roact
]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e89</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX8C2B77321F174EA09179881815EF98C2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Binding</string>
						<string name="ScriptGuid">{E37B851E-D85A-4419-8EB9-E106CC3C5373}</string>
						<ProtectedString name="Source"><![CDATA[local createSignal = require(script.Parent.createSignal)
local Symbol = require(script.Parent.Symbol)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local BindingImpl = Symbol.named("BindingImpl")

local BindingInternalApi = {}

local bindingPrototype = {}

function bindingPrototype:getValue()
	return BindingInternalApi.getValue(self)
end

function bindingPrototype:map(predicate)
	return BindingInternalApi.map(self, predicate)
end

local BindingPublicMeta = {
	__index = bindingPrototype,
	__tostring = function(self)
		return string.format("RoactBinding(%s)", tostring(self:getValue()))
	end,
}

function BindingInternalApi.update(binding, newValue)
	return binding[BindingImpl].update(newValue)
end

function BindingInternalApi.subscribe(binding, callback)
	return binding[BindingImpl].subscribe(callback)
end

function BindingInternalApi.getValue(binding)
	return binding[BindingImpl].getValue()
end

function BindingInternalApi.create(initialValue)
	local impl = {
		value = initialValue,
		changeSignal = createSignal(),
	}

	function impl.subscribe(callback)
		return impl.changeSignal:subscribe(callback)
	end

	function impl.update(newValue)
		impl.value = newValue
		impl.changeSignal:fire(newValue)
	end

	function impl.getValue()
		return impl.value
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta), impl.update
end

function BindingInternalApi.map(upstreamBinding, predicate)
	if config.typeChecks then
		assert(Type.of(upstreamBinding) == Type.Binding, "Expected arg #1 to be a binding")
		assert(typeof(predicate) == "function", "Expected arg #1 to be a function")
	end

	local impl = {}

	function impl.subscribe(callback)
		return BindingInternalApi.subscribe(upstreamBinding, function(newValue)
			callback(predicate(newValue))
		end)
	end

	function impl.update(_newValue)
		error("Bindings created by Binding:map(fn) cannot be updated directly", 2)
	end

	function impl.getValue()
		return predicate(upstreamBinding:getValue())
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

function BindingInternalApi.join(upstreamBindings)
	if config.typeChecks then
		assert(typeof(upstreamBindings) == "table", "Expected arg #1 to be of type table")

		for key, value in pairs(upstreamBindings) do
			if Type.of(value) ~= Type.Binding then
				local message = ("Expected arg #1 to contain only bindings, but key %q had a non-binding value"):format(
					tostring(key)
				)
				error(message, 2)
			end
		end
	end

	local impl = {}

	local function getValue()
		local value = {}

		for key, upstream in pairs(upstreamBindings) do
			value[key] = upstream:getValue()
		end

		return value
	end

	function impl.subscribe(callback)
		local disconnects = {}

		for key, upstream in pairs(upstreamBindings) do
			disconnects[key] = BindingInternalApi.subscribe(upstream, function(_newValue)
				callback(getValue())
			end)
		end

		return function()
			if disconnects == nil then
				return
			end

			for _, disconnect in pairs(disconnects) do
				disconnect()
			end

			disconnects = nil
		end
	end

	function impl.update(_newValue)
		error("Bindings created by joinBindings(...) cannot be updated directly", 2)
	end

	function impl.getValue()
		return getValue()
	end

	return setmetatable({
		[Type] = Type.Binding,
		[BindingImpl] = impl,
	}, BindingPublicMeta)
end

return BindingInternalApi
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8a</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6532683CF23542DCB6FB0284FE3D6299">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Binding.spec</string>
						<string name="ScriptGuid">{6E4F81AC-795D-4A82-ADD4-8606670AE335}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)
	local Type = require(script.Parent.Type)
	local GlobalConfig = require(script.Parent.GlobalConfig)

	local Binding = require(script.Parent.Binding)

	describe("Binding.create", function()
		it("should return a Binding object and an update function", function()
			local binding, update = Binding.create(1)

			expect(Type.of(binding)).to.equal(Type.Binding)
			expect(typeof(update)).to.equal("function")
		end)

		it("should support tostring on bindings", function()
			local binding, update = Binding.create(1)
			expect(tostring(binding)).to.equal("RoactBinding(1)")

			update("foo")
			expect(tostring(binding)).to.equal("RoactBinding(foo)")
		end)
	end)

	describe("Binding object", function()
		it("should provide a getter and setter", function()
			local binding, update = Binding.create(1)

			expect(binding:getValue()).to.equal(1)

			update(3)

			expect(binding:getValue()).to.equal(3)
		end)

		it("should let users subscribe and unsubscribe to its updates", function()
			local binding, update = Binding.create(1)

			local spy = createSpy()
			local disconnect = Binding.subscribe(binding, spy.value)

			expect(spy.callCount).to.equal(0)

			update(2)

			expect(spy.callCount).to.equal(1)
			spy:assertCalledWith(2)

			disconnect()
			update(3)

			expect(spy.callCount).to.equal(1)
		end)
	end)

	describe("Mapped bindings", function()
		it("should be composable", function()
			local word, updateWord = Binding.create("hi")

			local wordLength = word:map(string.len)
			local isEvenLength = wordLength:map(function(value)
				return value % 2 == 0
			end)

			expect(word:getValue()).to.equal("hi")
			expect(wordLength:getValue()).to.equal(2)
			expect(isEvenLength:getValue()).to.equal(true)

			updateWord("sup")

			expect(word:getValue()).to.equal("sup")
			expect(wordLength:getValue()).to.equal(3)
			expect(isEvenLength:getValue()).to.equal(false)
		end)

		it("should cascade updates when subscribed", function()
			-- base binding
			local word, updateWord = Binding.create("hi")

			local wordSpy = createSpy()
			local disconnectWord = Binding.subscribe(word, wordSpy.value)

			-- binding -> base binding
			local length = word:map(string.len)

			local lengthSpy = createSpy()
			local disconnectLength = Binding.subscribe(length, lengthSpy.value)

			-- binding -> binding -> base binding
			local isEvenLength = length:map(function(value)
				return value % 2 == 0
			end)

			local isEvenLengthSpy = createSpy()
			local disconnectIsEvenLength = Binding.subscribe(isEvenLength, isEvenLengthSpy.value)

			expect(wordSpy.callCount).to.equal(0)
			expect(lengthSpy.callCount).to.equal(0)
			expect(isEvenLengthSpy.callCount).to.equal(0)

			updateWord("nice")

			expect(wordSpy.callCount).to.equal(1)
			wordSpy:assertCalledWith("nice")

			expect(lengthSpy.callCount).to.equal(1)
			lengthSpy:assertCalledWith(4)

			expect(isEvenLengthSpy.callCount).to.equal(1)
			isEvenLengthSpy:assertCalledWith(true)

			disconnectWord()
			disconnectLength()
			disconnectIsEvenLength()

			updateWord("goodbye")

			expect(wordSpy.callCount).to.equal(1)
			expect(isEvenLengthSpy.callCount).to.equal(1)
			expect(lengthSpy.callCount).to.equal(1)
		end)

		it("should throw when updated directly", function()
			local source = Binding.create(1)
			local mapped = source:map(function(v)
				return v
			end)

			expect(function()
				Binding.update(mapped, 5)
			end).to.throw()
		end)
	end)

	describe("Binding.join", function()
		it("should have getValue", function()
			local binding1 = Binding.create(1)
			local binding2 = Binding.create(2)
			local binding3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local bindingValue = joinedBinding:getValue()
			expect(bindingValue).to.be.a("table")
			expect(bindingValue[1]).to.equal(1)
			expect(bindingValue[2]).to.equal(2)
			expect(bindingValue.foo).to.equal(3)
		end)

		it("should update when any one of the subscribed bindings updates", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)
			local binding3, update3 = Binding.create(3)

			local joinedBinding = Binding.join({
				binding1,
				binding2,
				foo = binding3,
			})

			local spy = createSpy()
			Binding.subscribe(joinedBinding, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			local args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(2)
			expect(args.value["foo"]).to.equal(3)

			update2(4)
			expect(spy.callCount).to.equal(2)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(3)

			update3(8)
			expect(spy.callCount).to.equal(3)

			args = spy:captureValues("value")
			expect(args.value).to.be.a("table")
			expect(args.value[1]).to.equal(3)
			expect(args.value[2]).to.equal(4)
			expect(args.value["foo"]).to.equal(8)
		end)

		it("should disconnect from all upstream bindings", function()
			local binding1, update1 = Binding.create(1)
			local binding2, update2 = Binding.create(2)

			local joined = Binding.join({ binding1, binding2 })

			local spy = createSpy()
			local disconnect = Binding.subscribe(joined, spy.value)

			expect(spy.callCount).to.equal(0)

			update1(3)
			expect(spy.callCount).to.equal(1)

			update2(3)
			expect(spy.callCount).to.equal(2)

			disconnect()
			update1(4)
			expect(spy.callCount).to.equal(2)

			update2(2)
			expect(spy.callCount).to.equal(2)

			local value = joined:getValue()
			expect(value[1]).to.equal(4)
			expect(value[2]).to.equal(2)
		end)

		it("should be okay with calling disconnect multiple times", function()
			local joined = Binding.join({})

			local disconnect = Binding.subscribe(joined, function() end)

			disconnect()
			disconnect()
		end)

		it("should throw if updated directly", function()
			local joined = Binding.join({})

			expect(function()
				Binding.update(joined, 0)
			end)
		end)

		it("should throw when a non-table value is passed", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					Binding.join("hi")
				end).to.throw()
			end)
		end)

		it("should throw when a non-binding value is passed via table", function()
			GlobalConfig.scoped({
				typeChecks = true,
			}, function()
				expect(function()
					local binding = Binding.create(123)

					Binding.join({
						binding,
						"abcde",
					})
				end).to.throw()
			end)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8b</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX88FF6670ACC5445883EFCA4880F4E4F2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Component</string>
						<string name="ScriptGuid">{19099C4B-3E97-48E0-92FA-3B2092E0BA74}</string>
						<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)
local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)
local invalidSetStateMessages = require(script.Parent.invalidSetStateMessages)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

--[[
	Calling setState during certain lifecycle allowed methods has the potential
	to create an infinitely updating component. Rather than time out, we exit
	with an error if an unreasonable number of self-triggering updates occur
]]
local MAX_PENDING_UPDATES = 100

local InternalData = Symbol.named("InternalData")

local componentMissingRenderMessage = [[
The component %q is missing the `render` method.
`render` must be defined when creating a Roact component!]]

local tooManyUpdatesMessage = [[
The component %q has reached the setState update recursion limit.
When using `setState` in `didUpdate`, make sure that it won't repeat infinitely!]]

local componentClassMetatable = {}

function componentClassMetatable:__tostring()
	return self.__componentName
end

local Component = {}
setmetatable(Component, componentClassMetatable)

Component[Type] = Type.StatefulComponentClass
Component.__index = Component
Component.__componentName = "Component"

--[[
	A method called by consumers of Roact to create a new component class.
	Components can not be extended beyond this point, with the exception of
	PureComponent.
]]
function Component:extend(name)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentClass, "Invalid `self` argument to `extend`.")
		assert(typeof(name) == "string", "Component class name must be a string")
	end

	local class = {}

	for key, value in pairs(self) do
		-- Roact opts to make consumers use composition over inheritance, which
		-- lines up with React.
		-- https://reactjs.org/docs/composition-vs-inheritance.html
		if key ~= "extend" then
			class[key] = value
		end
	end

	class[Type] = Type.StatefulComponentClass
	class.__index = class
	class.__componentName = name

	setmetatable(class, componentClassMetatable)

	return class
end

function Component:__getDerivedState(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getDerivedState`")
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	if componentClass.getDerivedStateFromProps ~= nil then
		local derivedState = componentClass.getDerivedStateFromProps(incomingProps, incomingState)

		if derivedState ~= nil then
			if config.typeChecks then
				assert(typeof(derivedState) == "table", "getDerivedStateFromProps must return a table!")
			end

			return derivedState
		end
	end

	return nil
end

function Component:setState(mapState)
	if config.typeChecks then
		assert(Type.of(self) == Type.StatefulComponentInstance, "Invalid `self` argument to `extend`.")
	end

	local internalData = self[InternalData]
	local lifecyclePhase = internalData.lifecyclePhase

	--[[
		When preparing to update, rendering, or unmounting, it is not safe
		to call `setState` as it will interfere with in-flight updates. It's
		also disallowed during unmounting
	]]
	if
		lifecyclePhase == ComponentLifecyclePhase.ShouldUpdate
		or lifecyclePhase == ComponentLifecyclePhase.WillUpdate
		or lifecyclePhase == ComponentLifecyclePhase.Render
		or lifecyclePhase == ComponentLifecyclePhase.WillUnmount
	then
		local messageTemplate = invalidSetStateMessages[internalData.lifecyclePhase]

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end

	local pendingState = internalData.pendingState

	local partialState
	if typeof(mapState) == "function" then
		partialState = mapState(pendingState or self.state, self.props)

		-- Abort the state update if the given state updater function returns nil
		if partialState == nil then
			return
		end
	elseif typeof(mapState) == "table" then
		partialState = mapState
	else
		error("Invalid argument to setState, expected function or table", 2)
	end

	local newState
	if pendingState ~= nil then
		newState = assign(pendingState, partialState)
	else
		newState = assign({}, self.state, partialState)
	end

	if lifecyclePhase == ComponentLifecyclePhase.Init then
		-- If `setState` is called in `init`, we can skip triggering an update!
		local derivedState = self:__getDerivedState(self.props, newState)
		self.state = assign(newState, derivedState)
	elseif
		lifecyclePhase == ComponentLifecyclePhase.DidMount
		or lifecyclePhase == ComponentLifecyclePhase.DidUpdate
		or lifecyclePhase == ComponentLifecyclePhase.ReconcileChildren
	then
		--[[
			During certain phases of the component lifecycle, it's acceptable to
			allow `setState` but defer the update until we're done with ones in flight.
			We do this by collapsing it into any pending updates we have.
		]]
		local derivedState = self:__getDerivedState(self.props, newState)
		internalData.pendingState = assign(newState, derivedState)
	elseif lifecyclePhase == ComponentLifecyclePhase.Idle then
		-- Outside of our lifecycle, the state update is safe to make immediately
		self:__update(nil, newState)
	else
		local messageTemplate = invalidSetStateMessages.default

		local message = messageTemplate:format(tostring(internalData.componentClass))

		error(message, 2)
	end
end

--[[
	Returns the stack trace of where the element was created that this component
	instance's properties are based on.

	Intended to be used primarily by diagnostic tools.
]]
function Component:getElementTraceback()
	return self[InternalData].virtualNode.currentElement.source
end

--[[
	Returns a snapshot of this component given the current props and state. Must
	be overridden by consumers of Roact and should be a pure function with
	regards to props and state.

	TODO (#199): Accept props and state as arguments.
]]
function Component:render()
	local internalData = self[InternalData]

	local message = componentMissingRenderMessage:format(tostring(internalData.componentClass))

	error(message, 0)
end

--[[
	Retrieves the context value corresponding to the given key. Can return nil
	if a requested context key is not present
]]
function Component:__getContext(key)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__getContext`")
		internalAssert(key ~= nil, "Context key cannot be nil")
	end

	local virtualNode = self[InternalData].virtualNode
	local context = virtualNode.context

	return context[key]
end

--[[
	Adds a new context entry to this component's context table (which will be
	passed down to child components).
]]
function Component:__addContext(key, value)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__addContext`")
	end
	local virtualNode = self[InternalData].virtualNode

	-- Make sure we store a reference to the component's original, unmodified
	-- context the virtual node. In the reconciler, we'll restore the original
	-- context if we need to replace the node (this happens when a node gets
	-- re-rendered as a different component)
	if virtualNode.originalContext == nil then
		virtualNode.originalContext = virtualNode.context
	end

	-- Build a new context table on top of the existing one, then apply it to
	-- our virtualNode
	local existing = virtualNode.context
	virtualNode.context = assign({}, existing, { [key] = value })
end

--[[
	Performs property validation if the static method validateProps is declared.
	validateProps should follow assert's expected arguments:
	(false, message: string) | true. The function may return a message in the
	true case; it will be ignored. If this fails, the function will throw the
	error.
]]
function Component:__validateProps(props)
	if not config.propValidation then
		return
	end

	local validator = self[InternalData].componentClass.validateProps

	if validator == nil then
		return
	end

	if typeof(validator) ~= "function" then
		error(
			("validateProps must be a function, but it is a %s.\nCheck the definition of the component %q."):format(
				typeof(validator),
				self.__componentName
			)
		)
	end

	local success, failureReason = validator(props)

	if not success then
		failureReason = failureReason or "<Validator function did not supply a message>"
		error(
			("Property validation failed in %s: %s\n\n%s"):format(
				self.__componentName,
				tostring(failureReason),
				self:getElementTraceback() or "<enable element tracebacks>"
			),
			0
		)
	end
end

--[[
	An internal method used by the reconciler to construct a new component
	instance and attach it to the given virtualNode.
]]
function Component:__mount(reconciler, virtualNode)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentClass, "Invalid use of `__mount`")
		internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #2 to be of type VirtualNode")
	end

	local currentElement = virtualNode.currentElement
	local hostParent = virtualNode.hostParent

	-- Contains all the information that we want to keep from consumers of
	-- Roact, or even other parts of the codebase like the reconciler.
	local internalData = {
		reconciler = reconciler,
		virtualNode = virtualNode,
		componentClass = self,
		lifecyclePhase = ComponentLifecyclePhase.Init,
	}

	local instance = {
		[Type] = Type.StatefulComponentInstance,
		[InternalData] = internalData,
	}

	setmetatable(instance, self)

	virtualNode.instance = instance

	local props = currentElement.props

	if self.defaultProps ~= nil then
		props = assign({}, self.defaultProps, props)
	end

	instance:__validateProps(props)

	instance.props = props

	local newContext = assign({}, virtualNode.legacyContext)
	instance._context = newContext

	instance.state = assign({}, instance:__getDerivedState(instance.props, {}))

	if instance.init ~= nil then
		instance:init(instance.props)
		assign(instance.state, instance:__getDerivedState(instance.props, instance.state))
	end

	-- It's possible for init() to redefine _context!
	virtualNode.legacyContext = instance._context

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render
	local renderResult = instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)

	if instance.didMount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidMount
		instance:didMount()
	end

	if internalData.pendingState ~= nil then
		-- __update will handle pendingState, so we don't pass any new element or state
		instance:__update(nil, nil)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
end

--[[
	Internal method used by the reconciler to clean up any resources held by
	this component instance.
]]
function Component:__unmount()
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__unmount`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	if self.willUnmount ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUnmount
		self:willUnmount()
	end

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end
end

--[[
	Internal method used by setState (to trigger updates based on state) and by
	the reconciler (to trigger updates based on props)

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__update(updatedElement, updatedState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__update`")
		internalAssert(
			Type.of(updatedElement) == Type.Element or updatedElement == nil,
			"Expected arg #1 to be of type Element or nil"
		)
		internalAssert(
			typeof(updatedState) == "table" or updatedState == nil,
			"Expected arg #2 to be of type table or nil"
		)
	end

	local internalData = self[InternalData]
	local componentClass = internalData.componentClass

	local newProps = self.props
	if updatedElement ~= nil then
		newProps = updatedElement.props

		if componentClass.defaultProps ~= nil then
			newProps = assign({}, componentClass.defaultProps, newProps)
		end

		self:__validateProps(newProps)
	end

	local updateCount = 0
	repeat
		local finalState
		local pendingState = nil

		-- Consume any pending state we might have
		if internalData.pendingState ~= nil then
			pendingState = internalData.pendingState
			internalData.pendingState = nil
		end

		-- Consume a standard update to state or props
		if updatedState ~= nil or newProps ~= self.props then
			if pendingState == nil then
				finalState = updatedState or self.state
			else
				finalState = assign(pendingState, updatedState)
			end

			local derivedState = self:__getDerivedState(newProps, finalState)

			if derivedState ~= nil then
				finalState = assign({}, finalState, derivedState)
			end

			updatedState = nil
		else
			finalState = pendingState
		end

		if not self:__resolveUpdate(newProps, finalState) then
			-- If the update was short-circuited, bubble the result up to the caller
			return false
		end

		updateCount = updateCount + 1

		if updateCount > MAX_PENDING_UPDATES then
			error(tooManyUpdatesMessage:format(tostring(internalData.componentClass)), 3)
		end
	until internalData.pendingState == nil

	return true
end

--[[
	Internal method used by __update to apply new props and state

	Returns true if the update was completed, false if it was cancelled by shouldUpdate
]]
function Component:__resolveUpdate(incomingProps, incomingState)
	if config.internalTypeChecks then
		internalAssert(Type.of(self) == Type.StatefulComponentInstance, "Invalid use of `__resolveUpdate`")
	end

	local internalData = self[InternalData]
	local virtualNode = internalData.virtualNode
	local reconciler = internalData.reconciler

	local oldProps = self.props
	local oldState = self.state

	if incomingProps == nil then
		incomingProps = oldProps
	end
	if incomingState == nil then
		incomingState = oldState
	end

	if self.shouldUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.ShouldUpdate
		local continueWithUpdate = self:shouldUpdate(incomingProps, incomingState)

		if not continueWithUpdate then
			internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
			return false
		end
	end

	if self.willUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.WillUpdate
		self:willUpdate(incomingProps, incomingState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Render

	self.props = incomingProps
	self.state = incomingState

	local renderResult = virtualNode.instance:render()

	internalData.lifecyclePhase = ComponentLifecyclePhase.ReconcileChildren
	reconciler.updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, renderResult)

	if self.didUpdate ~= nil then
		internalData.lifecyclePhase = ComponentLifecyclePhase.DidUpdate
		self:didUpdate(oldProps, oldState)
	end

	internalData.lifecyclePhase = ComponentLifecyclePhase.Idle
	return true
end

return Component
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8c</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX0E6738827C934FD5A25CFF74AA2E6E39">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">Component.spec</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8d</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBXCA7A350C9DB94178B8D2350797BAD849">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">context.spec</string>
							<string name="ScriptGuid">{B6B6E664-E9EE-49BC-B2DC-9340D0A7D90B}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local oneChild = require(script.Parent.Parent.oneChild)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as an internal api on Component", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("foo", "bar")
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.context, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				hello = self:__getContext("hello"),
				value = self:__getContext("value"),
			}
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)
		assertDeepEqual(node.context, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should not copy the context table if it doesn't need to", function()
		local Parent = Component:extend("Parent")

		function Parent:init()
			self:__addContext("parent", "I'm here!")
		end

		function Parent:render()
			-- Create some child element
			return createElement(function() end)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			parent = "I'm here!",
		}

		assertDeepEqual(parentNode.context, expectedContext)

		local childNode = oneChild(parentNode.children)

		-- Parent and child should have the same context table
		expect(parentNode.context).to.equal(childNode.context)
	end)

	it("should not allow context to move up the tree", function()
		local ChildProvider = Component:extend("ChildProvider")

		function ChildProvider:init()
			self:__addContext("child", "I'm here too!")
		end

		function ChildProvider:render() end

		local ParentProvider = Component:extend("ParentProvider")

		function ParentProvider:init()
			self:__addContext("parent", "I'm here!")
		end

		function ParentProvider:render()
			return createElement(ChildProvider)
		end

		local element = createElement(ParentProvider)
		local hostParent = nil
		local hostKey = "Parent"

		local parentNode = noopReconciler.mountVirtualNode(element, hostParent, hostKey)
		local childNode = oneChild(parentNode.children)

		local expectedParentContext = {
			parent = "I'm here!",
			-- Context does not travel back up
		}

		local expectedChildContext = {
			parent = "I'm here!",
			child = "I'm here too!",
		}

		assertDeepEqual(parentNode.context, expectedParentContext)
		assertDeepEqual(childNode.context, expectedChildContext)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = {
				dont = self:__getContext("dont"),
				frob = self:__getContext("frob"),
			}
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.context).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.context)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.context, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local function captureAllContext(component)
			return {
				A = component:__getContext("A"),
				B = component:__getContext("B"),
				frob = component:__getContext("frob"),
			}
		end

		local capturedContextA
		function ConsumerA:init()
			self:__addContext("A", "hello")

			capturedContextA = captureAllContext(self)
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self:__addContext("B", "hello")

			capturedContextB = captureAllContext(self)
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self:__addContext("frob", "ulator")
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8e</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX9BED405DBC89491FA95CCFC07BE38F22">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">defaultProps.spec</string>
							<string name="ScriptGuid">{64F5E9C0-ED99-4703-958C-BA1B2BC60EAF}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should fill in when mounting before init", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:init()
			capturedProps = self.props
		end

		function Foo:render() end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = initialProps.b,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should fill in when updating via props", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = 4,
			c = 6,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		local updatedProps = {
			c = 5,
		}
		local updatedElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, updatedElement)

		local expectedProps = {
			a = defaultProps.a,
			b = defaultProps.b,
			c = updatedProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)

	it("should respect None to override a default prop with nil", function()
		local defaultProps = {
			a = 3,
			b = 2,
		}

		local Foo = Component:extend("Foo")

		Foo.defaultProps = defaultProps

		local capturedProps
		function Foo:render()
			capturedProps = self.props
		end

		local initialProps = {
			b = None,
			c = 4,
		}

		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Some Foo"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		local expectedProps = {
			a = defaultProps.a,
			b = nil,
			c = initialProps.c,
		}

		assertDeepEqual(capturedProps, expectedProps)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e8f</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX49BE3B481C1C41B696EC4C7BDBDC7533">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">didMount.spec</string>
							<string name="ScriptGuid">{EFD0FEFF-AB81-42B0-BC33-99487FE80D49}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local didMountSpy = createSpy()

		MyComponent.didMount = didMountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didMountSpy.callCount).to.equal(1)

		local values = didMountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e90</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX438F9A7D652A4F6A9A6BF208739C1CF4">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">didUpdate.spec</string>
							<string name="ScriptGuid">{03FDC274-BA89-4DF1-A5C3-A56E1A9D97F2}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local virtualNode = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(virtualNode, newElement)

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, initialProps)
		assertDeepEqual(values.oldState, {})
	end)

	it("should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")

		local didUpdateSpy = createSpy()
		MyComponent.didUpdate = didUpdateSpy.value

		local initialState = {
			a = 4,
		}

		local setState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)
		end

		function MyComponent:render() end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(didUpdateSpy.callCount).to.equal(0)

		setState({
			a = 5,
		})

		expect(didUpdateSpy.callCount).to.equal(1)

		local values = didUpdateSpy:captureValues("self", "oldProps", "oldState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.oldProps, {})
		assertDeepEqual(values.oldState, initialState)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e91</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXE87BBEC2359E42A284A4A185D07C1B14">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">extend.spec</string>
							<string name="ScriptGuid">{DD1C8BA5-693E-4DE7-AD3E-D48221157B4B}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	it("should be extendable", function()
		local MyComponent = Component:extend("The Senate")

		expect(MyComponent).to.be.ok()
		expect(Type.of(MyComponent)).to.equal(Type.StatefulComponentClass)
	end)

	it("should prevent extending a user component", function()
		local MyComponent = Component:extend("Sheev")

		expect(function()
			MyComponent:extend("Frank")
		end).to.throw()
	end)

	it("should use a given name", function()
		local MyComponent = Component:extend("FooBar")

		local name = tostring(MyComponent)

		expect(name).to.be.a("string")
		expect(name:find("FooBar")).to.be.ok()
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e92</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB02D10B0923241868E0A6662EFB9165F">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">getDerivedStateFromProps.spec</string>
							<string name="ScriptGuid">{91A0B080-B89D-4D3F-B8B4-6260D16A8D56}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.Parent.createSpy)
	local createElement = require(script.Parent.Parent.createElement)
	local createFragment = require(script.Parent.Parent.createFragment)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked on initial mount", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 1 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via props", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(
			createElement(WithDerivedState, {
				someProp = 1,
			}),
			hostParent,
			hostKey
		)

		noopReconciler.updateVirtualNode(
			node,
			createElement(WithDerivedState, {
				someProp = 2,
			})
		)

		expect(getDerivedSpy.callCount).to.equal(2)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, { someProp = 2 })
		assertDeepEqual(values.state, {})
	end)

	it("should be invoked when updated via state", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				someState = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState)
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		noopReconciler.updateVirtualNode(node, element, {
			someState = 2,
		})

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		-- * On updating with new state via updateVirtualNode
		expect(getDerivedSpy.callCount).to.equal(4)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {})
		assertDeepEqual(values.state, { someState = 2 })
	end)

	it("should be invoked when updating via state in init (which skips reconciliation)", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self:setState({
				stateFromInit = 1,
			})
		end

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		-- getDerivedStateFromProps will be called:
		-- * Once on empty props
		-- * Once during the self:setState in init
		-- * Once more, defensively, on the resulting state AFTER init
		expect(getDerivedSpy.callCount).to.equal(3)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someProp = 1,
		})
		assertDeepEqual(values.state, {
			stateFromInit = 1,
		})
	end)

	it("should receive defaultProps", function()
		local getDerivedSpy = createSpy()
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.defaultProps = {
			someDefaultProp = "foo",
		}

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:render()
			return nil
		end

		local element = createElement(WithDerivedState, {
			someProp = 1,
		})
		local hostParent = nil
		local hostKey = "WithDerivedState"

		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(1)

		local values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 1,
		})

		-- Update via props, confirm that defaultProp is still present
		element = createElement(WithDerivedState, {
			someProp = 2,
		})

		noopReconciler.updateVirtualNode(node, element)

		expect(getDerivedSpy.callCount).to.equal(2)

		values = getDerivedSpy:captureValues("props", "state")

		assertDeepEqual(values.props, {
			someDefaultProp = "foo",
			someProp = 2,
		})
	end)

	it("should derive state for all setState updates, even when deferred", function()
		local Child = Component:extend("Child")
		local stateUpdaterSpy = createSpy(function()
			return {}
		end)
		local stateDerivedSpy = createSpy()

		function Child:render()
			return nil
		end

		function Child:didMount()
			self.props.callback()
		end

		local Parent = Component:extend("Parent")

		Parent.getDerivedStateFromProps = stateDerivedSpy.value

		function Parent:render()
			local callback = function()
				self:setState(stateUpdaterSpy.value)
			end

			return createFragment({
				ChildA = createElement(Child, {
					callback = callback,
				}),
				ChildB = createElement(Child, {
					callback = callback,
				}),
			})
		end

		local element = createElement(Parent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(stateUpdaterSpy.callCount).to.equal(2)

		-- getDerivedStateFromProps is always called on initial state
		expect(stateDerivedSpy.callCount).to.equal(3)
	end)

	it("should have derived state after assigning to state in init", function()
		local getStateCallback
		local getDerivedSpy = createSpy(function()
			return {
				derived = true,
			}
		end)
		local WithDerivedState = Component:extend("WithDerivedState")

		WithDerivedState.getDerivedStateFromProps = getDerivedSpy.value

		function WithDerivedState:init()
			self.state = {
				init = true,
			}

			getStateCallback = function()
				return self.state
			end
		end

		function WithDerivedState:render()
			return nil
		end

		local hostParent = nil
		local hostKey = "WithDerivedState"
		local element = createElement(WithDerivedState)

		noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		expect(getDerivedSpy.callCount).to.equal(2)

		assertDeepEqual(getStateCallback(), {
			init = true,
			derived = true,
		})
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e93</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX166F4EC014E84B4480F510D13DAEDDB9">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">getElementTraceback.spec</string>
							<string name="ScriptGuid">{557F1D83-32A9-4C11-89BB-FF36237F65E4}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should return stack traces in initial renders", function()
		local TestComponent = Component:extend("TestComponent")

		local stackTrace
		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.be.a("string")
	end)

	itSKIP("it should return an updated stack trace after an update", function() end)

	it("should return nil when elementTracing is off", function()
		local stackTrace = nil

		local config = {
			elementTracing = false,
		}

		local TestComponent = Component:extend("TestComponent")

		function TestComponent:init()
			stackTrace = self:getElementTraceback()
		end

		function TestComponent:render()
			return nil
		end

		GlobalConfig.scoped(config, function()
			local element = createElement(TestComponent)
			local hostParent = nil
			local key = "Some key"

			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(stackTrace).to.equal(nil)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e94</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0547A30A6914499D837738634A9FCF88">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">init.spec</string>
							<string name="ScriptGuid">{DB5D80DC-C54F-46E9-B660-946ACBC2EBE2}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked with props when mounted", function()
		local MyComponent = Component:extend("MyComponent")

		local initSpy = createSpy()

		MyComponent.init = initSpy.value

		function MyComponent:render()
			return nil
		end

		local props = {
			a = 5,
		}
		local element = createElement(MyComponent, props)
		local hostParent = nil
		local key = "Some Component Key"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(initSpy.callCount).to.equal(1)

		local values = initSpy:captureValues("self", "props")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		expect(typeof(values.props)).to.equal("table")
		assertDeepEqual(values.props, props)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e95</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0104D7C0616748408D649B58EA718B8F">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">legacyContext.spec</string>
							<string name="ScriptGuid">{82FE0688-0504-4B12-9445-0162426E924C}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be provided as a mutable self._context in Component:init", function()
		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.foo = "bar"
		end

		function Provider:render() end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Provider"
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContext = {
			foo = "bar",
		}

		assertDeepEqual(node.legacyContext, expectedContext)
	end)

	it("should be inherited from parent stateful nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Parent = Component:extend("Parent")

		function Parent:render()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should be inherited from parent function nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local function Parent()
			return createElement(Consumer)
		end

		local element = createElement(Parent)
		local hostParent = nil
		local hostKey = "Parent"
		local context = {
			hello = "world",
			value = 6,
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)
		assertDeepEqual(node.legacyContext, context)
		assertDeepEqual(capturedContext, context)
	end)

	it("should contain values put into the tree by parent nodes", function()
		local Consumer = Component:extend("Consumer")

		local capturedContext
		function Consumer:init()
			capturedContext = self._context
		end

		function Consumer:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			return createElement(Consumer)
		end

		local element = createElement(Provider)
		local hostParent = nil
		local hostKey = "Consumer"
		local context = {
			dont = "try it",
		}
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

		local initialContext = {
			dont = "try it",
		}

		local expectedContext = {
			dont = "try it",
			frob = "ulator",
		}

		-- Because components mutate context, we're careful with equality
		expect(node.legacyContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(context)
		expect(capturedContext).never.to.equal(node.legacyContext)

		assertDeepEqual(context, initialContext)
		assertDeepEqual(node.legacyContext, expectedContext)
		assertDeepEqual(capturedContext, expectedContext)
	end)

	it("should transfer context to children that are replaced", function()
		local ConsumerA = Component:extend("ConsumerA")

		local capturedContextA
		function ConsumerA:init()
			self._context.A = "hello"

			capturedContextA = self._context
		end

		function ConsumerA:render() end

		local ConsumerB = Component:extend("ConsumerB")

		local capturedContextB
		function ConsumerB:init()
			self._context.B = "hello"

			capturedContextB = self._context
		end

		function ConsumerB:render() end

		local Provider = Component:extend("Provider")

		function Provider:init()
			self._context.frob = "ulator"
		end

		function Provider:render()
			local useConsumerB = self.props.useConsumerB

			if useConsumerB then
				return createElement(ConsumerB)
			else
				return createElement(ConsumerA)
			end
		end

		local hostParent = nil
		local hostKey = "Consumer"

		local element = createElement(Provider)
		local node = noopReconciler.mountVirtualNode(element, hostParent, hostKey)

		local expectedContextA = {
			frob = "ulator",
			A = "hello",
		}

		assertDeepEqual(capturedContextA, expectedContextA)

		local expectedContextB = {
			frob = "ulator",
			B = "hello",
		}

		local replacedElement = createElement(Provider, {
			useConsumerB = true,
		})
		noopReconciler.updateVirtualNode(node, replacedElement)

		assertDeepEqual(capturedContextB, expectedContextB)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e96</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXF604FF536A7E429B87327E35A87B2382">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">render.spec</string>
							<string name="ScriptGuid">{34DEC7F3-D6CB-4AE5-B13B-0EFB3255FBBA}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should throw on mount if not overridden", function()
		local MyComponent = Component:extend("MyComponent")

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local success, result = pcall(function()
			noopReconciler.mountVirtualNode(element, hostParent, key)
		end)

		expect(success).to.equal(false)
		expect(result:match("MyComponent")).to.be.ok()
		expect(result:match("render")).to.be.ok()
	end)

	it("should be invoked when a component is mounted", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(capturedProps, {})
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when a component is updated via props", function()
		local Foo = Component:extend("Foo")

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local initialProps = {
			a = 2,
		}
		local element = createElement(Foo, initialProps)
		local hostParent = nil
		local key = "Foo Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(firstProps, initialProps)
		assertDeepEqual(firstState, {})

		local updatedProps = {
			a = 3,
		}
		local newElement = createElement(Foo, updatedProps)

		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)

		local secondRenderArguments = renderSpy:captureValues("self")
		local secondProps = capturedProps
		local secondState = capturedState

		expect(Type.of(secondRenderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(secondProps).never.to.equal(firstProps)
		assertDeepEqual(secondProps, updatedProps)
		expect(secondState).to.equal(firstState)
	end)

	it("should be invoked when a component is updated via state", function()
		local Foo = Component:extend("Foo")

		local setState
		function Foo:init()
			setState = function(...)
				return self:setState(...)
			end
		end

		local capturedProps
		local capturedState
		local renderSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state
		end)
		Foo.render = renderSpy.value

		local element = createElement(Foo)
		local hostParent = nil
		local key = "Foo Test"

		noopReconciler.mountVirtualNode(element, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local firstRenderArguments = renderSpy:captureValues("self")
		local firstProps = capturedProps
		local firstState = capturedState

		expect(Type.of(firstRenderArguments.self)).to.equal(Type.StatefulComponentInstance)

		setState({})

		expect(renderSpy.callCount).to.equal(2)

		local renderArguments = renderSpy:captureValues("self")

		expect(Type.of(renderArguments.self)).to.equal(Type.StatefulComponentInstance)
		expect(capturedProps).to.equal(firstProps)
		expect(capturedState).never.to.equal(firstState)
	end)

	itSKIP("Test defaultProps on initial render", function() end)
	itSKIP("Test defaultProps on prop update", function() end)
	itSKIP("Test defaultProps on state update", function() end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e97</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX486D92417AD9432D8360D77C6DE39016">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">setState.spec</string>
							<string name="ScriptGuid">{F0E02966-8637-4194-BCEC-61D41C775067}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local None = require(script.Parent.Parent.None)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("setState", function()
		it("should not trigger an extra update when called in init", function()
			local renderCount = 0
			local updateCount = 0
			local capturedState

			local InitComponent = Component:extend("InitComponent")

			function InitComponent:init()
				self:setState({
					a = 1,
				})
			end

			function InitComponent:willUpdate()
				updateCount = updateCount + 1
			end

			function InitComponent:render()
				renderCount = renderCount + 1
				capturedState = self.state
				return nil
			end

			local initElement = createElement(InitComponent)

			noopReconciler.mountVirtualTree(initElement)

			expect(renderCount).to.equal(1)
			expect(updateCount).to.equal(0)
			expect(capturedState.a).to.equal(1)
		end)

		it("should throw when called in render", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				self:setState({
					a = 1,
				})
			end

			local renderElement = createElement(TestComponent)

			local success, result = pcall(noopReconciler.mountVirtualTree, renderElement)

			expect(success).to.equal(false)
			expect(result:match("render")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in shouldUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:shouldUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)

			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("shouldUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUpdate", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUpdate()
				self:setState({
					a = 1,
				})
			end

			local initialElement = createElement(TestComponent)
			local updatedElement = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(initialElement)

			local success, result = pcall(noopReconciler.updateVirtualTree, tree, updatedElement)

			expect(success).to.equal(false)
			expect(result:match("willUpdate")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should throw when called in willUnmount", function()
			local TestComponent = Component:extend("TestComponent")

			function TestComponent:render()
				return nil
			end

			function TestComponent:willUnmount()
				self:setState({
					a = 1,
				})
			end

			local element = createElement(TestComponent)
			local tree = noopReconciler.mountVirtualTree(element)

			local success, result = pcall(noopReconciler.unmountVirtualTree, tree)

			expect(success).to.equal(false)
			expect(result:match("willUnmount")).to.be.ok()
			expect(result:match("TestComponent")).to.be.ok()
		end)

		it("should remove values from state when the value is None", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback({
				value = None,
			})

			expect(getStateCallback().value).to.equal(nil)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should invoke functions to compute a partial state", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback, getStateCallback, getPropsCallback

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				getStateCallback = function()
					return self.state
				end

				getPropsCallback = function()
					return self.props
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")

			expect(getStateCallback().value).to.equal(0)

			setStateCallback(function(state, props)
				expect(state).to.equal(getStateCallback())
				expect(props).to.equal(getPropsCallback())

				return {
					value = state.value + 1,
				}
			end)

			expect(getStateCallback().value).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)

		it("should cancel rendering if the function returns nil", function()
			local TestComponent = Component:extend("TestComponent")
			local setStateCallback
			local renderCount = 0

			function TestComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end

				self:setState({
					value = 0,
				})
			end

			function TestComponent:render()
				renderCount = renderCount + 1
				return nil
			end

			local element = createElement(TestComponent)
			local instance = noopReconciler.mountVirtualNode(element, nil, "Test")
			expect(renderCount).to.equal(1)

			setStateCallback(function(_state, _props)
				return nil
			end)

			expect(renderCount).to.equal(1)

			noopReconciler.unmountVirtualNode(instance)
		end)
	end)

	describe("setState suspension", function()
		it("should defer setState triggered while reconciling", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						self:setState({
							foo = "bar",
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")
		end)

		it("should defer setState triggered while reconciling during an update", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didUpdate()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function()
						-- This guards against a stack overflow that would be OUR fault
						if not self.state.foo then
							self:setState({
								foo = "bar",
							})
						end
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(nil)

			result = noopReconciler.updateVirtualNode(result, createElement(Parent))

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal("bar")

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should combine pending state changes properly", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback("foo", 1)
				self.props.callback("bar", 3)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(key, value)
						self:setState({
							[key] = value,
						})
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)
			expect(getParentStateCallback().bar).to.equal(3)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should abort properly when functional setState returns nil while deferred", function()
			local Child = Component:extend("Child")

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback()
			end

			local Parent = Component:extend("Parent")

			local renderSpy = createSpy(function(self)
				return createElement(Child, {
					callback = function()
						self:setState(function()
							-- abort the setState
							return nil
						end)
					end,
				})
			end)

			Parent.render = renderSpy.value

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(renderSpy.callCount).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should still apply pending state if a subsequent state update was aborted", function()
			local Child = Component:extend("Child")
			local getParentStateCallback

			function Child:render()
				return nil
			end

			function Child:didMount()
				self.props.callback(function()
					return {
						foo = 1,
					}
				end)
				self.props.callback(function()
					return nil
				end)
			end

			local Parent = Component:extend("Parent")

			function Parent:init()
				getParentStateCallback = function()
					return self.state
				end
			end

			function Parent:render()
				return createElement(Child, {
					callback = function(stateUpdater)
						self:setState(stateUpdater)
					end,
				})
			end

			local element = createElement(Parent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
			expect(getParentStateCallback().foo).to.equal(1)

			noopReconciler.unmountVirtualNode(result)
		end)

		it("should not re-process new state when pending state is present after update", function()
			local setComponentState
			local getComponentState

			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					hasUpdatedOnce = false,
					counter = 0,
				})

				setComponentState = function(mapState)
					self:setState(mapState)
				end

				getComponentState = function()
					return self.state
				end
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didUpdate()
				if self.state.hasUpdatedOnce == false then
					self:setState({
						hasUpdatedOnce = true,
					})
				end
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(getComponentState().hasUpdatedOnce).to.equal(false)
			expect(getComponentState().counter).to.equal(0)

			setComponentState(function(state)
				return {
					counter = state.counter + 1,
				}
			end)

			expect(getComponentState().hasUpdatedOnce).to.equal(true)
			expect(getComponentState().counter).to.equal(1)
		end)

		it("should throw when an infinite update is triggered", function()
			local InfiniteUpdater = Component:extend("InfiniteUpdater")

			function InfiniteUpdater:render()
				return nil
			end

			function InfiniteUpdater:didMount()
				self:setState({})
			end

			function InfiniteUpdater:didUpdate()
				self:setState({})
			end

			local element = createElement(InfiniteUpdater)
			local hostParent = nil
			local key = "Test"

			local success, result = pcall(noopReconciler.mountVirtualNode, element, hostParent, key)

			expect(success).to.equal(false)
			expect(result:find("InfiniteUpdater")).to.be.ok()
			expect(result:find("reached the setState update recursion limit")).to.be.ok()
		end)

		itSKIP("should process single updates with both new and pending state", function()
			--[[
				This situation shouldn't be possible currently, but the implementation
				should support it for future update de-duplication
			]]
		end)

		it("should call trigger update after didMount when setting state in didMount", function()
			--[[
				Before setState suspension, it was possible to call setState in didMount but it would
				not actually finish resolving didMount until after the entire update.

				This is theoretically problematic, as it means that lifecycle methods like didUpdate
				could be called before didMount is finished. setState suspension resolves this by
				suspending state updates made in didMount and didUpdate as well as reconciliation
			]]
			local MyComponent = Component:extend("MyComponent")

			function MyComponent:init()
				self:setState({
					status = "initial mount",
				})

				self.isMounted = false
			end

			function MyComponent:render()
				return nil
			end

			function MyComponent:didMount()
				self:setState({
					status = "mounted",
				})

				self.isMounted = true
			end

			function MyComponent:didUpdate(_oldProps, oldState)
				expect(oldState.status).to.equal("initial mount")
				expect(self.state.status).to.equal("mounted")

				expect(self.isMounted).to.equal(true)
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local result = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(result).to.be.ok()
		end)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e98</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX512F938B15724455BBB152EC3B802E05">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">shouldUpdate.spec</string>
							<string name="ScriptGuid">{572F3805-9019-46B0-9AF6-82F3A10B0B87}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when props update", function()
		local MyComponent = Component:extend("MyComponent")

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		assertDeepEqual(values.newProps, newProps)

		assertDeepEqual(capturedProps, initialProps)

		expect(values.newState).to.equal(capturedState)
		assertDeepEqual(capturedState, {})
	end)

	it("should be invoked when state is updated", function()
		local MyComponent = Component:extend("MyComponent")

		local initialState = {
			a = 1,
		}

		local setState
		local initState
		function MyComponent:init()
			setState = function(...)
				return self:setState(...)
			end

			self:setState(initialState)

			initState = self.state
		end

		local capturedProps
		local capturedState
		local shouldUpdateSpy = createSpy(function(self)
			capturedProps = self.props
			capturedState = self.state

			return true
		end)

		MyComponent.shouldUpdate = shouldUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(shouldUpdateSpy.callCount).to.equal(0)

		local newState = {
			a = 2,
			b = 3,
		}

		setState(newState)

		expect(shouldUpdateSpy.callCount).to.equal(1)

		local values = shouldUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)

		expect(values.newProps).to.equal(capturedProps)
		assertDeepEqual(capturedProps, {})

		assertDeepEqual(capturedState, initialState)
		expect(capturedState).to.equal(initState)
		assertDeepEqual(values.newState, newState)
	end)

	it("should not abort an update when returning true", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return true
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(2)
	end)

	it("should abort an update when retuning false", function()
		local MyComponent = Component:extend("MyComponent")

		function MyComponent:shouldUpdate()
			return false
		end

		local renderSpy = createSpy()

		MyComponent.render = renderSpy.value

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(renderSpy.callCount).to.equal(1)

		local newElement = createElement(MyComponent)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(renderSpy.callCount).to.equal(1)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e99</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXF45FB9D9EBFA429AA58A1612197F86CE">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">validateProps.spec</string>
							<string name="ScriptGuid">{9B58112D-AB8B-478F-9F7F-41355D8523C9}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local GlobalConfig = require(script.Parent.Parent.GlobalConfig)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when mounted", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should be invoked when props change", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
			})
		end)
	end)

	it("should not be invoked when state changes", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local setStateCallback = nil
			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:init()
				setStateCallback = function(newState)
					self:setState(newState)
				end
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
			})

			setStateCallback({
				b = 1,
			})

			expect(validatePropsSpy.callCount).to.equal(1)
		end)
	end)

	it("should throw if validateProps is not a function", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = 1

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should throw if validateProps returns false", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			expect(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end).to.throw()
		end)
	end)

	it("should include the component name in the error message", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")
			MyComponent.validateProps = function()
				return false
			end

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent)
			local hostParent = nil
			local key = "Test"

			local success, error = pcall(function()
				noopReconciler.mountVirtualNode(element, hostParent, key)
			end)

			expect(success).to.equal(false)
			local startIndex = error:find("MyComponent")
			expect(startIndex).to.be.ok()
		end)
	end)

	it("should be invoked after defaultProps are applied", function()
		local config = {
			propValidation = true,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			MyComponent.defaultProps = {
				b = 2,
			}

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(1)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 1,
				b = 2,
			})

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(2)
			validatePropsSpy:assertCalledWithDeepEqual({
				a = 2,
				b = 2,
			})
		end)
	end)

	it("should not be invoked if the flag is off", function()
		local config = {
			propValidation = false,
		}

		GlobalConfig.scoped(config, function()
			local MyComponent = Component:extend("MyComponent")

			local validatePropsSpy = createSpy(function()
				return true
			end)

			MyComponent.validateProps = validatePropsSpy.value

			function MyComponent:render()
				return nil
			end

			local element = createElement(MyComponent, { a = 1 })
			local hostParent = nil
			local key = "Test"

			local node = noopReconciler.mountVirtualNode(element, hostParent, key)
			expect(validatePropsSpy.callCount).to.equal(0)

			local newElement = createElement(MyComponent, { a = 2 })
			noopReconciler.updateVirtualNode(node, newElement)
			expect(validatePropsSpy.callCount).to.equal(0)
		end)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9a</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX0D926746DC10476FB61EC7A78AB63062">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">willUnmount.spec</string>
							<string name="ScriptGuid">{AA18D43C-A8D4-4058-99D8-5C37E2F6A9E1}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when unmounted", function()
		local MyComponent = Component:extend("MyComponent")

		local willUnmountSpy = createSpy()

		MyComponent.willUnmount = willUnmountSpy.value

		function MyComponent:render()
			return nil
		end

		local element = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(element, hostParent, key)
		noopReconciler.unmountVirtualNode(node)

		expect(willUnmountSpy.callCount).to.equal(1)

		local values = willUnmountSpy:captureValues("self")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9b</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX46389A7F55FB4C4892DCF88427264DC8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">willUpdate.spec</string>
							<string name="ScriptGuid">{22DA5852-095D-404B-B099-54E83A48CE7F}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.Parent.assertDeepEqual)
	local createElement = require(script.Parent.Parent.createElement)
	local createReconciler = require(script.Parent.Parent.createReconciler)
	local createSpy = require(script.Parent.Parent.createSpy)
	local NoopRenderer = require(script.Parent.Parent.NoopRenderer)
	local Type = require(script.Parent.Parent.Type)

	local Component = require(script.Parent.Parent.Component)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be invoked when updated via updateVirtualNode", function()
		local MyComponent = Component:extend("MyComponent")

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:render()
			return nil
		end

		local initialProps = {
			a = 5,
		}
		local initialElement = createElement(MyComponent, initialProps)
		local hostParent = nil
		local key = "Test"

		local node = noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		local newProps = {
			a = 6,
			b = 2,
		}
		local newElement = createElement(MyComponent, newProps)
		noopReconciler.updateVirtualNode(node, newElement)

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, newProps)
		assertDeepEqual(values.newState, {})
	end)

	it("it should be invoked when updated via setState", function()
		local MyComponent = Component:extend("MyComponent")
		local setComponentState

		local willUpdateSpy = createSpy()

		MyComponent.willUpdate = willUpdateSpy.value

		function MyComponent:init()
			setComponentState = function(state)
				self:setState(state)
			end

			self:setState({
				foo = 1,
			})
		end

		function MyComponent:render()
			return nil
		end

		local initialElement = createElement(MyComponent)
		local hostParent = nil
		local key = "Test"

		noopReconciler.mountVirtualNode(initialElement, hostParent, key)

		expect(willUpdateSpy.callCount).to.equal(0)

		setComponentState({
			foo = 2,
		})

		expect(willUpdateSpy.callCount).to.equal(1)

		local values = willUpdateSpy:captureValues("self", "newProps", "newState")

		expect(Type.of(values.self)).to.equal(Type.StatefulComponentInstance)
		assertDeepEqual(values.newProps, {})
		assertDeepEqual(values.newState, {
			foo = 2,
		})
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9c</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBX12F40BE040AC490B90AB2D5039825201">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ComponentLifecyclePhase</string>
						<string name="ScriptGuid">{14251D25-C799-4132-B933-32EEB73CF775}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local ComponentLifecyclePhase = strict({
	-- Component methods
	Init = Symbol.named("init"),
	Render = Symbol.named("render"),
	ShouldUpdate = Symbol.named("shouldUpdate"),
	WillUpdate = Symbol.named("willUpdate"),
	DidMount = Symbol.named("didMount"),
	DidUpdate = Symbol.named("didUpdate"),
	WillUnmount = Symbol.named("willUnmount"),

	-- Phases describing reconciliation status
	ReconcileChildren = Symbol.named("reconcileChildren"),
	Idle = Symbol.named("idle"),
}, "ComponentLifecyclePhase")

return ComponentLifecyclePhase
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9d</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX751CE314074C4D9D877164C37010F2F7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Config</string>
						<string name="ScriptGuid">{5F13F4CD-AAB8-4C13-B7EB-BE25A10B4DCE}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Exposes an interface to set global configuration values for Roact.

	Configuration can only occur once, and should only be done by an application
	using Roact, not a library.

	Any keys that aren't recognized will cause errors. Configuration is only
	intended for configuring Roact itself, not extensions or libraries.

	Configuration is expected to be set immediately after loading Roact. Setting
	configuration values after an application starts may produce unpredictable
	behavior.
]]

-- Every valid configuration value should be non-nil in this table.
local defaultConfig = {
	-- Enables asserts for internal Roact APIs. Useful for debugging Roact itself.
	["internalTypeChecks"] = false,
	-- Enables stricter type asserts for Roact's public API.
	["typeChecks"] = false,
	-- Enables storage of `debug.traceback()` values on elements for debugging.
	["elementTracing"] = false,
	-- Enables validation of component props in stateful components.
	["propValidation"] = false,
}

-- Build a list of valid configuration values up for debug messages.
local defaultConfigKeys = {}
for key in pairs(defaultConfig) do
	table.insert(defaultConfigKeys, key)
end

local Config = {}

function Config.new()
	local self = {}

	self._currentConfig = setmetatable({}, {
		__index = function(_, key)
			local message = ("Invalid global configuration key %q. Valid configuration keys are: %s"):format(
				tostring(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end,
	})

	-- We manually bind these methods here so that the Config's methods can be
	-- used without passing in self, since they eventually get exposed on the
	-- root Roact object.
	self.set = function(...)
		return Config.set(self, ...)
	end

	self.get = function(...)
		return Config.get(self, ...)
	end

	self.scoped = function(...)
		return Config.scoped(self, ...)
	end

	self.set(defaultConfig)

	return self
end

function Config:set(configValues)
	-- Validate values without changing any configuration.
	-- We only want to apply this configuration if it's valid!
	for key, value in pairs(configValues) do
		if defaultConfig[key] == nil then
			local message = ("Invalid global configuration key %q (type %s). Valid configuration keys are: %s"):format(
				tostring(key),
				typeof(key),
				table.concat(defaultConfigKeys, ", ")
			)

			error(message, 3)
		end

		-- Right now, all configuration values must be boolean.
		if typeof(value) ~= "boolean" then
			local message = (
				"Invalid value %q (type %s) for global configuration key %q. Valid values are: true, false"
			):format(tostring(value), typeof(value), tostring(key))

			error(message, 3)
		end

		self._currentConfig[key] = value
	end
end

function Config:get()
	return self._currentConfig
end

function Config:scoped(configValues, callback)
	local previousValues = {}
	for key, value in pairs(self._currentConfig) do
		previousValues[key] = value
	end

	self.set(configValues)

	local success, result = pcall(callback)

	self.set(previousValues)

	assert(success, result)
end

return Config
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9e</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX80C235ACB94548ABAB13DB3AC81AC6D6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Config.spec</string>
						<string name="ScriptGuid">{A4D9CFCC-3150-4802-A2A4-BAE00173AA10}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Config = require(script.Parent.Config)

	it("should accept valid configuration", function()
		local config = Config.new()
		local values = config.get()

		expect(values.elementTracing).to.equal(false)

		config.set({
			elementTracing = true,
		})

		expect(values.elementTracing).to.equal(true)
	end)

	it("should reject invalid configuration keys", function()
		local config = Config.new()

		local badKey = "garblegoop"

		local ok, err = pcall(function()
			config.set({
				[badKey] = true,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention our bad key somewhere.
		expect(err:find(badKey)).to.be.ok()
	end)

	it("should reject invalid configuration values", function()
		local config = Config.new()

		local goodKey = "elementTracing"
		local badValue = "Hello there!"

		local ok, err = pcall(function()
			config.set({
				[goodKey] = badValue,
			})
		end)

		expect(ok).to.equal(false)

		-- The error should mention both our key and value
		expect(err:find(goodKey)).to.be.ok()
		expect(err:find(badValue)).to.be.ok()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0e9f</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCF18339476344FAA8932C623518EA0CD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementKind</string>
						<string name="ScriptGuid">{8D30D90A-323E-4DDD-AFB3-2D3211922A6C}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating the type of an element.

	Use `ElementKind` as a key, and values from it as the value.

		local element = {
			[ElementKind] = ElementKind.Host,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)
local Portal = require(script.Parent.Portal)

local ElementKind = newproxy(true)

local ElementKindInternal = {
	Portal = Symbol.named("Portal"),
	Host = Symbol.named("Host"),
	Function = Symbol.named("Function"),
	Stateful = Symbol.named("Stateful"),
	Fragment = Symbol.named("Fragment"),
}

function ElementKindInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[ElementKind]
end

local componentTypesToKinds = {
	["string"] = ElementKindInternal.Host,
	["function"] = ElementKindInternal.Function,
	["table"] = ElementKindInternal.Stateful,
}

function ElementKindInternal.fromComponent(component)
	if component == Portal then
		return ElementKind.Portal
	else
		return componentTypesToKinds[typeof(component)]
	end
end

getmetatable(ElementKind).__index = ElementKindInternal

strict(ElementKindInternal, "ElementKind")

return ElementKind
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE40539593AB94F8881646D9B5DC8960B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementKind.spec</string>
						<string name="ScriptGuid">{522E5C71-F5B6-4B0D-9943-87C77D611BE7}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Portal = require(script.Parent.Portal)
	local Component = require(script.Parent.Component)

	local ElementKind = require(script.Parent.ElementKind)

	describe("of", function()
		it("should return nil for non-table values", function()
			expect(ElementKind.of(nil)).to.equal(nil)
			expect(ElementKind.of(5)).to.equal(nil)
			expect(ElementKind.of(newproxy(true))).to.equal(nil)
		end)

		it("should return nil for table values without an ElementKind key", function()
			expect(ElementKind.of({})).to.equal(nil)
		end)

		it("should return the ElementKind from a table", function()
			local value = {
				[ElementKind] = ElementKind.Stateful,
			}

			expect(ElementKind.of(value)).to.equal(ElementKind.Stateful)
		end)
	end)

	describe("fromComponent", function()
		it("should handle host components", function()
			expect(ElementKind.fromComponent("foo")).to.equal(ElementKind.Host)
		end)

		it("should handle function components", function()
			local function foo() end

			expect(ElementKind.fromComponent(foo)).to.equal(ElementKind.Function)
		end)

		it("should handle stateful components", function()
			local Foo = Component:extend("Foo")

			expect(ElementKind.fromComponent(Foo)).to.equal(ElementKind.Stateful)
		end)

		it("should handle portals", function()
			expect(ElementKind.fromComponent(Portal)).to.equal(ElementKind.Portal)
		end)

		it("should return nil for invalid inputs", function()
			expect(ElementKind.fromComponent(5)).to.equal(nil)
			expect(ElementKind.fromComponent(newproxy(true))).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX1C3DA42F91974099A3CD4BF7C95FD847">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementUtils</string>
						<string name="ScriptGuid">{E4784757-C6A4-4A71-8813-AEE7BB54F197}</string>
						<ProtectedString name="Source"><![CDATA[local Type = require(script.Parent.Type)
local Symbol = require(script.Parent.Symbol)

local function noop()
	return nil
end

local ElementUtils = {}

--[[
	A signal value indicating that a child should use its parent's key, because
	it has no key of its own.

	This occurs when you return only one element from a function component or
	stateful render function.
]]
ElementUtils.UseParentKey = Symbol.named("UseParentKey")

--[[
	Returns an iterator over the children of an element.
	`elementOrElements` may be one of:
	* a boolean
	* nil
	* a single element
	* a fragment
	* a table of elements

	If `elementOrElements` is a boolean or nil, this will return an iterator with
	zero elements.

	If `elementOrElements` is a single element, this will return an iterator with
	one element: a tuple where the first value is ElementUtils.UseParentKey, and
	the second is the value of `elementOrElements`.

	If `elementOrElements` is a fragment or a table, this will return an iterator
	over all the elements of the array.

	If `elementOrElements` is none of the above, this function will throw.
]]
function ElementUtils.iterateElements(elementOrElements)
	local richType = Type.of(elementOrElements)

	-- Single child
	if richType == Type.Element then
		local called = false

		return function()
			if called then
				return nil
			else
				called = true
				return ElementUtils.UseParentKey, elementOrElements
			end
		end
	end

	local regularType = typeof(elementOrElements)

	if elementOrElements == nil or regularType == "boolean" then
		return noop
	end

	if regularType == "table" then
		return pairs(elementOrElements)
	end

	error("Invalid elements")
end

--[[
	Gets the child corresponding to a given key, respecting Roact's rules for
	children. Specifically:
	* If `elements` is nil or a boolean, this will return `nil`, regardless of
		the key given.
	* If `elements` is a single element, this will return `nil`, unless the key
		is ElementUtils.UseParentKey.
	* If `elements` is a table of elements, this will return `elements[key]`.
]]
function ElementUtils.getElementByKey(elements, hostKey)
	if elements == nil or typeof(elements) == "boolean" then
		return nil
	end

	if Type.of(elements) == Type.Element then
		if hostKey == ElementUtils.UseParentKey then
			return elements
		end

		return nil
	end

	if typeof(elements) == "table" then
		return elements[hostKey]
	end

	error("Invalid elements")
end

return ElementUtils
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX14D803896E094EDDA0CDD045B69AD925">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">ElementUtils.spec</string>
						<string name="ScriptGuid">{A298B9BB-E7C3-479D-9EF2-40FFC47CFFA6}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ElementUtils = require(script.Parent.ElementUtils)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local Type = require(script.Parent.Type)

	describe("iterateElements", function()
		it("should iterate once for a single child", function()
			local child = createElement("TextLabel")
			local iterator = ElementUtils.iterateElements(child)
			local iteratedKey, iteratedChild = iterator()
			-- For single elements, the key should be UseParentKey
			expect(iteratedKey).to.equal(ElementUtils.UseParentKey)
			expect(iteratedChild).to.equal(child)

			iteratedKey = iterator()
			expect(iteratedKey).to.equal(nil)
		end)

		it("should iterate over tables", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			local seenChildren = {}
			local count = 0

			for key, child in ElementUtils.iterateElements(children) do
				expect(typeof(key)).to.equal("string")
				expect(Type.of(child)).to.equal(Type.Element)
				seenChildren[child] = key
				count = count + 1
			end

			expect(count).to.equal(2)
			expect(seenChildren[children.a]).to.equal("a")
			expect(seenChildren[children.b]).to.equal("b")
		end)

		it("should return a zero-element iterator for booleans", function()
			local booleanIterator = ElementUtils.iterateElements(false)
			expect(booleanIterator()).to.equal(nil)
		end)

		it("should return a zero-element iterator for nil", function()
			local nilIterator = ElementUtils.iterateElements(nil)
			expect(nilIterator()).to.equal(nil)
		end)

		it("should throw if given an illegal value", function()
			expect(function()
				ElementUtils.iterateElements(1)
			end).to.throw()
		end)
	end)

	describe("getElementByKey", function()
		it("should return nil for booleans", function()
			expect(ElementUtils.getElementByKey(true, "test")).to.equal(nil)
		end)

		it("should return nil for nil", function()
			expect(ElementUtils.getElementByKey(nil, "test")).to.equal(nil)
		end)

		describe("single elements", function()
			local element = createElement("TextLabel")

			it("should return the element if the key is UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, ElementUtils.UseParentKey)).to.equal(element)
			end)

			it("should return nil if the key is not UseParentKey", function()
				expect(ElementUtils.getElementByKey(element, "test")).to.equal(nil)
			end)
		end)

		it("should return the corresponding element from a table", function()
			local children = {
				a = createElement("TextLabel"),
				b = createElement("TextLabel"),
			}

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(children.a)
			expect(ElementUtils.getElementByKey(children, "b")).to.equal(children.b)
		end)

		it("should return nil if the key does not exist", function()
			local children = createFragment({})

			expect(ElementUtils.getElementByKey(children, "a")).to.equal(nil)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC6FCD9CD0D7A496B8C937F719995B358">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalConfig</string>
						<string name="ScriptGuid">{4B81F130-2949-4871-8A5A-6124C27672F7}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Exposes a single instance of a configuration as Roact's GlobalConfig.
]]

local Config = require(script.Parent.Config)

return Config.new()
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0A403F915B9442CE9D2745CE80E4CF98">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GlobalConfig.spec</string>
						<string name="ScriptGuid">{B6D7FD93-8340-464A-9333-6EBFEE908FCE}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local GlobalConfig = require(script.Parent.GlobalConfig)

	it("should have the correct methods", function()
		expect(GlobalConfig).to.be.ok()
		expect(GlobalConfig.set).to.be.ok()
		expect(GlobalConfig.get).to.be.ok()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea5</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCE7E957783E34C25822411A5B55B74D8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Logging</string>
						<string name="ScriptGuid">{6E5BA2E2-B078-4894-9930-9AF245A2FC4A}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Centralized place to handle logging. Lets us:
	- Unit test log output via `Logging.capture`
	- Disable verbose log messages when not debugging Roact

	This should be broken out into a separate library with the addition of
	scoping and logging configuration.
]]

-- Determines whether log messages will go to stdout/stderr
local outputEnabled = true

-- A set of LogInfo objects that should have messages inserted into them.
-- This is a set so that nested calls to Logging.capture will behave.
local collectors = {}

-- A set of all stack traces that have called warnOnce.
local onceUsedLocations = {}

--[[
	Indent a potentially multi-line string with the given number of tabs, in
	addition to any indentation the string already has.
]]
local function indent(source, indentLevel)
	local indentString = ("\t"):rep(indentLevel)

	return indentString .. source:gsub("\n", "\n" .. indentString)
end

--[[
	Indents a list of strings and then concatenates them together with newlines
	into a single string.
]]
local function indentLines(lines, indentLevel)
	local outputBuffer = {}

	for _, line in ipairs(lines) do
		table.insert(outputBuffer, indent(line, indentLevel))
	end

	return table.concat(outputBuffer, "\n")
end

local logInfoMetatable = {}

--[[
	Automatic coercion to strings for LogInfo objects to enable debugging them
	more easily.
]]
function logInfoMetatable:__tostring()
	local outputBuffer = { "LogInfo {" }

	local errorCount = #self.errors
	local warningCount = #self.warnings
	local infosCount = #self.infos

	if errorCount + warningCount + infosCount == 0 then
		table.insert(outputBuffer, "\t(no messages)")
	end

	if errorCount > 0 then
		table.insert(outputBuffer, ("\tErrors (%d) {"):format(errorCount))
		table.insert(outputBuffer, indentLines(self.errors, 2))
		table.insert(outputBuffer, "\t}")
	end

	if warningCount > 0 then
		table.insert(outputBuffer, ("\tWarnings (%d) {"):format(warningCount))
		table.insert(outputBuffer, indentLines(self.warnings, 2))
		table.insert(outputBuffer, "\t}")
	end

	if infosCount > 0 then
		table.insert(outputBuffer, ("\tInfos (%d) {"):format(infosCount))
		table.insert(outputBuffer, indentLines(self.infos, 2))
		table.insert(outputBuffer, "\t}")
	end

	table.insert(outputBuffer, "}")

	return table.concat(outputBuffer, "\n")
end

local function createLogInfo()
	local logInfo = {
		errors = {},
		warnings = {},
		infos = {},
	}

	setmetatable(logInfo, logInfoMetatable)

	return logInfo
end

local Logging = {}

--[[
	Invokes `callback`, capturing all output that happens during its execution.

	Output will not go to stdout or stderr and will instead be put into a
	LogInfo object that is returned. If `callback` throws, the error will be
	bubbled up to the caller of `Logging.capture`.
]]
function Logging.capture(callback)
	local collector = createLogInfo()

	local wasOutputEnabled = outputEnabled
	outputEnabled = false
	collectors[collector] = true

	local success, result = pcall(callback)

	collectors[collector] = nil
	outputEnabled = wasOutputEnabled

	assert(success, result)

	return collector
end

--[[
	Issues a warning with an automatically attached stack trace.
]]
function Logging.warn(messageTemplate, ...)
	local message = messageTemplate:format(...)

	for collector in pairs(collectors) do
		table.insert(collector.warnings, message)
	end

	-- debug.traceback inserts a leading newline, so we trim it here
	local trace = debug.traceback("", 2):sub(2)
	local fullMessage = ("%s\n%s"):format(message, indent(trace, 1))

	if outputEnabled then
		warn(fullMessage)
	end
end

--[[
	Issues a warning like `Logging.warn`, but only outputs once per call site.

	This is useful for marking deprecated functions that might be called a lot;
	using `warnOnce` instead of `warn` will reduce output noise while still
	correctly marking all call sites.
]]
function Logging.warnOnce(messageTemplate, ...)
	local trace = debug.traceback()

	if onceUsedLocations[trace] then
		return
	end

	onceUsedLocations[trace] = true
	Logging.warn(messageTemplate, ...)
end

return Logging
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX81ED8F6F275A4DAFB67EB7FD875E6991">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">None</string>
						<string name="ScriptGuid">{0ABA22AB-2250-455A-8BE0-3A516511FE2C}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

-- Marker used to specify that the value is nothing, because nil cannot be
-- stored in tables.
local None = Symbol.named("None")

return None
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX5FE7F95C1404421AB1AC22A24A314698">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">NoopRenderer</string>
						<string name="ScriptGuid">{C668AE25-8CA1-447D-9FC0-E07582C69EE7}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Reference renderer intended for use in tests as well as for documenting the
	minimum required interface for a Roact renderer.
]]

local NoopRenderer = {}

function NoopRenderer.isHostObject(target)
	-- Attempting to use NoopRenderer to target a Roblox instance is almost
	-- certainly a mistake.
	return target == nil
end

function NoopRenderer.mountHostNode(_reconciler, _node) end

function NoopRenderer.unmountHostNode(_reconciler, _node) end

function NoopRenderer.updateHostNode(_reconciler, node, _newElement)
	return node
end

return NoopRenderer
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX810CF21BBEC7461E80A68E5001CF793D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Portal</string>
						<string name="ScriptGuid">{68D8D760-76D7-42C3-9578-B7FB6F5E0A35}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)

local Portal = Symbol.named("Portal")

return Portal
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ea9</UniqueId>
					</Properties>
				</Item>
				<Item class="Folder" referent="RBX126A1B195CA144FA8F9032E42EF71646">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<string name="Name">PropMarkers</string>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eaa</UniqueId>
					</Properties>
					<Item class="ModuleScript" referent="RBX072799265E8A4A538AD1652215514D96">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Change</string>
							<string name="ScriptGuid">{5F287682-C0E2-4F2F-9536-152A9F6E8026}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Change is used to generate special prop keys that can be used to connect to
	GetPropertyChangedSignal.

	Generally, Change is indexed by a Roblox property name:

		Roact.createElement("TextBox", {
			[Roact.Change.Text] = function(rbx)
				print("The TextBox", rbx, "changed text to", rbx.Text)
			end,
		})
]]

local Type = require(script.Parent.Parent.Type)

local Change = {}

local changeMetatable = {
	__tostring = function(self)
		return ("RoactHostChangeEvent(%s)"):format(self.name)
	end,
}

setmetatable(Change, {
	__index = function(_self, propertyName)
		local changeListener = {
			[Type] = Type.HostChangeEvent,
			name = propertyName,
		}

		setmetatable(changeListener, changeMetatable)
		Change[propertyName] = changeListener

		return changeListener
	end,
})

return Change
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eab</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXD6E8C4D281E743409DF0EEFB045CAFB3">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Change.spec</string>
							<string name="ScriptGuid">{00D469D0-837C-434B-AC70-F7A6F734C750}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Change = require(script.Parent.Change)

	it("should yield change listener objects when indexed", function()
		expect(Type.of(Change.Text)).to.equal(Type.HostChangeEvent)
		expect(Type.of(Change.Selected)).to.equal(Type.HostChangeEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Change.Text
		local b = Change.Text
		local c = Change.Selected

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eac</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX9602BBA839AC4512B038142E0E0B5A5C">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Children</string>
							<string name="ScriptGuid">{450156C1-C74C-40BD-B736-668E7023CDF3}</string>
							<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Children = Symbol.named("Children")

return Children
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ead</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBX23B2098B96CD4481A6EB844681959FAD">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Event</string>
							<string name="ScriptGuid">{1487D194-C1F5-4C1D-8311-9E15AD4EDF0E}</string>
							<ProtectedString name="Source"><![CDATA[--[[
	Index into `Event` to get a prop key for attaching to an event on a Roblox
	Instance.

	Example:

		Roact.createElement("TextButton", {
			Text = "Hello, world!",

			[Roact.Event.MouseButton1Click] = function(rbx)
				print("Clicked", rbx)
			end
		})
]]

local Type = require(script.Parent.Parent.Type)

local Event = {}

local eventMetatable = {
	__tostring = function(self)
		return ("RoactHostEvent(%s)"):format(self.name)
	end,
}

setmetatable(Event, {
	__index = function(_self, eventName)
		local event = {
			[Type] = Type.HostEvent,
			name = eventName,
		}

		setmetatable(event, eventMetatable)

		Event[eventName] = event

		return event
	end,
})

return Event
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eae</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXA5E2CC835104416792566F147526F706">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Event.spec</string>
							<string name="ScriptGuid">{C3368127-7905-472B-8856-8F88542AED7B}</string>
							<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Parent.Type)

	local Event = require(script.Parent.Event)

	it("should yield event objects when indexed", function()
		expect(Type.of(Event.MouseButton1Click)).to.equal(Type.HostEvent)
		expect(Type.of(Event.Touched)).to.equal(Type.HostEvent)
	end)

	it("should yield the same object when indexed again", function()
		local a = Event.MouseButton1Click
		local b = Event.MouseButton1Click
		local c = Event.Touched

		expect(a).to.equal(b)
		expect(a).never.to.equal(c)
	end)
end
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eaf</UniqueId>
						</Properties>
					</Item>
					<Item class="ModuleScript" referent="RBXB1C897E1FE064BD6AED05F8761A9DAB8">
						<Properties>
							<BinaryString name="AttributesSerialize"></BinaryString>
							<Content name="LinkedSource"><null></null></Content>
							<string name="Name">Ref</string>
							<string name="ScriptGuid">{5231C796-4C9A-47EA-87DB-0084E6365F58}</string>
							<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Parent.Symbol)

local Ref = Symbol.named("Ref")

return Ref
]]></ProtectedString>
							<int64 name="SourceAssetId">-1</int64>
							<BinaryString name="Tags"></BinaryString>
							<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb0</UniqueId>
						</Properties>
					</Item>
				</Item>
				<Item class="ModuleScript" referent="RBXA549B3B2464A42FB928359F03EF12AE8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PureComponent</string>
						<string name="ScriptGuid">{6CCE69B0-0D91-44C4-AB34-0BA2A67FD2C8}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A version of Component with a `shouldUpdate` method that forces the
	resulting component to be pure.
]]

local Component = require(script.Parent.Component)

local PureComponent = Component:extend("PureComponent")

-- When extend()ing a component, you don't get an extend method.
-- This is to promote composition over inheritance.
-- PureComponent is an exception to this rule.
PureComponent.extend = Component.extend

function PureComponent:shouldUpdate(newProps, newState)
	-- In a vast majority of cases, if state updated, something has updated.
	-- We don't bother checking in this case.
	if newState ~= self.state then
		return true
	end

	if newProps == self.props then
		return false
	end

	for key, value in pairs(newProps) do
		if self.props[key] ~= value then
			return true
		end
	end

	for key, value in pairs(self.props) do
		if newProps[key] ~= value then
			return true
		end
	end

	return false
end

return PureComponent
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0C76A0AA445341B89FDBD1B9631ABBFA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">PureComponent.spec</string>
						<string name="ScriptGuid">{851CBF03-EB53-408C-B26B-28A5A6DAB025}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local createReconciler = require(script.Parent.createReconciler)

	local PureComponent = require(script.Parent.PureComponent)

	local noopReconciler = createReconciler(NoopRenderer)

	it("should be extendable", function()
		local MyComponent = PureComponent:extend("MyComponent")

		expect(MyComponent).to.be.ok()
	end)

	it("should skip updates for shallow-equal props", function()
		local updateCount = 0
		local setValue

		local PureChild = PureComponent:extend("PureChild")

		function PureChild:willUpdate()
			updateCount = updateCount + 1
		end

		function PureChild:render()
			return nil
		end

		local PureContainer = PureComponent:extend("PureContainer")

		function PureContainer:init()
			self.state = {
				value = 0,
			}
		end

		function PureContainer:didMount()
			setValue = function(value)
				self:setState({
					value = value,
				})
			end
		end

		function PureContainer:render()
			return createElement(PureChild, {
				value = self.state.value,
			})
		end

		local element = createElement(PureContainer)
		local tree = noopReconciler.mountVirtualTree(element, nil, "PureComponent Tree")

		expect(updateCount).to.equal(0)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(1)

		expect(updateCount).to.equal(1)

		setValue(2)

		expect(updateCount).to.equal(2)

		setValue(1)

		expect(updateCount).to.equal(3)

		noopReconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXDB6DB8E8570D4B19949D56E579C0F4AB">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RobloxRenderer</string>
						<string name="ScriptGuid">{17D1CE17-26B3-467E-AC42-3417F0A4B11F}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Renderer that deals in terms of Roblox Instances. This is the most
	well-supported renderer after NoopRenderer and is currently the only
	renderer that does anything.
]]

local Binding = require(script.Parent.Binding)
local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local SingleEventManager = require(script.Parent.SingleEventManager)
local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)
local Ref = require(script.Parent.PropMarkers.Ref)
local Type = require(script.Parent.Type)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local applyPropsError = [[
Error applying props:
	%s
In element:
%s
]]

local updatePropsError = [[
Error updating props:
	%s
In element:
%s
]]

local function identity(...)
	return ...
end

local function applyRef(ref, newHostObject)
	if ref == nil then
		return
	end

	if typeof(ref) == "function" then
		ref(newHostObject)
	elseif Type.of(ref) == Type.Binding then
		Binding.update(ref, newHostObject)
	else
		-- TODO (#197): Better error message
		error(("Invalid ref: Expected type Binding but got %s"):format(typeof(ref)))
	end
end

local function setRobloxInstanceProperty(hostObject, key, newValue)
	if newValue == nil then
		local hostClass = hostObject.ClassName
		local _, defaultValue = getDefaultInstanceProperty(hostClass, key)
		newValue = defaultValue
	end

	-- Assign the new value to the object
	hostObject[key] = newValue

	return
end

local function removeBinding(virtualNode, key)
	local disconnect = virtualNode.bindings[key]
	disconnect()
	virtualNode.bindings[key] = nil
end

local function attachBinding(virtualNode, key, newBinding)
	local function updateBoundProperty(newValue)
		local success, errorMessage = xpcall(function()
			setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
		end, identity)

		if not success then
			local source = virtualNode.currentElement.source

			if source == nil then
				source = "<enable element tracebacks>"
			end

			local fullMessage = updatePropsError:format(errorMessage, source)
			error(fullMessage, 0)
		end
	end

	if virtualNode.bindings == nil then
		virtualNode.bindings = {}
	end

	virtualNode.bindings[key] = Binding.subscribe(newBinding, updateBoundProperty)

	updateBoundProperty(newBinding:getValue())
end

local function detachAllBindings(virtualNode)
	if virtualNode.bindings ~= nil then
		for _, disconnect in pairs(virtualNode.bindings) do
			disconnect()
		end
	end
end

local function applyProp(virtualNode, key, newValue, oldValue)
	if newValue == oldValue then
		return
	end

	if key == Ref or key == Children then
		-- Refs and children are handled in a separate pass
		return
	end

	local internalKeyType = Type.of(key)

	if internalKeyType == Type.HostEvent or internalKeyType == Type.HostChangeEvent then
		if virtualNode.eventManager == nil then
			virtualNode.eventManager = SingleEventManager.new(virtualNode.hostObject)
		end

		local eventName = key.name

		if internalKeyType == Type.HostChangeEvent then
			virtualNode.eventManager:connectPropertyChange(eventName, newValue)
		else
			virtualNode.eventManager:connectEvent(eventName, newValue)
		end

		return
	end

	local newIsBinding = Type.of(newValue) == Type.Binding
	local oldIsBinding = Type.of(oldValue) == Type.Binding

	if oldIsBinding then
		removeBinding(virtualNode, key)
	end

	if newIsBinding then
		attachBinding(virtualNode, key, newValue)
	else
		setRobloxInstanceProperty(virtualNode.hostObject, key, newValue)
	end
end

local function applyProps(virtualNode, props)
	for propKey, value in pairs(props) do
		applyProp(virtualNode, propKey, value, nil)
	end
end

local function updateProps(virtualNode, oldProps, newProps)
	-- Apply props that were added or updated
	for propKey, newValue in pairs(newProps) do
		local oldValue = oldProps[propKey]

		applyProp(virtualNode, propKey, newValue, oldValue)
	end

	-- Clean up props that were removed
	for propKey, oldValue in pairs(oldProps) do
		local newValue = newProps[propKey]

		if newValue == nil then
			applyProp(virtualNode, propKey, nil, oldValue)
		end
	end
end

local RobloxRenderer = {}

function RobloxRenderer.isHostObject(target)
	return typeof(target) == "Instance"
end

function RobloxRenderer.mountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement
	local hostParent = virtualNode.hostParent
	local hostKey = virtualNode.hostKey

	if config.internalTypeChecks then
		internalAssert(ElementKind.of(element) == ElementKind.Host, "Element at given node is not a host Element")
	end
	if config.typeChecks then
		assert(element.props.Name == nil, "Name can not be specified as a prop to a host component in Roact.")
		assert(element.props.Parent == nil, "Parent can not be specified as a prop to a host component in Roact.")
	end

	local instance = Instance.new(element.component)
	virtualNode.hostObject = instance

	local success, errorMessage = xpcall(function()
		applyProps(virtualNode, element.props)
	end, identity)

	if not success then
		local source = element.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = applyPropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	instance.Name = tostring(hostKey)

	local children = element.props[Children]

	if children ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	instance.Parent = hostParent
	virtualNode.hostObject = instance

	applyRef(element.props[Ref], instance)

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end
end

function RobloxRenderer.unmountHostNode(reconciler, virtualNode)
	local element = virtualNode.currentElement

	applyRef(element.props[Ref], nil)

	for _, childNode in pairs(virtualNode.children) do
		reconciler.unmountVirtualNode(childNode)
	end

	detachAllBindings(virtualNode)

	virtualNode.hostObject:Destroy()
end

function RobloxRenderer.updateHostNode(reconciler, virtualNode, newElement)
	local oldProps = virtualNode.currentElement.props
	local newProps = newElement.props

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:suspend()
	end

	-- If refs changed, detach the old ref and attach the new one
	if oldProps[Ref] ~= newProps[Ref] then
		applyRef(oldProps[Ref], nil)
		applyRef(newProps[Ref], virtualNode.hostObject)
	end

	local success, errorMessage = xpcall(function()
		updateProps(virtualNode, oldProps, newProps)
	end, identity)

	if not success then
		local source = newElement.source

		if source == nil then
			source = "<enable element tracebacks>"
		end

		local fullMessage = updatePropsError:format(errorMessage, source)
		error(fullMessage, 0)
	end

	local children = newElement.props[Children]
	if children ~= nil or oldProps[Children] ~= nil then
		reconciler.updateVirtualNodeWithChildren(virtualNode, virtualNode.hostObject, children)
	end

	if virtualNode.eventManager ~= nil then
		virtualNode.eventManager:resume()
	end

	return virtualNode
end

return RobloxRenderer
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX251053A60981491CAF2D8BDAF205A14A">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">RobloxRenderer.spec</string>
						<string name="ScriptGuid">{2C01C3A0-35CD-4ABD-A1A6-004AED1B17DF}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local Binding = require(script.Parent.Binding)
	local Children = require(script.Parent.PropMarkers.Children)
	local Component = require(script.Parent.Component)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createRef = require(script.Parent.createRef)
	local createSpy = require(script.Parent.createSpy)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Portal = require(script.Parent.Portal)
	local Ref = require(script.Parent.PropMarkers.Ref)
	local Event = require(script.Parent.PropMarkers.Event)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	describe("mountHostNode", function()
		it("should create instances with correct props", function()
			local parent = Instance.new("Folder")
			local value = "Hello!"
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(value)
			expect(root.Name).to.equal(key)
		end)

		it("should create children with correct names and props", function()
			local parent = Instance.new("Folder")
			local rootValue = "Hey there!"
			local childValue = 173
			local key = "Some Key"

			local element = createElement("StringValue", {
				Value = rootValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = childValue,
				}),

				ChildB = createElement("Folder"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]

			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(rootValue)
			expect(root.Name).to.equal(key)

			expect(#root:GetChildren()).to.equal(2)

			local childA = root.ChildA
			local childB = root.ChildB

			expect(childA).to.be.ok()
			expect(childB).to.be.ok()

			expect(childA.ClassName).to.equal("IntValue")
			expect(childA.Value).to.equal(childValue)

			expect(childB.ClassName).to.equal("Folder")
		end)

		it("should attach Bindings to Roblox properties", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(instance.ClassName).to.equal("IntValue")
			expect(instance.Value).to.equal(10)

			update(20)

			expect(instance.Value).to.equal(20)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should connect Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(ref.current).to.be.ok()
			expect(ref.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call function refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local element = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(element, parent, key)

				local success, message = pcall(RobloxRenderer.mountHostNode, reconciler, node)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)
	end)

	describe("updateHostNode", function()
		it("should update node props and children", function()
			-- TODO: Break up test

			local parent = Instance.new("Folder")
			local key = "updateHostNodeTest"
			local firstValue = "foo"
			local newValue = "bar"

			local defaultStringValue = Instance.new("StringValue").Value

			local element = createElement("StringValue", {
				Value = firstValue,
			}, {
				ChildA = createElement("IntValue", {
					Value = 1,
				}),
				ChildB = createElement("BoolValue", {
					Value = true,
				}),
				ChildC = createElement("StringValue", {
					Value = "test",
				}),
				ChildD = createElement("StringValue", {
					Value = "test",
				}),
			})

			local node = reconciler.createVirtualNode(element, parent, key)
			RobloxRenderer.mountHostNode(reconciler, node)

			-- Not testing mountHostNode's work here, only testing that the
			-- node is properly updated.

			local newElement = createElement("StringValue", {
				Value = newValue,
			}, {
				-- ChildA changes element type.
				ChildA = createElement("StringValue", {
					Value = "test",
				}),
				-- ChildB changes child properties.
				ChildB = createElement("BoolValue", {
					Value = false,
				}),
				-- ChildC should reset its Value property back to the default.
				ChildC = createElement("StringValue", {}),
				-- ChildD is deleted.
				-- ChildE is added.
				ChildE = createElement("Folder", {}),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			local root = parent[key]
			expect(root.ClassName).to.equal("StringValue")
			expect(root.Value).to.equal(newValue)
			expect(#root:GetChildren()).to.equal(4)

			local childA = root.ChildA
			expect(childA.ClassName).to.equal("StringValue")
			expect(childA.Value).to.equal("test")

			local childB = root.ChildB
			expect(childB.ClassName).to.equal("BoolValue")
			expect(childB.Value).to.equal(false)

			local childC = root.ChildC
			expect(childC.ClassName).to.equal("StringValue")
			expect(childC.Value).to.equal(defaultStringValue)

			local childE = root.ChildE
			expect(childE.ClassName).to.equal("Folder")
		end)

		it("should update Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local bindingA, updateA = Binding.create(10)
			local element = createElement("IntValue", {
				Value = bindingA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			local bindingB, updateB = Binding.create(99)
			local newElement = createElement("IntValue", {
				Value = bindingB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(instance.Value).to.equal(99)

			updateA(123)

			expect(instance.Value).to.equal(99)

			updateB(123)

			expect(instance.Value).to.equal(123)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should update Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local refA = createRef()
			local refB = createRef()

			local element = createElement("Frame", {
				[Ref] = refA,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(refA.current).to.equal(instance)
			expect(refB.current).never.to.be.ok()

			local newElement = createElement("Frame", {
				[Ref] = refB,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(refA.current).never.to.be.ok()
			expect(refB.current).to.equal(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should call old function refs with nil and new function refs with a valid rbx", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRefA = createSpy()
			local spyRefB = createSpy()

			local element = createElement("Frame", {
				[Ref] = spyRefA.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRefA.callCount).to.equal(1)
			spyRefA:assertCalledWith(instance)
			expect(spyRefB.callCount).to.equal(0)

			local newElement = createElement("Frame", {
				[Ref] = spyRefB.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			expect(spyRefA.callCount).to.equal(2)
			spyRefA:assertCalledWith(nil)
			expect(spyRefB.callCount).to.equal(1)
			spyRefB:assertCalledWith(instance)

			RobloxRenderer.unmountHostNode(reconciler, node)
		end)

		it("should not call function refs again if they didn't change", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]

			expect(spyRef.callCount).to.equal(1)
			spyRef:assertCalledWith(instance)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
				[Ref] = spyRef.value,
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)

			-- Not called again
			expect(spyRef.callCount).to.equal(1)
		end)

		it("should throw if setting invalid instance properties", function()
			local configValues = {
				elementTracing = true,
			}

			GlobalConfig.scoped(configValues, function()
				local parent = Instance.new("Folder")
				local key = "Some Key"

				local firstElement = createElement("Frame")
				local secondElement = createElement("Frame", {
					Frob = 6,
				})

				local node = reconciler.createVirtualNode(firstElement, parent, key)
				RobloxRenderer.mountHostNode(reconciler, node)

				local success, message = pcall(RobloxRenderer.updateHostNode, reconciler, node, secondElement)
				assert(not success, "Expected call to fail")

				expect(message:find("Frob")).to.be.ok()
				expect(message:find("Frame")).to.be.ok()
				expect(message:find("RobloxRenderer%.spec")).to.be.ok()
			end)
		end)

		it("should delete instances when reconciling to nil children", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local element = createElement("Frame", {
				Size = UDim2.new(1, 0, 1, 0),
			}, {
				child = createElement("Frame"),
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(#parent:GetChildren()).to.equal(1)

			local instance = parent:GetChildren()[1]
			expect(#instance:GetChildren()).to.equal(1)

			local newElement = createElement("Frame", {
				Size = UDim2.new(0.5, 0, 0.5, 0),
			})

			RobloxRenderer.updateHostNode(reconciler, node, newElement)
			expect(#instance:GetChildren()).to.equal(0)
		end)
	end)

	describe("unmountHostNode", function()
		it("should delete instances from the inside-out", function()
			local parent = Instance.new("Folder")
			local key = "Root"
			local element = createElement("Folder", nil, {
				Child = createElement("Folder", nil, {
					Grandchild = createElement("Folder"),
				}),
			})

			local node = reconciler.mountVirtualNode(element, parent, key)

			expect(#parent:GetChildren()).to.equal(1)

			local root = parent:GetChildren()[1]
			expect(#root:GetChildren()).to.equal(1)

			local child = root:GetChildren()[1]
			expect(#child:GetChildren()).to.equal(1)

			local grandchild = child:GetChildren()[1]

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(grandchild.Parent).to.equal(nil)
			expect(child.Parent).to.equal(nil)
			expect(root.Parent).to.equal(nil)
		end)

		it("should unsubscribe from any Bindings", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local binding, update = Binding.create(10)
			local element = createElement("IntValue", {
				Value = binding,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			local instance = parent:GetChildren()[1]

			expect(instance.Value).to.equal(10)

			RobloxRenderer.unmountHostNode(reconciler, node)
			update(56)

			expect(instance.Value).to.equal(10)
		end)

		it("should clear Binding refs", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local ref = createRef()
			local element = createElement("Frame", {
				[Ref] = ref,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(ref.current).to.be.ok()

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(ref.current).never.to.be.ok()
		end)

		it("should call function refs with nil", function()
			local parent = Instance.new("Folder")
			local key = "Some Key"

			local spyRef = createSpy()
			local element = createElement("Frame", {
				[Ref] = spyRef.value,
			})

			local node = reconciler.createVirtualNode(element, parent, key)

			RobloxRenderer.mountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(1)

			RobloxRenderer.unmountHostNode(reconciler, node)

			expect(spyRef.callCount).to.equal(2)
			spyRef:assertCalledWith(nil)
		end)
	end)

	describe("Portals", function()
		it("should create and destroy instances as children of `target`", function()
			local target = Instance.new("Folder")

			local function FunctionComponent(props)
				return createElement("IntValue", {
					Value = props.value,
				})
			end

			local element = createElement(Portal, {
				target = target,
			}, {
				folderOne = createElement("Folder"),
				folderTwo = createElement("Folder"),
				intValueOne = createElement(FunctionComponent, {
					value = 42,
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(3)

			expect(target:FindFirstChild("folderOne")).to.be.ok()
			expect(target:FindFirstChild("folderTwo")).to.be.ok()
			expect(target:FindFirstChild("intValueOne")).to.be.ok()
			expect(target:FindFirstChild("intValueOne").Value).to.equal(42)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should pass prop updates through to children", function()
			local target = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = target,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "A Host Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#target:GetChildren()).to.equal(1)

			local firstValue = target.ChildValue
			expect(firstValue.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#target:GetChildren()).to.equal(1)

			local secondValue = target.ChildValue
			expect(firstValue).to.equal(secondValue)
			expect(secondValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#target:GetChildren()).to.equal(0)
		end)

		it("should throw if `target` is nil", function()
			-- TODO: Relax this restriction?
			local element = createElement(Portal)
			local hostParent = nil
			local hostKey = "Keys for Everyone"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should throw if `target` is not a Roblox instance", function()
			local element = createElement(Portal, {
				target = {},
			})
			local hostParent = nil
			local hostKey = "Unleash the keys!"

			expect(function()
				reconciler.mountVirtualNode(element, hostParent, hostKey)
			end).to.throw()
		end)

		it("should recreate instances if `target` changes in an update", function()
			local firstTarget = Instance.new("Folder")
			local secondTarget = Instance.new("Folder")

			local firstElement = createElement(Portal, {
				target = firstTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 1,
				}),
			})

			local secondElement = createElement(Portal, {
				target = secondTarget,
			}, {
				ChildValue = createElement("IntValue", {
					Value = 2,
				}),
			})

			local hostParent = nil
			local hostKey = "Some Key"
			local node = reconciler.mountVirtualNode(firstElement, hostParent, hostKey)

			expect(#firstTarget:GetChildren()).to.equal(1)
			expect(#secondTarget:GetChildren()).to.equal(0)

			local firstChild = firstTarget.ChildValue
			expect(firstChild.Value).to.equal(1)

			node = reconciler.updateVirtualNode(node, secondElement)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(1)

			local secondChild = secondTarget.ChildValue
			expect(secondChild.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#firstTarget:GetChildren()).to.equal(0)
			expect(#secondTarget:GetChildren()).to.equal(0)
		end)
	end)

	describe("Fragments", function()
		it("should parent the fragment's elements into the fragment's parent", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createElement("IntValue", {
					Value = 1,
				}),
				key2 = createElement("IntValue", {
					Value = 2,
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "test")

			expect(hostParent:FindFirstChild("key")).to.be.ok()
			expect(hostParent.key.ClassName).to.equal("IntValue")
			expect(hostParent.key.Value).to.equal(1)

			expect(hostParent:FindFirstChild("key2")).to.be.ok()
			expect(hostParent.key2.ClassName).to.equal("IntValue")
			expect(hostParent.key2.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should allow sibling fragment to have common keys", function()
			local hostParent = Instance.new("Folder")
			local hostKey = "Test"

			local function parent(_props)
				return createElement("IntValue", {}, {
					fragmentA = createFragment({
						key = createElement("StringValue", {
							Value = "A",
						}),
						key2 = createElement("StringValue", {
							Value = "B",
						}),
					}),
					fragmentB = createFragment({
						key = createElement("StringValue", {
							Value = "C",
						}),
						key2 = createElement("StringValue", {
							Value = "D",
						}),
					}),
				})
			end

			local node = reconciler.mountVirtualNode(createElement(parent), hostParent, hostKey)
			local parentChildren = hostParent[hostKey]:GetChildren()

			expect(#parentChildren).to.equal(4)

			local childValues = {}

			for _, child in pairs(parentChildren) do
				expect(child.ClassName).to.equal("StringValue")
				childValues[child.Value] = 1 + (childValues[child.Value] or 0)
			end

			-- check if the StringValues have not collided
			expect(childValues.A).to.equal(1)
			expect(childValues.B).to.equal(1)
			expect(childValues.C).to.equal(1)
			expect(childValues.D).to.equal(1)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should render nested fragments", function()
			local hostParent = Instance.new("Folder")

			local fragment = createFragment({
				key = createFragment({
					TheValue = createElement("IntValue", {
						Value = 1,
					}),
					TheOtherValue = createElement("IntValue", {
						Value = 2,
					}),
				}),
			})

			local node = reconciler.mountVirtualNode(fragment, hostParent, "Test")

			expect(hostParent:FindFirstChild("TheValue")).to.be.ok()
			expect(hostParent.TheValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheValue.Value).to.equal(1)

			expect(hostParent:FindFirstChild("TheOtherValue")).to.be.ok()
			expect(hostParent.TheOtherValue.ClassName).to.equal("IntValue")
			expect(hostParent.TheOtherValue.Value).to.equal(2)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)

		it("should not add any instances if the fragment is empty", function()
			local hostParent = Instance.new("Folder")

			local node = reconciler.mountVirtualNode(createFragment({}), hostParent, "test")

			expect(#hostParent:GetChildren()).to.equal(0)

			reconciler.unmountVirtualNode(node)

			expect(#hostParent:GetChildren()).to.equal(0)
		end)
	end)

	describe("Context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					hello = self:__getContext("hello"),
				}
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self:__addContext("foo", "bar")
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = {
					foo = self:__getContext("foo"),
				}
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Legacy context", function()
		it("should pass context values through Roblox host nodes", function()
			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render() end

			local element = createElement("Folder", nil, {
				Consumer = createElement(Consumer),
			})
			local hostParent = nil
			local hostKey = "Context Test"
			local context = {
				hello = "world",
			}
			local node = reconciler.mountVirtualNode(element, hostParent, hostKey, nil, context)

			expect(capturedContext).never.to.equal(context)
			assertDeepEqual(capturedContext, context)

			reconciler.unmountVirtualNode(node)
		end)

		it("should pass context values through portal nodes", function()
			local target = Instance.new("Folder")

			local Provider = Component:extend("Provider")

			function Provider:init()
				self._context.foo = "bar"
			end

			function Provider:render()
				return createElement("Folder", nil, self.props[Children])
			end

			local Consumer = Component:extend("Consumer")

			local capturedContext
			function Consumer:init()
				capturedContext = self._context
			end

			function Consumer:render()
				return nil
			end

			local element = createElement(Provider, nil, {
				Portal = createElement(Portal, {
					target = target,
				}, {
					Consumer = createElement(Consumer),
				}),
			})
			local hostParent = nil
			local hostKey = "Some Key"
			reconciler.mountVirtualNode(element, hostParent, hostKey)

			assertDeepEqual(capturedContext, {
				foo = "bar",
			})
		end)
	end)

	describe("Integration Tests", function()
		local temporaryParent = nil
		beforeEach(function()
			temporaryParent = Instance.new("Folder")
			temporaryParent.Parent = ReplicatedStorage
		end)

		afterEach(function()
			temporaryParent:Destroy()
			temporaryParent = nil
		end)

		it("should not allow re-entrancy in updateChildren", function()
			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement("TextLabel")
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.childAdded = function()
					self:setState({
						count = self.state.count + 1,
					})
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {
					[Event.ChildAdded] = self.childAdded,
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should not allow re-entrancy in updateChildren even with callbacks", function()
			local LowestComponent = Component:extend("LowestComponent")

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement("Frame")
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)
		end)

		it("should never call unmount twice in the case of update children re-rentrancy", function()
			local unmountCounts = {}

			local function addUnmount(id)
				unmountCounts[id] = unmountCounts[id] + 1
			end

			local function addInit(id)
				unmountCounts[id] = 0
			end

			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:init()
				addInit(tostring(self))
			end

			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didMount()
				self.props.onDidMountCallback()
			end

			function LowestComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local FirstComponent = Component:extend("FirstComponent")
			function FirstComponent:init()
				addInit(tostring(self))
			end

			function FirstComponent:render()
				return createElement("TextLabel")
			end

			function FirstComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				addInit(tostring(self))

				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				if self.state.firstTime then
					return createElement(FirstComponent)
				end

				return createElement(LowestComponent, {
					onDidMountCallback = self.props.onDidMountCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			function ChildComponent:willUnmount()
				addUnmount(tostring(self))
			end

			local ParentComponent = Component:extend("ParentComponent")

			local didMountCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onDidMountCallback = function()
					didMountCallbackCalled = didMountCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			-- In an ideal world, the didMount callback would probably be called only once. Since it is called by two different
			-- LowestComponent instantiations 2 is also acceptable though.
			expect(didMountCallbackCalled <= 2).to.equal(true)

			reconciler.unmountVirtualNode(instance)

			for _, value in pairs(unmountCounts) do
				expect(value).to.equal(1)
			end
		end)

		it("should never unmount a node unnecesarily in the case of re-rentry", function()
			local LowestComponent = Component:extend("LowestComponent")
			function LowestComponent:render()
				return createElement("Frame")
			end

			function LowestComponent:didUpdate(prevProps, _prevState)
				if prevProps.firstTime and not self.props.firstTime then
					self.props.onChangedCallback()
				end
			end

			local ChildComponent = Component:extend("ChildComponent")

			function ChildComponent:init()
				self:setState({
					firstTime = true,
				})
			end

			local childCoroutine

			function ChildComponent:render()
				return createElement(LowestComponent, {
					firstTime = self.state.firstTime,
					onChangedCallback = self.props.onChangedCallback,
				})
			end

			function ChildComponent:didMount()
				childCoroutine = coroutine.create(function()
					self:setState({
						firstTime = false,
					})
				end)
			end

			local ParentComponent = Component:extend("ParentComponent")

			local onChangedCallbackCalled = 0

			function ParentComponent:init()
				self:setState({
					count = 1,
				})

				self.onChangedCallback = function()
					onChangedCallbackCalled = onChangedCallbackCalled + 1
					if self.state.count < 5 then
						self:setState({
							count = self.state.count + 1,
						})
					end
				end
			end

			function ParentComponent:render()
				return createElement("Frame", {}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onChangedCallback = self.onChangedCallback,
					}),
				})
			end

			local parent = Instance.new("ScreenGui")
			parent.Parent = temporaryParent

			local tree = createElement(ParentComponent)

			local hostKey = "Some Key"
			local instance = reconciler.mountVirtualNode(tree, parent, hostKey)

			coroutine.resume(childCoroutine)

			expect(#parent:GetChildren()).to.equal(1)

			local frame = parent:GetChildren()[1]

			expect(#frame:GetChildren()).to.equal(1)

			expect(onChangedCallbackCalled).to.equal(1)

			reconciler.unmountVirtualNode(instance)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXBD7E3FE515C54552997D9CA80A119DC0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleEventManager</string>
						<string name="ScriptGuid">{74B8F250-7BD4-4FED-8792-909BBFA8438C}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A manager for a single host virtual node's connected events.
]]

local Logging = require(script.Parent.Logging)

local CHANGE_PREFIX = "Change."

local EventStatus = {
	-- No events are processed at all; they're silently discarded
	Disabled = "Disabled",

	-- Events are stored in a queue; listeners are invoked when the manager is resumed
	Suspended = "Suspended",

	-- Event listeners are invoked as the events fire
	Enabled = "Enabled",
}

local SingleEventManager = {}
SingleEventManager.__index = SingleEventManager

function SingleEventManager.new(instance)
	local self = setmetatable({
		-- The queue of suspended events
		_suspendedEventQueue = {},

		-- All the event connections being managed
		-- Events are indexed by a string key
		_connections = {},

		-- All the listeners being managed
		-- These are stored distinctly from the connections
		-- Connections can have their listeners replaced at runtime
		_listeners = {},

		-- The suspension status of the manager
		-- Managers start disabled and are "resumed" after the initial render
		_status = EventStatus.Disabled,

		-- If true, the manager is processing queued events right now.
		_isResuming = false,

		-- The Roblox instance the manager is managing
		_instance = instance,
	}, SingleEventManager)

	return self
end

function SingleEventManager:connectEvent(key, listener)
	self:_connect(key, self._instance[key], listener)
end

function SingleEventManager:connectPropertyChange(key, listener)
	local success, event = pcall(function()
		return self._instance:GetPropertyChangedSignal(key)
	end)

	if not success then
		error(("Cannot get changed signal on property %q: %s"):format(tostring(key), event), 0)
	end

	self:_connect(CHANGE_PREFIX .. key, event, listener)
end

function SingleEventManager:_connect(eventKey, event, listener)
	-- If the listener doesn't exist we can just disconnect the existing connection
	if listener == nil then
		if self._connections[eventKey] ~= nil then
			self._connections[eventKey]:Disconnect()
			self._connections[eventKey] = nil
		end

		self._listeners[eventKey] = nil
	else
		if self._connections[eventKey] == nil then
			self._connections[eventKey] = event:Connect(function(...)
				if self._status == EventStatus.Enabled then
					self._listeners[eventKey](self._instance, ...)
				elseif self._status == EventStatus.Suspended then
					-- Store this event invocation to be fired when resume is
					-- called.

					local argumentCount = select("#", ...)
					table.insert(self._suspendedEventQueue, { eventKey, argumentCount, ... })
				end
			end)
		end

		self._listeners[eventKey] = listener
	end
end

function SingleEventManager:suspend()
	self._status = EventStatus.Suspended
end

function SingleEventManager:resume()
	-- If we're already resuming events for this instance, trying to resume
	-- again would cause a disaster.
	if self._isResuming then
		return
	end

	self._isResuming = true

	local index = 1

	-- More events might be added to the queue when evaluating events, so we
	-- need to be careful in order to preserve correct evaluation order.
	while index <= #self._suspendedEventQueue do
		local eventInvocation = self._suspendedEventQueue[index]
		local listener = self._listeners[eventInvocation[1]]
		local argumentCount = eventInvocation[2]

		-- The event might have been disconnected since suspension started; in
		-- this case, we drop the event.
		if listener ~= nil then
			-- Wrap the listener in a coroutine to catch errors and handle
			-- yielding correctly.
			local listenerCo = coroutine.create(listener)
			local success, result = coroutine.resume(
				listenerCo,
				self._instance,
				unpack(eventInvocation, 3, 2 + argumentCount)
			)

			-- If the listener threw an error, we log it as a warning, since
			-- there's no way to write error text in Roblox Lua without killing
			-- our thread!
			if not success then
				Logging.warn("%s", result)
			end
		end

		index = index + 1
	end

	self._isResuming = false
	self._status = EventStatus.Enabled
	self._suspendedEventQueue = {}
end

return SingleEventManager
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb5</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX48986E252CEC4824819ED32C1B2EE483">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleEventManager.spec</string>
						<string name="ScriptGuid">{90033F1A-61B9-44A1-84A6-5701CFA0BB2F}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)
	local createSpy = require(script.Parent.createSpy)
	local Logging = require(script.Parent.Logging)

	local SingleEventManager = require(script.Parent.SingleEventManager)

	describe("new", function()
		it("should create a SingleEventManager", function()
			local manager = SingleEventManager.new()

			expect(manager).to.be.ok()
		end)
	end)

	describe("connectEvent", function()
		it("should connect to events", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")

			manager:connectEvent("Event", nil)

			instance:Fire("baz")
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should drop events until resumed initially", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(0)

			manager:resume()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke suspended events when resumed", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:resume()

			instance:Fire("foo")
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance, "foo")

			manager:suspend()

			instance:Fire("bar")
			expect(eventSpy.callCount).to.equal(1)

			manager:resume()
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance, "bar")
		end)

		it("should invoke events triggered during resumption in the correct order", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			local recordedValues = {}
			local eventSpy = createSpy(function(_, value)
				table.insert(recordedValues, value)

				if value == 2 then
					instance:Fire(3)
				elseif value == 3 then
					instance:Fire(4)
				end
			end)

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)
			instance:Fire(2)

			manager:resume()
			expect(eventSpy.callCount).to.equal(4)
			assertDeepEqual(recordedValues, { 1, 2, 3, 4 })
		end)

		it("should not invoke events fired during suspension but disconnected before resumption", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectEvent("Event", eventSpy.value)
			manager:suspend()

			instance:Fire(1)

			manager:connectEvent("Event", nil)

			manager:resume()
			expect(eventSpy.callCount).to.equal(0)
		end)

		it("should not yield events through the SingleEventManager when resuming", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				coroutine.yield()
			end)

			manager:resume()

			local co = coroutine.create(function()
				instance:Fire(5)
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")

			manager:suspend()
			instance:Fire(5)

			co = coroutine.create(function()
				manager:resume()
			end)

			assert(coroutine.resume(co))
			expect(coroutine.status(co)).to.equal("dead")
		end)

		it("should not throw errors through SingleEventManager when resuming", function()
			local errorText = "Error from SingleEventManager test"

			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			manager:connectEvent("Event", function()
				error(errorText)
			end)

			manager:resume()

			-- If we call instance:Fire() here, the error message will leak to
			-- the console since the thread's resumption will be handled by
			-- Roblox's scheduler.

			manager:suspend()
			instance:Fire(5)

			local logInfo = Logging.capture(function()
				manager:resume()
			end)

			expect(#logInfo.errors).to.equal(0)
			expect(#logInfo.warnings).to.equal(1)
			expect(#logInfo.infos).to.equal(0)

			expect(logInfo.warnings[1]:find(errorText)).to.be.ok()
		end)

		it("should not overflow with events if manager:resume() is invoked when resuming a suspended event", function()
			local instance = Instance.new("BindableEvent")
			local manager = SingleEventManager.new(instance)

			-- This connection emulates what happens if reconciliation is
			-- triggered again in response to reconciliation. Without
			-- appropriate guards, the inner resume() call will process the
			-- Fire(1) event again, causing a nasty stack overflow.
			local eventSpy = createSpy(function(_, value)
				if value == 1 then
					manager:suspend()
					instance:Fire(2)
					manager:resume()
				end
			end)

			manager:connectEvent("Event", eventSpy.value)

			manager:suspend()
			instance:Fire(1)
			manager:resume()

			expect(eventSpy.callCount).to.equal(2)
		end)
	end)

	describe("connectPropertyChange", function()
		-- Since property changes utilize the same mechanisms as other events,
		-- the tests here are slimmed down to reduce redundancy.

		it("should connect to property changes", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)
			local eventSpy = createSpy()

			manager:connectPropertyChange("Name", eventSpy.value)
			manager:resume()

			instance.Name = "foo"
			expect(eventSpy.callCount).to.equal(1)
			eventSpy:assertCalledWith(instance)

			instance.Name = "bar"
			expect(eventSpy.callCount).to.equal(2)
			eventSpy:assertCalledWith(instance)

			manager:connectPropertyChange("Name")

			instance.Name = "baz"
			expect(eventSpy.callCount).to.equal(2)
		end)

		it("should throw an error if the property is invalid", function()
			local instance = Instance.new("Folder")
			local manager = SingleEventManager.new(instance)

			expect(function()
				manager:connectPropertyChange("foo", function() end)
			end).to.throw()
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX12E6326760714B7FACACB8A31BEF1537">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol</string>
						<string name="ScriptGuid">{0A9D690D-3FD1-4454-9793-D47517CA24CF}</string>
						<ProtectedString name="Source"><![CDATA[--!nonstrict
--[[
	A 'Symbol' is an opaque marker type.

	Symbols have the type 'userdata', but when printed to the console, the name
	of the symbol is shown.
]]

local Symbol = {}

--[[
	Creates a Symbol with the given name.

	When printed or coerced to a string, the symbol will turn into the string
	given as its name.
]]
function Symbol.named(name)
	assert(type(name) == "string", "Symbols must be created using a string name!")

	local self = newproxy(true)

	local wrappedName = ("Symbol(%s)"):format(name)

	getmetatable(self).__tostring = function()
		return wrappedName
	end

	return self
end

return Symbol
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF200EB110A934E60A13A72E56B4BE1E8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Symbol.spec</string>
						<string name="ScriptGuid">{B0D6EEA8-76F9-41DB-AE5C-936C1F0659C0}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Symbol = require(script.Parent.Symbol)

	describe("named", function()
		it("should give an opaque object", function()
			local symbol = Symbol.named("foo")

			expect(symbol).to.be.a("userdata")
		end)

		it("should coerce to the given name", function()
			local symbol = Symbol.named("foo")

			expect(tostring(symbol):find("foo")).to.be.ok()
		end)

		it("should be unique when constructed", function()
			local symbolA = Symbol.named("abc")
			local symbolB = Symbol.named("abc")

			expect(symbolA).never.to.equal(symbolB)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE6A2BF0A72E44053A21BE3AF31AE06EF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Type</string>
						<string name="ScriptGuid">{A7C7F934-0E9C-4687-9F42-67630C17B65E}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains markers for annotating objects with types.

	To set the type of an object, use `Type` as a key and the actual marker as
	the value:

		local foo = {
			[Type] = Type.Foo,
		}
]]

local Symbol = require(script.Parent.Symbol)
local strict = require(script.Parent.strict)

local Type = newproxy(true)

local TypeInternal = {}

local function addType(name)
	TypeInternal[name] = Symbol.named("Roact" .. name)
end

addType("Binding")
addType("Element")
addType("HostChangeEvent")
addType("HostEvent")
addType("StatefulComponentClass")
addType("StatefulComponentInstance")
addType("VirtualNode")
addType("VirtualTree")

function TypeInternal.of(value)
	if typeof(value) ~= "table" then
		return nil
	end

	return value[Type]
end

getmetatable(Type).__index = TypeInternal

getmetatable(Type).__tostring = function()
	return "RoactType"
end

strict(TypeInternal, "Type")

return Type
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eb9</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX16613E4FA9CC405E9F87F6E0A5E92EF4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Type.spec</string>
						<string name="ScriptGuid">{7989FBB1-95D7-4CC8-976B-7B2688043BFB}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Type = require(script.Parent.Type)

	describe("of", function()
		it("should return nil if the value is not a table", function()
			expect(Type.of(1)).to.equal(nil)
			expect(Type.of(true)).to.equal(nil)
			expect(Type.of("test")).to.equal(nil)
			expect(Type.of(print)).to.equal(nil)
		end)

		it("should return nil if the table has no type", function()
			expect(Type.of({})).to.equal(nil)
		end)

		it("should return the assigned type", function()
			local test = {
				[Type] = Type.Element,
			}

			expect(Type.of(test)).to.equal(Type.Element)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eba</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX90055B4854FC4802A2B792C5AF8C7E11">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assertDeepEqual</string>
						<string name="ScriptGuid">{1E66D772-59E6-4CF7-BD82-20E16EED8F82}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A utility used to assert that two objects are value-equal recursively. It
	outputs fairly nicely formatted messages to help diagnose why two objects
	would be different.

	This should only be used in tests.
]]

local function deepEqual(a, b)
	if typeof(a) ~= typeof(b) then
		local message = ("{1} is of type %s, but {2} is of type %s"):format(typeof(a), typeof(b))
		return false, message
	end

	if typeof(a) == "table" then
		local visitedKeys = {}

		for key, value in pairs(a) do
			visitedKeys[key] = true

			local success, innerMessage = deepEqual(value, b[key])
			if not success then
				local message = innerMessage
					:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
					:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

				return false, message
			end
		end

		for key, value in pairs(b) do
			if not visitedKeys[key] then
				local success, innerMessage = deepEqual(value, a[key])

				if not success then
					local message = innerMessage
						:gsub("{1}", ("{1}[%s]"):format(tostring(key)))
						:gsub("{2}", ("{2}[%s]"):format(tostring(key)))

					return false, message
				end
			end
		end

		return true
	end

	if a == b then
		return true
	end

	local message = "{1} ~= {2}"
	return false, message
end

local function assertDeepEqual(a, b)
	local success, innerMessageTemplate = deepEqual(a, b)

	if not success then
		local innerMessage = innerMessageTemplate:gsub("{1}", "first"):gsub("{2}", "second")

		local message = ("Values were not deep-equal.\n%s"):format(innerMessage)

		error(message, 2)
	end
end

return assertDeepEqual
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ebb</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX18A5AB45CBCF42168D0F4F3E5E8DC1DF">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assertDeepEqual.spec</string>
						<string name="ScriptGuid">{32B5426A-98B5-4B48-B8F5-CBBE1549F6B4}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assertDeepEqual = require(script.Parent.assertDeepEqual)

	it("should fail with a message when args are not equal", function()
		local success, message = pcall(assertDeepEqual, 1, 2)

		expect(success).to.equal(false)
		expect(message:find("first ~= second")).to.be.ok()

		success, message = pcall(assertDeepEqual, {
			foo = 1,
		}, {
			foo = 2,
		})

		expect(success).to.equal(false)
		expect(message:find("first%[foo%] ~= second%[foo%]")).to.be.ok()
	end)

	it("should compare non-table values using standard '==' equality", function()
		assertDeepEqual(1, 1)
		assertDeepEqual("hello", "hello")
		assertDeepEqual(nil, nil)

		local someFunction = function() end
		local theSameFunction = someFunction

		assertDeepEqual(someFunction, theSameFunction)

		local A = {
			foo = someFunction,
		}
		local B = {
			foo = theSameFunction,
		}

		assertDeepEqual(A, B)
	end)

	it("should fail when types differ", function()
		local success, message = pcall(assertDeepEqual, 1, "1")

		expect(success).to.equal(false)
		expect(message:find("first is of type number, but second is of type string")).to.be.ok()
	end)

	it("should compare (and report about) nested tables", function()
		local A = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}
		local B = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 2,
			},
		}

		assertDeepEqual(A, B)

		local C = {
			foo = "bar",
			nested = {
				foo = 1,
				bar = 3,
			},
		}

		local success, message = pcall(assertDeepEqual, A, C)

		expect(success).to.equal(false)
		expect(message:find("first%[nested%]%[bar%] ~= second%[nested%]%[bar%]")).to.be.ok()
	end)

	it("should be commutative", function()
		local equalArgsA = {
			foo = "bar",
			hello = "world",
		}
		local equalArgsB = {
			foo = "bar",
			hello = "world",
		}

		assertDeepEqual(equalArgsA, equalArgsB)
		assertDeepEqual(equalArgsB, equalArgsA)

		local nonEqualArgs = {
			foo = "bar",
		}

		expect(function()
			assertDeepEqual(equalArgsA, nonEqualArgs)
		end).to.throw()
		expect(function()
			assertDeepEqual(nonEqualArgs, equalArgsA)
		end).to.throw()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ebc</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX82246AFCE5F8428CAD812F3518394FF0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assign</string>
						<string name="ScriptGuid">{4DA9789B-3461-4437-81B6-E93AF371D13A}</string>
						<ProtectedString name="Source"><![CDATA[local None = require(script.Parent.None)

--[[
	Merges values from zero or more tables onto a target table. If a value is
	set to None, it will instead be removed from the table.

	This function is identical in functionality to JavaScript's Object.assign.
]]
local function assign(target, ...)
	for index = 1, select("#", ...) do
		local source = select(index, ...)

		if source ~= nil then
			for key, value in pairs(source) do
				if value == None then
					target[key] = nil
				else
					target[key] = value
				end
			end
		end
	end

	return target
end

return assign
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ebd</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX2221CBF6F9684AAE8E17293403530AEC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">assign.spec</string>
						<string name="ScriptGuid">{D47DCADD-8C3E-44B3-A3A6-F89E10E1184D}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local None = require(script.Parent.None)

	local assign = require(script.Parent.assign)

	it("should accept zero additional tables", function()
		local input = {}
		local result = assign(input)

		expect(input).to.equal(result)
	end)

	it("should merge multiple tables onto the given target table", function()
		local target = {
			a = 5,
			b = 6,
		}

		local source1 = {
			b = 7,
			c = 8,
		}

		local source2 = {
			b = 8,
		}

		assign(target, source1, source2)

		expect(target.a).to.equal(5)
		expect(target.b).to.equal(source2.b)
		expect(target.c).to.equal(source1.c)
	end)

	it("should remove keys if specified as None", function()
		local target = {
			foo = 2,
			bar = 3,
		}

		local source = {
			foo = None,
		}

		assign(target, source)

		expect(target.foo).to.equal(nil)
		expect(target.bar).to.equal(3)
	end)

	it("should re-add keys if specified after None", function()
		local target = {
			foo = 2,
		}

		local source1 = {
			foo = None,
		}

		local source2 = {
			foo = 3,
		}

		assign(target, source1, source2)

		expect(target.foo).to.equal(source2.foo)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ebe</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXAD6EF2B952EE4D61B1430925AF3B91A6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createContext</string>
						<string name="ScriptGuid">{090F1CB9-169A-42DB-AE98-BDFDC0EC3E02}</string>
						<ProtectedString name="Source"><![CDATA[local Symbol = require(script.Parent.Symbol)
local createFragment = require(script.Parent.createFragment)
local createSignal = require(script.Parent.createSignal)
local Children = require(script.Parent.PropMarkers.Children)
local Component = require(script.Parent.Component)

--[[
	Construct the value that is assigned to Roact's context storage.
]]
local function createContextEntry(currentValue)
	return {
		value = currentValue,
		onUpdate = createSignal(),
	}
end

local function createProvider(context)
	local Provider = Component:extend("Provider")

	function Provider:init(props)
		self.contextEntry = createContextEntry(props.value)
		self:__addContext(context.key, self.contextEntry)
	end

	function Provider:willUpdate(nextProps)
		-- If the provided value changed, immediately update the context entry.
		--
		-- During this update, any components that are reachable will receive
		-- this updated value at the same time as any props and state updates
		-- that are being applied.
		if nextProps.value ~= self.props.value then
			self.contextEntry.value = nextProps.value
		end
	end

	function Provider:didUpdate(prevProps)
		-- If the provided value changed, after we've updated every reachable
		-- component, fire a signal to update the rest.
		--
		-- This signal will notify all context consumers. It's expected that
		-- they will compare the last context value they updated with and only
		-- trigger an update on themselves if this value is different.
		--
		-- This codepath will generally only update consumer components that has
		-- a component implementing shouldUpdate between them and the provider.
		if prevProps.value ~= self.props.value then
			self.contextEntry.onUpdate:fire(self.props.value)
		end
	end

	function Provider:render()
		return createFragment(self.props[Children])
	end

	return Provider
end

local function createConsumer(context)
	local Consumer = Component:extend("Consumer")

	function Consumer.validateProps(props)
		if type(props.render) ~= "function" then
			return false, "Consumer expects a `render` function"
		else
			return true
		end
	end

	function Consumer:init(_props)
		-- This value may be nil, which indicates that our consumer is not a
		-- descendant of a provider for this context item.
		self.contextEntry = self:__getContext(context.key)
	end

	function Consumer:render()
		-- Render using the latest available for this context item.
		--
		-- We don't store this value in state in order to have more fine-grained
		-- control over our update behavior.
		local value
		if self.contextEntry ~= nil then
			value = self.contextEntry.value
		else
			value = context.defaultValue
		end

		return self.props.render(value)
	end

	function Consumer:didUpdate()
		-- Store the value that we most recently updated with.
		--
		-- This value is compared in the contextEntry onUpdate hook below.
		if self.contextEntry ~= nil then
			self.lastValue = self.contextEntry.value
		end
	end

	function Consumer:didMount()
		if self.contextEntry ~= nil then
			-- When onUpdate is fired, a new value has been made available in
			-- this context entry, but we may have already updated in the same
			-- update cycle.
			--
			-- To avoid sending a redundant update, we compare the new value
			-- with the last value that we updated with (set in didUpdate) and
			-- only update if they differ. This may happen when an update from a
			-- provider was blocked by an intermediate component that returned
			-- false from shouldUpdate.
			self.disconnect = self.contextEntry.onUpdate:subscribe(function(newValue)
				if newValue ~= self.lastValue then
					-- Trigger a dummy state update.
					self:setState({})
				end
			end)
		end
	end

	function Consumer:willUnmount()
		if self.disconnect ~= nil then
			self.disconnect()
			self.disconnect = nil
		end
	end

	return Consumer
end

local Context = {}
Context.__index = Context

function Context.new(defaultValue)
	return setmetatable({
		defaultValue = defaultValue,
		key = Symbol.named("ContextKey"),
	}, Context)
end

function Context:__tostring()
	return "RoactContext"
end

local function createContext(defaultValue)
	local context = Context.new(defaultValue)

	return {
		Provider = createProvider(context),
		Consumer = createConsumer(context),
	}
end

return createContext
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ebf</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXC47B24785DC149ECB820B387DFE34B12">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createContext.spec</string>
						<string name="ScriptGuid">{BABCE933-8EC1-45B2-B8ED-FFA6F5E31CA0}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ReplicatedStorage = game:GetService("ReplicatedStorage")

	local Component = require(script.Parent.Component)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Children = require(script.Parent.PropMarkers.Children)
	local createContext = require(script.Parent.createContext)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createReconciler = require(script.Parent.createReconciler)
	local createSpy = require(script.Parent.createSpy)

	local noopReconciler = createReconciler(NoopRenderer)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)
	local robloxReconciler = createReconciler(RobloxRenderer)

	it("should return a table", function()
		local context = createContext("Test")
		expect(context).to.be.ok()
		expect(type(context)).to.equal("table")
	end)

	it("should contain a Provider and a Consumer", function()
		local context = createContext("Test")
		expect(context.Provider).to.be.ok()
		expect(context.Consumer).to.be.ok()
	end)

	describe("Provider", function()
		it("should render its children", function()
			local context = createContext("Test")

			local Listener = createSpy(function()
				return nil
			end)

			local element = createElement(context.Provider, {
				value = "Test",
			}, {
				Listener = createElement(Listener.value),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			expect(Listener.callCount).to.equal(1)
		end)
	end)

	describe("Consumer", function()
		it("should expect a render function", function()
			local context = createContext("Test")
			local element = createElement(context.Consumer)

			expect(function()
				noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			end).to.throw()
		end)

		it("should return the default value if there is no Provider", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local element = createElement(context.Consumer, {
				render = valueSpy.value,
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("Test")
		end)

		it("should pass the value to the render function", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")
			noopReconciler.unmountVirtualTree(tree)

			valueSpy:assertCalledWith("NewTest")
		end)

		it("should update when the value updates", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Listener = createElement(Listener),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Listener = createElement(Listener),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		--[[
			This test is the same as the one above, but with a component that
			always blocks updates in the middle. We expect behavior to be the
			same.
		]]
		it("should update when the value updates through an update blocking component", function()
			local valueSpy = createSpy()
			local context = createContext("Test")

			local UpdateBlocker = Component:extend("UpdateBlocker")

			function UpdateBlocker:render()
				return createFragment(self.props[Children])
			end

			function UpdateBlocker:shouldUpdate()
				return false
			end

			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local element = createElement(context.Provider, {
				value = "NewTest",
			}, {
				Blocker = createElement(UpdateBlocker, nil, {
					Listener = createElement(Listener),
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element, nil, "Provide Tree")

			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith("NewTest")

			noopReconciler.updateVirtualTree(
				tree,
				createElement(context.Provider, {
					value = "ThirdTest",
				}, {
					Blocker = createElement(UpdateBlocker, nil, {
						Listener = createElement(Listener),
					}),
				})
			)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith("ThirdTest")

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should behave correctly when the default value is nil", function()
			local context = createContext(nil)

			local valueSpy = createSpy()
			local function Listener()
				return createElement(context.Consumer, {
					render = valueSpy.value,
				})
			end

			local tree = noopReconciler.mountVirtualTree(createElement(Listener), nil, "Provide Tree")
			expect(valueSpy.callCount).to.equal(1)
			valueSpy:assertCalledWith(nil)

			tree = noopReconciler.updateVirtualTree(tree, createElement(Listener))
			noopReconciler.unmountVirtualTree(tree)

			expect(valueSpy.callCount).to.equal(2)
			valueSpy:assertCalledWith(nil)
		end)
	end)

	describe("Update order", function()
		--[[
			This test ensures that there is no scenario where we can observe
			'update tearing' when props and context are updated at the same
			time.

			Update tearing is scenario where a single update is partially
			applied in multiple steps instead of atomically. This is observable
			by components and can lead to strange bugs or errors.

			This instance of update tearing happens when updating a prop and a
			context value in the same update. Image we represent our tree's
			state as the current prop and context versions. Our initial state
			is:

			(prop_1, context_1)

			The next state we would like to update to is:

			(prop_2, context_2)

			Under the bug reported in issue 259, Roact reaches three different
			states in sequence:

			1: (prop_1, context_1) - the initial state
			2: (prop_2, context_1) - woops!
			3: (prop_2, context_2) - correct end state

			In state 2, a user component was added that tried to access the
			current context value, which was not set at the time. This raised an
			error, because this state is not valid!

			The first proposed solution was to move the context update to happen
			before the props update. It is easy to show that this will still
			result in update tearing:

			1: (prop_1, context_1)
			2: (prop_1, context_2)
			3: (prop_2, context_2)

			Although the initial concern about newly added components observing
			old context values is fixed, there is still a state
			desynchronization between props and state.

			We would instead like the following update sequence:

			1: (prop_1, context_1)
			2: (prop_2, context_2)

			This test tries to ensure that is the case.

			The initial bug report is here:
			https://github.com/Roblox/roact/issues/259
		]]
		it("should update context at the same time as props", function()
			-- These values are used to make sure we reach both the first and
			-- second state combinations we want to visit.
			local observedA = false
			local observedB = false
			local updateCount = 0

			local context = createContext("default")

			local function Listener(props)
				return createElement(context.Consumer, {
					render = function(value)
						updateCount = updateCount + 1

						if value == "context_1" then
							expect(props.someProp).to.equal("prop_1")
							observedA = true
						elseif value == "context_2" then
							expect(props.someProp).to.equal("prop_2")
							observedB = true
						else
							error("Unexpected context value")
						end
					end,
				})
			end

			local element1 = createElement(context.Provider, {
				value = "context_1",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_1",
				}),
			})

			local element2 = createElement(context.Provider, {
				value = "context_2",
			}, {
				Child = createElement(Listener, {
					someProp = "prop_2",
				}),
			})

			local tree = noopReconciler.mountVirtualTree(element1, nil, "UpdateObservationIsFun")
			noopReconciler.updateVirtualTree(tree, element2)

			expect(updateCount).to.equal(2)
			expect(observedA).to.equal(true)
			expect(observedB).to.equal(true)
		end)
	end)

	-- issue https://github.com/Roblox/roact/issues/319
	it("does not throw if willUnmount is called twice on a context consumer", function()
		local context = createContext({})

		local LowestComponent = Component:extend("LowestComponent")
		function LowestComponent:init() end

		function LowestComponent:render()
			return createElement("Frame")
		end

		function LowestComponent:didMount()
			self.props.onDidMountCallback()
		end

		local FirstComponent = Component:extend("FirstComponent")
		function FirstComponent:init() end

		function FirstComponent:render()
			return createElement(context.Consumer, {
				render = function()
					return createElement("TextLabel")
				end,
			})
		end

		local ChildComponent = Component:extend("ChildComponent")

		function ChildComponent:init()
			self:setState({ firstTime = true })
		end

		local childCallback

		function ChildComponent:render()
			if self.state.firstTime then
				return createElement(FirstComponent)
			end

			return createElement(LowestComponent, {
				onDidMountCallback = self.props.onDidMountCallback,
			})
		end

		function ChildComponent:didMount()
			childCallback = function()
				self:setState({ firstTime = false })
			end
		end

		local ParentComponent = Component:extend("ParentComponent")

		local didMountCallbackCalled = 0

		function ParentComponent:init()
			self:setState({ count = 1 })

			self.onDidMountCallback = function()
				didMountCallbackCalled = didMountCallbackCalled + 1
				if self.state.count < 5 then
					self:setState({ count = self.state.count + 1 })
				end
			end
		end

		function ParentComponent:render()
			return createElement("Frame", {}, {
				Provider = createElement(context.Provider, {
					value = {},
				}, {
					ChildComponent = createElement(ChildComponent, {
						count = self.state.count,
						onDidMountCallback = self.onDidMountCallback,
					}),
				}),
			})
		end

		local parent = Instance.new("ScreenGui")
		parent.Parent = ReplicatedStorage

		local hostKey = "Some Key"
		robloxReconciler.mountVirtualNode(createElement(ParentComponent), parent, hostKey)

		expect(function()
			-- calling setState on ChildComponent will trigger `willUnmount` multiple times
			childCallback()
		end).never.to.throw()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0236649B0D0F4214A3A4CE62A695F2D6">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createElement</string>
						<string name="ScriptGuid">{FB19E199-6FA2-4DFA-8825-F56DE392960B}</string>
						<ProtectedString name="Source"><![CDATA[local Children = require(script.Parent.PropMarkers.Children)
local ElementKind = require(script.Parent.ElementKind)
local Logging = require(script.Parent.Logging)
local Type = require(script.Parent.Type)

local config = require(script.Parent.GlobalConfig).get()

local multipleChildrenMessage = [[
The prop `Roact.Children` was defined but was overriden by the third parameter to createElement!
This can happen when a component passes props through to a child element but also uses the `children` argument:

	Roact.createElement("Frame", passedProps, {
		child = ...
	})

Instead, consider using a utility function to merge tables of children together:

	local children = mergeTables(passedProps[Roact.Children], {
		child = ...
	})

	local fullProps = mergeTables(passedProps, {
		[Roact.Children] = children
	})

	Roact.createElement("Frame", fullProps)]]

--[[
	Creates a new element representing the given component.

	Elements are lightweight representations of what a component instance should
	look like.

	Children is a shorthand for specifying `Roact.Children` as a key inside
	props. If specified, the passed `props` table is mutated!
]]
local function createElement(component, props, children)
	if config.typeChecks then
		assert(component ~= nil, "`component` is required")
		assert(typeof(props) == "table" or props == nil, "`props` must be a table or nil")
		assert(typeof(children) == "table" or children == nil, "`children` must be a table or nil")
	end

	if props == nil then
		props = {}
	end

	if children ~= nil then
		if props[Children] ~= nil then
			Logging.warnOnce(multipleChildrenMessage)
		end

		props[Children] = children
	end

	local elementKind = ElementKind.fromComponent(component)

	local element = {
		[Type] = Type.Element,
		[ElementKind] = elementKind,
		component = component,
		props = props,
	}

	if config.elementTracing then
		-- We trim out the leading newline since there's no way to specify the
		-- trace level without also specifying a message.
		element.source = debug.traceback("", 2):sub(2)
	end

	return element
end

return createElement
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXAEEE196EF0824E798912513F468446D9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createElement.spec</string>
						<string name="ScriptGuid">{03F3AD39-6BAF-4F7C-B752-1F248650AE15}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Component = require(script.Parent.Component)
	local ElementKind = require(script.Parent.ElementKind)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Logging = require(script.Parent.Logging)
	local Type = require(script.Parent.Type)
	local Portal = require(script.Parent.Portal)
	local Children = require(script.Parent.PropMarkers.Children)

	local createElement = require(script.Parent.createElement)

	it("should create new primitive elements", function()
		local element = createElement("Frame")

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Host)
	end)

	it("should create new functional elements", function()
		local element = createElement(function() end)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Function)
	end)

	it("should create new stateful components", function()
		local Foo = Component:extend("Foo")

		local element = createElement(Foo)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Stateful)
	end)

	it("should create new portal elements", function()
		local element = createElement(Portal)

		expect(element).to.be.ok()
		expect(Type.of(element)).to.equal(Type.Element)
		expect(ElementKind.of(element)).to.equal(ElementKind.Portal)
	end)

	it("should accept props", function()
		local element = createElement("StringValue", {
			Value = "Foo",
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
	end)

	it("should accept props and children", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", {
			Value = "Foo",
		}, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props.Value).to.equal("Foo")
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should accept children with without props", function()
		local child = createElement("IntValue")

		local element = createElement("StringValue", nil, {
			Child = child,
		})

		expect(element).to.be.ok()
		expect(element.props[Children]).to.be.ok()
		expect(element.props[Children].Child).to.equal(child)
	end)

	it("should warn once if children is specified in two different ways", function()
		local logInfo = Logging.capture(function()
			-- Using a loop here to ensure that multiple occurences of the same
			-- warning only cause output once.
			for _ = 1, 2 do
				createElement("Frame", {
					[Children] = {},
				}, {})
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("createElement")).to.be.ok()
		expect(logInfo.warnings[1]:find("Children")).to.be.ok()
	end)

	it("should have a `source` member if elementTracing is set", function()
		local config = {
			elementTracing = true,
		}

		GlobalConfig.scoped(config, function()
			local element = createElement("StringValue")

			expect(element.source).to.be.a("string")
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX68BC6C5FF3D24851B5636DC905FF2ABC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createFragment</string>
						<string name="ScriptGuid">{22435637-FAEB-47F7-AF1E-C7B9B9A9C99B}</string>
						<ProtectedString name="Source"><![CDATA[local ElementKind = require(script.Parent.ElementKind)
local Type = require(script.Parent.Type)

local function createFragment(elements)
	return {
		[Type] = Type.Element,
		[ElementKind] = ElementKind.Fragment,
		elements = elements,
	}
end

return createFragment
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFEC5E98D1F274A2CA860AA2B83F220C9">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createFragment.spec</string>
						<string name="ScriptGuid">{F050B437-116C-4292-B0EA-469865EBC48D}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local ElementKind = require(script.Parent.ElementKind)
	local Type = require(script.Parent.Type)

	local createFragment = require(script.Parent.createFragment)

	it("should create new primitive elements", function()
		local fragment = createFragment({})

		expect(fragment).to.be.ok()
		expect(Type.of(fragment)).to.equal(Type.Element)
		expect(ElementKind.of(fragment)).to.equal(ElementKind.Fragment)
	end)

	it("should accept children", function()
		local subFragment = createFragment({})
		local fragment = createFragment({ key = subFragment })

		expect(fragment.elements.key).to.equal(subFragment)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX06490A2E81034FC38FB1FB1A688257C7">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconciler</string>
						<string name="ScriptGuid">{F0206978-BAC1-4362-9CC4-C5EB6AB6C819}</string>
						<ProtectedString name="Source"><![CDATA[--!nonstrict
local Type = require(script.Parent.Type)
local ElementKind = require(script.Parent.ElementKind)
local ElementUtils = require(script.Parent.ElementUtils)
local Children = require(script.Parent.PropMarkers.Children)
local Symbol = require(script.Parent.Symbol)
local internalAssert = require(script.Parent.internalAssert)

local config = require(script.Parent.GlobalConfig).get()

local InternalData = Symbol.named("InternalData")

--[[
	The reconciler is the mechanism in Roact that constructs the virtual tree
	that later gets turned into concrete objects by the renderer.

	Roact's reconciler is constructed with the renderer as an argument, which
	enables switching to different renderers for different platforms or
	scenarios.

	When testing the reconciler itself, it's common to use `NoopRenderer` with
	spies replacing some methods. The default (and only) reconciler interface
	exposed by Roact right now uses `RobloxRenderer`.
]]
local function createReconciler(renderer)
	local reconciler
	local mountVirtualNode
	local updateVirtualNode
	local unmountVirtualNode

	--[[
		Unmount the given virtualNode, replacing it with a new node described by
		the given element.

		Preserves host properties, depth, and legacyContext from parent.
	]]
	local function replaceVirtualNode(virtualNode, newElement)
		local hostParent = virtualNode.hostParent
		local hostKey = virtualNode.hostKey
		local depth = virtualNode.depth
		local parent = virtualNode.parent

		-- If the node that is being replaced has modified context, we need to
		-- use the original *unmodified* context for the new node
		-- The `originalContext` field will be nil if the context was unchanged
		local context = virtualNode.originalContext or virtualNode.context
		local parentLegacyContext = virtualNode.parentLegacyContext

		-- If updating this node has caused a component higher up the tree to re-render
		-- and updateChildren to be re-entered then this node could already have been
		-- unmounted in the previous updateChildren pass.
		if not virtualNode.wasUnmounted then
			unmountVirtualNode(virtualNode)
		end
		local newNode = mountVirtualNode(newElement, hostParent, hostKey, context, parentLegacyContext)

		-- mountVirtualNode can return nil if the element is a boolean
		if newNode ~= nil then
			newNode.depth = depth
			newNode.parent = parent
		end

		return newNode
	end

	--[[
		Utility to update the children of a virtual node based on zero or more
		updated children given as elements.
	]]
	local function updateChildren(virtualNode, hostParent, newChildElements)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.updateChildrenCount = virtualNode.updateChildrenCount + 1

		local currentUpdateChildrenCount = virtualNode.updateChildrenCount

		local removeKeys = {}

		-- Changed or removed children
		for childKey, childNode in pairs(virtualNode.children) do
			local newElement = ElementUtils.getElementByKey(newChildElements, childKey)
			local newNode = updateVirtualNode(childNode, newElement)

			-- If updating this node has caused a component higher up the tree to re-render
			-- and updateChildren to be re-entered for this virtualNode then
			-- this result is invalid and needs to be disgarded.
			if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
				if newNode and newNode ~= virtualNode.children[childKey] then
					unmountVirtualNode(newNode)
				end
				return
			end

			if newNode ~= nil then
				virtualNode.children[childKey] = newNode
			else
				removeKeys[childKey] = true
			end
		end

		for childKey in pairs(removeKeys) do
			virtualNode.children[childKey] = nil
		end

		-- Added children
		for childKey, newElement in ElementUtils.iterateElements(newChildElements) do
			local concreteKey = childKey
			if childKey == ElementUtils.UseParentKey then
				concreteKey = virtualNode.hostKey
			end

			if virtualNode.children[childKey] == nil then
				local childNode = mountVirtualNode(
					newElement,
					hostParent,
					concreteKey,
					virtualNode.context,
					virtualNode.legacyContext
				)

				-- If updating this node has caused a component higher up the tree to re-render
				-- and updateChildren to be re-entered for this virtualNode then
				-- this result is invalid and needs to be discarded.
				if virtualNode.updateChildrenCount ~= currentUpdateChildrenCount then
					if childNode then
						unmountVirtualNode(childNode)
					end
					return
				end

				-- mountVirtualNode can return nil if the element is a boolean
				if childNode ~= nil then
					childNode.depth = virtualNode.depth + 1
					childNode.parent = virtualNode
					virtualNode.children[childKey] = childNode
				end
			end
		end
	end

	local function updateVirtualNodeWithChildren(virtualNode, hostParent, newChildElements)
		updateChildren(virtualNode, hostParent, newChildElements)
	end

	local function updateVirtualNodeWithRenderResult(virtualNode, hostParent, renderResult)
		if Type.of(renderResult) == Type.Element or renderResult == nil or typeof(renderResult) == "boolean" then
			updateChildren(virtualNode, hostParent, renderResult)
		else
			error(
				("%s\n%s"):format(
					"Component returned invalid children:",
					virtualNode.currentElement.source or "<enable element tracebacks>"
				),
				0
			)
		end
	end

	--[[
		Unmounts the given virtual node and releases any held resources.
	]]
	function unmountVirtualNode(virtualNode)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end

		virtualNode.wasUnmounted = true

		local kind = ElementKind.of(virtualNode.currentElement)

		-- selene: allow(if_same_then_else)
		if kind == ElementKind.Host then
			renderer.unmountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Stateful then
			virtualNode.instance:__unmount()
		elseif kind == ElementKind.Portal then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		elseif kind == ElementKind.Fragment then
			for _, childNode in pairs(virtualNode.children) do
				unmountVirtualNode(childNode)
			end
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end
	end

	local function updateFunctionVirtualNode(virtualNode, newElement)
		local children = newElement.component(newElement.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)

		return virtualNode
	end

	local function updatePortalVirtualNode(virtualNode, newElement)
		local oldElement = virtualNode.currentElement
		local oldTargetHostParent = oldElement.props.target

		local targetHostParent = newElement.props.target

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		if targetHostParent ~= oldTargetHostParent then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local children = newElement.props[Children]

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)

		return virtualNode
	end

	local function updateFragmentVirtualNode(virtualNode, newElement)
		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, newElement.elements)

		return virtualNode
	end

	--[[
		Update the given virtual node using a new element describing what it
		should transform into.

		`updateVirtualNode` will return a new virtual node that should replace
		the passed in virtual node. This is because a virtual node can be
		updated with an element referencing a different component!

		In that case, `updateVirtualNode` will unmount the input virtual node,
		mount a new virtual node, and return it in this case, while also issuing
		a warning to the user.
	]]
	function updateVirtualNode(virtualNode, newElement, newState)
		if config.internalTypeChecks then
			internalAssert(Type.of(virtualNode) == Type.VirtualNode, "Expected arg #1 to be of type VirtualNode")
		end
		if config.typeChecks then
			assert(
				Type.of(newElement) == Type.Element or typeof(newElement) == "boolean" or newElement == nil,
				"Expected arg #2 to be of type Element, boolean, or nil"
			)
		end

		-- If nothing changed, we can skip this update
		if virtualNode.currentElement == newElement and newState == nil then
			return virtualNode
		end

		if typeof(newElement) == "boolean" or newElement == nil then
			unmountVirtualNode(virtualNode)
			return nil
		end

		if virtualNode.currentElement.component ~= newElement.component then
			return replaceVirtualNode(virtualNode, newElement)
		end

		local kind = ElementKind.of(newElement)

		local shouldContinueUpdate = true

		if kind == ElementKind.Host then
			virtualNode = renderer.updateHostNode(reconciler, virtualNode, newElement)
		elseif kind == ElementKind.Function then
			virtualNode = updateFunctionVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Stateful then
			shouldContinueUpdate = virtualNode.instance:__update(newElement, newState)
		elseif kind == ElementKind.Portal then
			virtualNode = updatePortalVirtualNode(virtualNode, newElement)
		elseif kind == ElementKind.Fragment then
			virtualNode = updateFragmentVirtualNode(virtualNode, newElement)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		-- Stateful components can abort updates via shouldUpdate. If that
		-- happens, we should stop doing stuff at this point.
		if not shouldContinueUpdate then
			return virtualNode
		end

		virtualNode.currentElement = newElement

		return virtualNode
	end

	--[[
		Constructs a new virtual node but not does mount it.
	]]
	local function createVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(typeof(context) == "table" or context == nil, "Expected arg #4 to be of type table or nil")
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		return {
			[Type] = Type.VirtualNode,
			currentElement = element,
			depth = 1,
			parent = nil,
			children = {},
			hostParent = hostParent,
			hostKey = hostKey,
			updateChildrenCount = 0,
			wasUnmounted = false,

			-- Legacy Context API
			-- A table of context values inherited from the parent node
			legacyContext = legacyContext,

			-- A saved copy of the parent context, used when replacing a node
			parentLegacyContext = legacyContext,

			-- Context API
			-- A table of context values inherited from the parent node
			context = context or {},

			-- A saved copy of the unmodified context; this will be updated when
			-- a component adds new context and used when a node is replaced
			originalContext = nil,
		}
	end

	local function mountFunctionVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local children = element.component(element.props)

		updateVirtualNodeWithRenderResult(virtualNode, virtualNode.hostParent, children)
	end

	local function mountPortalVirtualNode(virtualNode)
		local element = virtualNode.currentElement

		local targetHostParent = element.props.target
		local children = element.props[Children]

		assert(renderer.isHostObject(targetHostParent), "Expected target to be host object")

		updateVirtualNodeWithChildren(virtualNode, targetHostParent, children)
	end

	local function mountFragmentVirtualNode(virtualNode)
		local element = virtualNode.currentElement
		local children = element.elements

		updateVirtualNodeWithChildren(virtualNode, virtualNode.hostParent, children)
	end

	--[[
		Constructs a new virtual node and mounts it, but does not place it into
		the tree.
	]]
	function mountVirtualNode(element, hostParent, hostKey, context, legacyContext)
		if config.internalTypeChecks then
			internalAssert(
				renderer.isHostObject(hostParent) or hostParent == nil,
				"Expected arg #2 to be a host object"
			)
			internalAssert(
				typeof(legacyContext) == "table" or legacyContext == nil,
				"Expected arg #5 to be of type table or nil"
			)
		end
		if config.typeChecks then
			assert(hostKey ~= nil, "Expected arg #3 to be non-nil")
			assert(
				Type.of(element) == Type.Element or typeof(element) == "boolean",
				"Expected arg #1 to be of type Element or boolean"
			)
		end

		-- Boolean values render as nil to enable terse conditional rendering.
		if typeof(element) == "boolean" then
			return nil
		end

		local kind = ElementKind.of(element)

		local virtualNode = createVirtualNode(element, hostParent, hostKey, context, legacyContext)

		if kind == ElementKind.Host then
			renderer.mountHostNode(reconciler, virtualNode)
		elseif kind == ElementKind.Function then
			mountFunctionVirtualNode(virtualNode)
		elseif kind == ElementKind.Stateful then
			element.component:__mount(reconciler, virtualNode)
		elseif kind == ElementKind.Portal then
			mountPortalVirtualNode(virtualNode)
		elseif kind == ElementKind.Fragment then
			mountFragmentVirtualNode(virtualNode)
		else
			error(("Unknown ElementKind %q"):format(tostring(kind)), 2)
		end

		return virtualNode
	end

	--[[
		Constructs a new Roact virtual tree, constructs a root node for
		it, and mounts it.
	]]
	local function mountVirtualTree(element, hostParent, hostKey)
		if config.typeChecks then
			assert(Type.of(element) == Type.Element, "Expected arg #1 to be of type Element")
			assert(renderer.isHostObject(hostParent) or hostParent == nil, "Expected arg #2 to be a host object")
		end

		if hostKey == nil then
			hostKey = "RoactTree"
		end

		local tree = {
			[Type] = Type.VirtualTree,
			[InternalData] = {
				-- The root node of the tree, which starts into the hierarchy of
				-- Roact component instances.
				rootNode = nil,
				mounted = true,
			},
		}

		tree[InternalData].rootNode = mountVirtualNode(element, hostParent, hostKey)

		return tree
	end

	--[[
		Unmounts the virtual tree, freeing all of its resources.

		No further operations should be done on the tree after it's been
		unmounted, as indicated by its the `mounted` field.
	]]
	local function unmountVirtualTree(tree)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(internalData.mounted, "Cannot unmounted a Roact tree that has already been unmounted")
		end

		internalData.mounted = false

		if internalData.rootNode ~= nil then
			unmountVirtualNode(internalData.rootNode)
		end
	end

	--[[
		Utility method for updating the root node of a virtual tree given a new
		element.
	]]
	local function updateVirtualTree(tree, newElement)
		local internalData = tree[InternalData]
		if config.typeChecks then
			assert(Type.of(tree) == Type.VirtualTree, "Expected arg #1 to be a Roact handle")
			assert(Type.of(newElement) == Type.Element, "Expected arg #2 to be a Roact Element")
		end

		internalData.rootNode = updateVirtualNode(internalData.rootNode, newElement)

		return tree
	end

	reconciler = {
		mountVirtualTree = mountVirtualTree,
		unmountVirtualTree = unmountVirtualTree,
		updateVirtualTree = updateVirtualTree,

		createVirtualNode = createVirtualNode,
		mountVirtualNode = mountVirtualNode,
		unmountVirtualNode = unmountVirtualNode,
		updateVirtualNode = updateVirtualNode,
		updateVirtualNodeWithChildren = updateVirtualNodeWithChildren,
		updateVirtualNodeWithRenderResult = updateVirtualNodeWithRenderResult,
	}

	return reconciler
end

return createReconciler
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec5</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF443AA229579433FB2A84B3D212E99A1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconciler.spec</string>
						<string name="ScriptGuid">{2FCDF806-6040-4F48-9A23-84A5A2D0E244}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createFragment = require(script.Parent.createFragment)
	local createSpy = require(script.Parent.createSpy)
	local NoopRenderer = require(script.Parent.NoopRenderer)
	local Type = require(script.Parent.Type)
	local ElementKind = require(script.Parent.ElementKind)

	local createReconciler = require(script.Parent.createReconciler)

	local noopReconciler = createReconciler(NoopRenderer)

	describe("tree operations", function()
		it("should mount and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.unmountVirtualTree(tree)
		end)

		it("should mount, update, and unmount", function()
			local tree = noopReconciler.mountVirtualTree(createElement("StringValue"))

			expect(tree).to.be.ok()

			noopReconciler.updateVirtualTree(tree, createElement("StringValue"))

			noopReconciler.unmountVirtualTree(tree)
		end)
	end)

	describe("booleans", function()
		it("should mount booleans as nil", function()
			local node = noopReconciler.mountVirtualNode(false, nil, "test")
			expect(node).to.equal(nil)
		end)

		it("should unmount nodes if they are updated to a boolean value", function()
			local node = noopReconciler.mountVirtualNode(createElement("StringValue"), nil, "test")

			expect(node).to.be.ok()

			node = noopReconciler.updateVirtualNode(node, true)

			expect(node).to.equal(nil)
		end)
	end)

	describe("invalid elements", function()
		it("should throw errors when attempting to mount invalid elements", function()
			-- These function components return values with incorrect types
			local returnsString = function()
				return "Hello"
			end
			local returnsNumber = function()
				return 1
			end
			local returnsFunction = function()
				return function() end
			end
			local returnsTable = function()
				return {}
			end

			local hostParent = nil
			local key = "Some Key"

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsString), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsNumber), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsFunction), hostParent, key)
			end).to.throw()

			expect(function()
				noopReconciler.mountVirtualNode(createElement(returnsTable), hostParent, key)
			end).to.throw()
		end)
	end)

	describe("Host components", function()
		it("should invoke the renderer to mount host nodes", function()
			local mountHostNode = createSpy(NoopRenderer.mountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = mountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Some Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(mountHostNode.callCount).to.equal(1)

			local values = mountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)

		it("should invoke the renderer to update host nodes", function()
			local updateHostNode = createSpy(NoopRenderer.updateHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				updateHostNode = updateHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			local newElement = createElement("StringValue")
			local newNode = reconciler.updateVirtualNode(node, newElement)

			expect(newNode).to.equal(node)

			expect(updateHostNode.callCount).to.equal(1)

			local values = updateHostNode:captureValues("reconciler", "node", "newElement")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
			expect(values.newElement).to.equal(newElement)
		end)

		it("should invoke the renderer to unmount host nodes", function()
			local unmountHostNode = createSpy(NoopRenderer.unmountHostNode)

			local renderer = assign({}, NoopRenderer, {
				mountHostNode = NoopRenderer.mountHostNode,
				unmountHostNode = unmountHostNode.value,
			})

			local reconciler = createReconciler(renderer)

			local element = createElement("StringValue")
			local hostParent = nil
			local key = "Key"
			local node = reconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			reconciler.unmountVirtualNode(node)

			expect(unmountHostNode.callCount).to.equal(1)

			local values = unmountHostNode:captureValues("reconciler", "node")

			expect(values.reconciler).to.equal(reconciler)
			expect(values.node).to.equal(node)
		end)
	end)

	describe("Function components", function()
		it("should mount and unmount function components", function()
			local componentSpy = createSpy(function(_props)
				return nil
			end)

			local element = createElement(componentSpy.value, {
				someValue = 5,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(componentSpy.callCount).to.equal(1)

			local calledWith = componentSpy:captureValues("props")

			expect(calledWith.props).to.be.a("table")
			expect(calledWith.props.someValue).to.equal(5)

			noopReconciler.unmountVirtualNode(node)

			expect(componentSpy.callCount).to.equal(1)
		end)

		it("should mount single children of function components", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createElement(childComponentSpy.value, {
					value = props.value + 1,
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 13,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childCalledWith = childComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(13)

			expect(childCalledWith.props).to.be.a("table")
			expect(childCalledWith.props.value).to.equal(14)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childComponentSpy.callCount).to.equal(1)
		end)

		it("should mount fragments returned by function components", function()
			local childAComponentSpy = createSpy(function(_props)
				return nil
			end)

			local childBComponentSpy = createSpy(function(_props)
				return nil
			end)

			local parentComponentSpy = createSpy(function(props)
				return createFragment({
					A = createElement(childAComponentSpy.value, {
						value = props.value + 1,
					}),
					B = createElement(childBComponentSpy.value, {
						value = props.value + 5,
					}),
				})
			end)

			local element = createElement(parentComponentSpy.value, {
				value = 17,
			})
			local hostParent = nil
			local key = "A Key"
			local node = noopReconciler.mountVirtualNode(element, hostParent, key)

			expect(Type.of(node)).to.equal(Type.VirtualNode)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)

			local parentCalledWith = parentComponentSpy:captureValues("props")
			local childACalledWith = childAComponentSpy:captureValues("props")
			local childBCalledWith = childBComponentSpy:captureValues("props")

			expect(parentCalledWith.props).to.be.a("table")
			expect(parentCalledWith.props.value).to.equal(17)

			expect(childACalledWith.props).to.be.a("table")
			expect(childACalledWith.props.value).to.equal(18)

			expect(childBCalledWith.props).to.be.a("table")
			expect(childBCalledWith.props.value).to.equal(22)

			noopReconciler.unmountVirtualNode(node)

			expect(parentComponentSpy.callCount).to.equal(1)
			expect(childAComponentSpy.callCount).to.equal(1)
			expect(childBComponentSpy.callCount).to.equal(1)
		end)
	end)

	describe("Fragments", function()
		it("should mount fragments", function()
			local fragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(fragment, nil, "test")

			expect(node).to.be.ok()
			expect(ElementKind.of(node.currentElement)).to.equal(ElementKind.Fragment)
		end)

		it("should mount an empty fragment", function()
			local emptyFragment = createFragment({})
			local node = noopReconciler.mountVirtualNode(emptyFragment, nil, "test")

			expect(node).to.be.ok()
			expect(next(node.children)).to.never.be.ok()
		end)

		it("should mount all fragment's children", function()
			local childComponentSpy = createSpy(function(_props)
				return nil
			end)
			local elements = {}
			local totalElements = 5

			for i = 1, totalElements do
				elements["key" .. tostring(i)] = createElement(childComponentSpy.value, {})
			end

			local fragments = createFragment(elements)
			local node = noopReconciler.mountVirtualNode(fragments, nil, "test")

			expect(node).to.be.ok()
			expect(childComponentSpy.callCount).to.equal(totalElements)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9A92E28D7D2B4A83A0ABB4F7C1BF2339">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconcilerCompat</string>
						<string name="ScriptGuid">{2AA0111C-5B16-4118-8581-8F7FC9227617}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Contains deprecated methods from Reconciler. Broken out so that removing
	this shim is easy -- just delete this file and remove it from init.
]]

local Logging = require(script.Parent.Logging)

local reifyMessage = [[
Roact.reify has been renamed to Roact.mount and will be removed in a future release.
Check the call to Roact.reify at:
]]

local teardownMessage = [[
Roact.teardown has been renamed to Roact.unmount and will be removed in a future release.
Check the call to Roact.teardown at:
]]

local reconcileMessage = [[
Roact.reconcile has been renamed to Roact.update and will be removed in a future release.
Check the call to Roact.reconcile at:
]]

local function createReconcilerCompat(reconciler)
	local compat = {}

	function compat.reify(...)
		Logging.warnOnce(reifyMessage)

		return reconciler.mountVirtualTree(...)
	end

	function compat.teardown(...)
		Logging.warnOnce(teardownMessage)

		return reconciler.unmountVirtualTree(...)
	end

	function compat.reconcile(...)
		Logging.warnOnce(reconcileMessage)

		return reconciler.updateVirtualTree(...)
	end

	return compat
end

return createReconcilerCompat
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCD9ED2FD82044C4E81C74D3C9AE211AA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createReconcilerCompat.spec</string>
						<string name="ScriptGuid">{07AF2812-8307-42C5-893A-3621A70D7B21}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)
	local createReconciler = require(script.Parent.createReconciler)
	local Logging = require(script.Parent.Logging)
	local NoopRenderer = require(script.Parent.NoopRenderer)

	local createReconcilerCompat = require(script.Parent.createReconcilerCompat)

	local noopReconciler = createReconciler(NoopRenderer)
	local compatReconciler = createReconcilerCompat(noopReconciler)

	it("reify should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = compatReconciler.reify(createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = compatReconciler.reify(createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reify")).to.be.ok()
	end)

	it("teardown should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.teardown(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.teardown(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("teardown")).to.be.ok()
	end)

	it("update should only warn once per call site", function()
		local logInfo = Logging.capture(function()
			-- We're using a loop so that we get the same stack trace and only one
			-- warning hopefully.
			for _ = 1, 2 do
				local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
				compatReconciler.reconcile(handle, createElement("StringValue"))
				noopReconciler.unmountVirtualTree(handle)
			end
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()

		logInfo = Logging.capture(function()
			-- This is a different call site, which should trigger another warning.
			local handle = noopReconciler.mountVirtualTree(createElement("StringValue"))
			compatReconciler.reconcile(handle, createElement("StringValue"))
			noopReconciler.unmountVirtualTree(handle)
		end)

		expect(#logInfo.warnings).to.equal(1)
		expect(logInfo.warnings[1]:find("reconcile")).to.be.ok()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXA8C52C955A2B4D6A81DBDF4DBAA368E1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createRef</string>
						<string name="ScriptGuid">{9BA46F6C-C658-44B1-930C-2E1C9E554615}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A ref is nothing more than a binding with a special field 'current'
	that maps to the getValue method of the binding
]]
local Binding = require(script.Parent.Binding)

local function createRef()
	local binding, _ = Binding.create(nil)

	local ref = {}

	--[[
		A ref is just redirected to a binding via its metatable
	]]
	setmetatable(ref, {
		__index = function(_self, key)
			if key == "current" then
				return binding:getValue()
			else
				return binding[key]
			end
		end,
		__newindex = function(_self, key, value)
			if key == "current" then
				error("Cannot assign to the 'current' property of refs", 2)
			end

			binding[key] = value
		end,
		__tostring = function(_self)
			return ("RoactRef(%s)"):format(tostring(binding:getValue()))
		end,
	})

	return ref
end

return createRef
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ec9</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXEF33746CEF194CD18587B8948A2F3D9D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createRef.spec</string>
						<string name="ScriptGuid">{3BA4E0C3-14FE-4DCA-837A-105D2F8378AF}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Binding = require(script.Parent.Binding)
	local Type = require(script.Parent.Type)

	local createRef = require(script.Parent.createRef)

	it("should create refs, which are specialized bindings", function()
		local ref = createRef()

		expect(Type.of(ref)).to.equal(Type.Binding)
		expect(ref.current).to.equal(nil)
	end)

	it("should have a 'current' field that is the same as the internal binding's value", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 10)
		expect(ref.current).to.equal(10)
	end)

	it("should support tostring on refs", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)
		expect(tostring(ref)).to.equal("RoactRef(nil)")

		Binding.update(ref, 10)
		expect(tostring(ref)).to.equal("RoactRef(10)")
	end)

	it("should not allow assignments to the 'current' field", function()
		local ref = createRef()

		expect(ref.current).to.equal(nil)

		Binding.update(ref, 99)
		expect(ref.current).to.equal(99)

		expect(function()
			ref.current = 77
		end).to.throw()

		expect(ref.current).to.equal(99)
	end)

	it("should return the same thing from getValue as its current field", function()
		local ref = createRef()
		Binding.update(ref, 10)

		expect(ref:getValue()).to.equal(10)
		expect(ref:getValue()).to.equal(ref.current)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0eca</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8181B5DCC01F46F6A4F6EA2E4D811FF0">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSignal</string>
						<string name="ScriptGuid">{F7817786-D22E-428A-A946-6A8B53180F4C}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	This is a simple signal implementation that has a dead-simple API.

		local signal = createSignal()

		local disconnect = signal:subscribe(function(foo)
			print("Cool foo:", foo)
		end)

		signal:fire("something")

		disconnect()
]]

local function createSignal()
	local connections = {}
	local suspendedConnections = {}
	local firing = false

	local function subscribe(_self, callback)
		assert(typeof(callback) == "function", "Can only subscribe to signals with a function.")

		local connection = {
			callback = callback,
			disconnected = false,
		}

		-- If the callback is already registered, don't add to the suspendedConnection. Otherwise, this will disable
		-- the existing one.
		if firing and not connections[callback] then
			suspendedConnections[callback] = connection
		end

		connections[callback] = connection

		local function disconnect()
			assert(not connection.disconnected, "Listeners can only be disconnected once.")

			connection.disconnected = true
			connections[callback] = nil
			suspendedConnections[callback] = nil
		end

		return disconnect
	end

	local function fire(_self, ...)
		firing = true
		for callback, connection in pairs(connections) do
			if not connection.disconnected and not suspendedConnections[callback] then
				callback(...)
			end
		end

		firing = false

		for callback, _ in pairs(suspendedConnections) do
			suspendedConnections[callback] = nil
		end
	end

	return {
		subscribe = subscribe,
		fire = fire,
	}
end

return createSignal
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ecb</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX18B71DA4D1594F4E879A46EBA74BABC8">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSignal.spec</string>
						<string name="ScriptGuid">{F0DF2D01-4AD7-443D-B46B-648F8A756B40}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSignal = require(script.Parent.createSignal)

	local createSpy = require(script.Parent.createSpy)

	it("should fire subscribers and disconnect them", function()
		local signal = createSignal()

		local spy = createSpy()
		local disconnect = signal:subscribe(spy.value)

		expect(spy.callCount).to.equal(0)

		local a = 1
		local b = {}
		local c = "hello"
		signal:fire(a, b, c)

		expect(spy.callCount).to.equal(1)
		spy:assertCalledWith(a, b, c)

		disconnect()

		signal:fire()

		expect(spy.callCount).to.equal(1)
	end)

	it("should handle multiple subscribers", function()
		local signal = createSignal()

		local spyA = createSpy()
		local spyB = createSpy()

		local disconnectA = signal:subscribe(spyA.value)
		local disconnectB = signal:subscribe(spyB.value)

		expect(spyA.callCount).to.equal(0)
		expect(spyB.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		expect(spyB.callCount).to.equal(1)
		spyB:assertCalledWith(a, b)

		disconnectA()

		signal:fire(b, a)

		expect(spyA.callCount).to.equal(1)

		expect(spyB.callCount).to.equal(2)
		spyB:assertCalledWith(b, a)

		disconnectB()
	end)

	it("should stop firing a connection if disconnected mid-fire", function()
		local signal = createSignal()

		-- In this test, we'll connect two listeners that each try to disconnect
		-- the other. Because the order of listeners firing isn't defined, we
		-- have to be careful to handle either case.

		local disconnectA
		local disconnectB

		local spyA = createSpy(function()
			disconnectB()
		end)

		local spyB = createSpy(function()
			disconnectA()
		end)

		disconnectA = signal:subscribe(spyA.value)
		disconnectB = signal:subscribe(spyB.value)

		signal:fire()

		-- Exactly once listener should have been called.
		expect(spyA.callCount + spyB.callCount).to.equal(1)
	end)

	it("should allow adding listener in the middle of firing", function()
		local signal = createSignal()

		local disconnectA
		local spyA = createSpy()
		local listener = function(_a, _b)
			disconnectA = signal:subscribe(spyA.value)
		end

		local disconnectListener = signal:subscribe(listener)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(0)

		-- The new listener should be picked up in next fire.
		signal:fire(b, a)
		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(b, a)

		disconnectA()
		disconnectListener()

		signal:fire(a)

		expect(spyA.callCount).to.equal(1)
	end)

	it("should have one connection instance when add the same listener multiple times", function()
		local signal = createSignal()

		local spyA = createSpy()
		local disconnect1 = signal:subscribe(spyA.value)

		expect(spyA.callCount).to.equal(0)

		local a = {}
		local b = 67
		signal:fire(a, b)

		expect(spyA.callCount).to.equal(1)
		spyA:assertCalledWith(a, b)

		local disconnect2 = signal:subscribe(spyA.value)

		signal:fire(b, a)
		expect(spyA.callCount).to.equal(2)
		spyA:assertCalledWith(b, a)

		disconnect2()

		signal:fire(a)

		expect(spyA.callCount).to.equal(2)

		-- should have no effect.
		disconnect1()
		signal:fire(a)
		expect(spyA.callCount).to.equal(2)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ecc</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXCB387790C97745C9A0B0153DD443CE5E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSpy</string>
						<string name="ScriptGuid">{3DE1A0AF-BAB0-478F-8DAF-5F00497076BF}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	A utility used to create a function spy that can be used to robustly test
	that functions are invoked the correct number of times and with the correct
	number of arguments.

	This should only be used in tests.
]]

local assertDeepEqual = require(script.Parent.assertDeepEqual)

local function createSpy(inner)
	local self = {}
	self.callCount = 0
	self.values = {}
	self.valuesLength = 0
	self.value = function(...)
		self.callCount = self.callCount + 1
		self.values = { ... }
		self.valuesLength = select("#", ...)

		if inner ~= nil then
			return inner(...)
		end
		return nil
	end

	self.assertCalledWith = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assert(self.values[i] == expected, "value differs")
		end
	end

	self.assertCalledWithDeepEqual = function(_, ...)
		local len = select("#", ...)

		if self.valuesLength ~= len then
			error(("Expected %d arguments, but was called with %d arguments"):format(self.valuesLength, len), 2)
		end

		for i = 1, len do
			local expected = select(i, ...)

			assertDeepEqual(self.values[i], expected)
		end
	end

	self.captureValues = function(_, ...)
		local len = select("#", ...)
		local result = {}

		assert(self.valuesLength == len, "length of expected values differs from stored values")

		for i = 1, len do
			local key = select(i, ...)
			result[key] = self.values[i]
		end

		return result
	end

	setmetatable(self, {
		__index = function(_, key)
			error(("%q is not a valid member of spy"):format(key))
		end,
	})

	return self
end

return createSpy
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ecd</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXDD9D46CFC4ED44C6A7B0E1A2FF59D864">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">createSpy.spec</string>
						<string name="ScriptGuid">{4EB468E0-4F65-429B-B35D-D9E3C050C72E}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createSpy = require(script.Parent.createSpy)

	describe("createSpy", function()
		it("should create spies", function()
			local spy = createSpy(function() end)

			expect(spy).to.be.ok()
		end)

		it("should throw if spies are indexed by an invalid key", function()
			local spy = createSpy(function() end)

			expect(function()
				return spy.test
			end).to.throw()
		end)
	end)

	describe("value", function()
		it("should increment callCount when called", function()
			local spy = createSpy(function() end)
			spy.value()

			expect(spy.callCount).to.equal(1)
		end)

		it("should store all values passed", function()
			local spy = createSpy(function() end)
			spy.value(1, true, "3")

			expect(spy.valuesLength).to.equal(3)
			expect(spy.values[1]).to.equal(1)
			expect(spy.values[2]).to.equal(true)
			expect(spy.values[3]).to.equal("3")
		end)

		it("should return the value of the inner function", function()
			local spy = createSpy(function()
				return true
			end)

			expect(spy.value()).to.equal(true)
		end)
	end)

	describe("assertCalledWith", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1)
			end).to.throw()
		end)

		it("should throw if any value differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:assertCalledWith(1, 3)
			end).to.throw()

			expect(function()
				spy:assertCalledWith(2, 3)
			end).to.throw()
		end)
	end)

	describe("captureValues", function()
		it("should throw if the number of values differs", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			expect(function()
				spy:captureValues("a")
			end).to.throw()
		end)

		it("should capture all values in a table", function()
			local spy = createSpy(function() end)
			spy.value(1, 2)

			local captured = spy:captureValues("a", "b")
			expect(captured.a).to.equal(1)
			expect(captured.b).to.equal(2)
		end)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ece</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXAC30F687A1184A6A8AEEA816D82D195C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">forwardRef</string>
						<string name="ScriptGuid">{972C5FCE-7249-462E-ACC4-736E62B6FD25}</string>
						<ProtectedString name="Source"><![CDATA[local assign = require(script.Parent.assign)
local None = require(script.Parent.None)
local Ref = require(script.Parent.PropMarkers.Ref)

local config = require(script.Parent.GlobalConfig).get()

local excludeRef = {
	[Ref] = None,
}

--[[
	Allows forwarding of refs to underlying host components. Accepts a render
	callback which accepts props and a ref, and returns an element.
]]
local function forwardRef(render)
	if config.typeChecks then
		assert(typeof(render) == "function", "Expected arg #1 to be a function")
	end

	return function(props)
		local ref = props[Ref]
		local propsWithoutRef = assign({}, props, excludeRef)

		return render(propsWithoutRef, ref)
	end
end

return forwardRef
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ecf</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX69F87258BA404BDAA4148CFBE0B6356F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">forwardRef.spec</string>
						<string name="ScriptGuid">{D8415DB2-C104-446E-AF86-2044D844B186}</string>
						<ProtectedString name="Source"><![CDATA[-- Tests loosely adapted from those found at:
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.js
-- * https://github.com/facebook/react/blob/v17.0.1/packages/react/src/__tests__/forwardRef-test.internal.js
return function()
	local assign = require(script.Parent.assign)
	local createElement = require(script.Parent.createElement)
	local createRef = require(script.Parent.createRef)
	local forwardRef = require(script.Parent.forwardRef)
	local createReconciler = require(script.Parent.createReconciler)
	local Component = require(script.Parent.Component)
	local GlobalConfig = require(script.Parent.GlobalConfig)
	local Ref = require(script.Parent.PropMarkers.Ref)

	local RobloxRenderer = require(script.Parent.RobloxRenderer)

	local reconciler = createReconciler(RobloxRenderer)

	it("should update refs when switching between children", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local setRefOnDiv = props.setRefOnDiv
			-- deviation: clearer to express this way, since we don't have real
			-- ternaries
			local firstRef, secondRef
			if setRefOnDiv then
				firstRef = forwardedRef
			else
				secondRef = forwardedRef
			end
			return createElement("Frame", nil, {
				First = createElement("Frame", {
					[Ref] = firstRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "First",
					}),
				}),
				Second = createElement("ScrollingFrame", {
					[Ref] = secondRef,
				}, {
					Child = createElement("TextLabel", {
						Text = "Second",
					}),
				}),
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(FunctionComponent, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = true,
		})
		local tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)

		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			setRefOnDiv = false,
		})
		tree = reconciler.mountVirtualTree(element, nil, "switch refs")
		expect(ref.current.ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should support rendering nil for multiple children", function()
		local RefForwardingComponent = forwardRef(function(_props, _ref)
			return nil
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multiple children nil ref")
		expect(ref.current).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)

	-- We could support this by having forwardRef return a stateful component,
	-- but it's likely not necessary
	itSKIP("should support defaultProps", function()
		local function FunctionComponent(props)
			local forwardedRef = props.forwardedRef
			local optional = props.optional
			local required = props.required
			return createElement("Frame", {
				[Ref] = forwardedRef,
			}, {
				OptionalChild = optional,
				RequiredChild = required,
			})
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(
				FunctionComponent,
				assign({}, props, {
					forwardedRef = ref,
				})
			)
		end)
		RefForwardingComponent.defaultProps = {
			optional = createElement("TextLabel"),
		}

		local ref = createRef()

		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			optional = createElement("Frame"),
			required = createElement("ScrollingFrame"),
		})

		local tree = reconciler.mountVirtualTree(element, nil, "with optional")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("Frame")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")

		reconciler.unmountVirtualTree(tree)
		element = createElement(RefForwardingComponent, {
			[Ref] = ref,
			required = createElement("ScrollingFrame"),
		})
		tree = reconciler.mountVirtualTree(element, nil, "with default")

		expect(ref.current:FindFirstChild("OptionalChild").ClassName).to.equal("TextLabel")
		expect(ref.current:FindFirstChild("RequiredChild").ClassName).to.equal("ScrollingFrame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should error if not provided a callback when type checking is enabled", function()
		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef(nil)
			end).to.throw()
		end)

		GlobalConfig.scoped({
			typeChecks = true,
		}, function()
			expect(function()
				forwardRef("foo")
			end).to.throw()
		end)
	end)

	it("should work without a ref to be forwarded", function()
		local function Child()
			return nil
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local element = createElement(RefForwardingComponent, { value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "nil ref")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for a single child", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement(RefForwardingComponent, { [Ref] = ref, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "single child ref")
		expect(value).to.equal(123)
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should forward a ref for multiple children", function()
		local function Child(props)
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()

		local element = createElement("Frame", nil, {
			NoRef1 = createElement("Frame"),
			WithRef = createElement(RefForwardingComponent, { [Ref] = ref }),
			NoRef2 = createElement("Frame"),
		})
		local tree = reconciler.mountVirtualTree(element, nil, "multi child ref")
		expect(ref.current.ClassName).to.equal("Frame")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should maintain child instance and ref through updates", function()
		local value
		local function Child(props)
			value = props.value
			return createElement("Frame", {
				[Ref] = props[Ref],
			})
		end

		local function Wrapper(props)
			return createElement(Child, assign({}, props, { [Ref] = props.forwardedRef }))
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(Wrapper, assign({}, props, { forwardedRef = ref }))
		end)

		local setRefCount = 0
		local refValue

		local setRef = function(r)
			setRefCount = setRefCount + 1
			refValue = r
		end

		local element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 123 })
		local tree = reconciler.mountVirtualTree(element, nil, "maintains instance")

		expect(value).to.equal(123)
		expect(refValue.ClassName).to.equal("Frame")
		expect(setRefCount).to.equal(1)

		element = createElement(RefForwardingComponent, { [Ref] = setRef, value = 456 })
		tree = reconciler.updateVirtualTree(tree, element)

		expect(value).to.equal(456)
		expect(setRefCount).to.equal(1)
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not re-run the render callback on a deep setState", function()
		local inst
		local renders = {}

		local Inner = Component:extend("Inner")
		function Inner:render()
			table.insert(renders, "Inner")
			inst = self
			return createElement("Frame", { [Ref] = self.props.forwardedRef })
		end

		local function Middle(props)
			table.insert(renders, "Middle")
			return createElement(Inner, props)
		end

		local Forward = forwardRef(function(props, ref)
			table.insert(renders, "Forward")
			return createElement(Middle, assign({}, props, { forwardedRef = ref }))
		end)

		local function App()
			table.insert(renders, "App")
			return createElement(Forward)
		end

		local tree = reconciler.mountVirtualTree(createElement(App), nil, "deep setState")
		expect(#renders).to.equal(4)
		expect(renders[1]).to.equal("App")
		expect(renders[2]).to.equal("Forward")
		expect(renders[3]).to.equal("Middle")
		expect(renders[4]).to.equal("Inner")

		renders = {}
		inst:setState({})
		expect(#renders).to.equal(1)
		expect(renders[1]).to.equal("Inner")
		reconciler.unmountVirtualTree(tree)
	end)

	it("should not include the ref in the forwarded props", function()
		local capturedProps
		local function CaptureProps(props)
			capturedProps = props
			return createElement("Frame", { [Ref] = props.forwardedRef })
		end

		local RefForwardingComponent = forwardRef(function(props, ref)
			return createElement(CaptureProps, assign({}, props, { forwardedRef = ref }))
		end)

		local ref = createRef()
		local element = createElement(RefForwardingComponent, {
			[Ref] = ref,
		})

		local tree = reconciler.mountVirtualTree(element, nil, "no ref in props")
		expect(capturedProps).to.be.ok()
		expect(capturedProps.forwardedRef).to.equal(ref)
		expect(capturedProps[Ref]).to.equal(nil)
		reconciler.unmountVirtualTree(tree)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE761656A25D74917A3D7671CD7611F0C">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getDefaultInstanceProperty</string>
						<string name="ScriptGuid">{F4F34462-2ADB-4D33-A9C8-6F39373AEED6}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Attempts to get the default value of a given property on a Roblox instance.

	This is used by the reconciler in cases where a prop was previously set on a
	primitive component, but is no longer present in a component's new props.

	Eventually, Roblox might provide a nicer API to query the default property
	of an object without constructing an instance of it.
]]

local Symbol = require(script.Parent.Symbol)

local Nil = Symbol.named("Nil")
local _cachedPropertyValues = {}

local function getDefaultInstanceProperty(className, propertyName)
	local classCache = _cachedPropertyValues[className]

	if classCache then
		local propValue = classCache[propertyName]

		-- We have to use a marker here, because Lua doesn't distinguish
		-- between 'nil' and 'not in a table'
		if propValue == Nil then
			return true, nil
		end

		if propValue ~= nil then
			return true, propValue
		end
	else
		classCache = {}
		_cachedPropertyValues[className] = classCache
	end

	local created = Instance.new(className)
	local ok, defaultValue = pcall(function()
		return created[propertyName]
	end)

	created:Destroy()

	if ok then
		if defaultValue == nil then
			classCache[propertyName] = Nil
		else
			classCache[propertyName] = defaultValue
		end
	end

	return ok, defaultValue
end

return getDefaultInstanceProperty
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXE9A2196358D24B5F9DABDA1E712B6BD3">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">getDefaultInstanceProperty.spec</string>
						<string name="ScriptGuid">{21366E4A-B714-4229-8944-17272DFFB697}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local getDefaultInstanceProperty = require(script.Parent.getDefaultInstanceProperty)

	it("should get default name string values", function()
		local _, defaultName = getDefaultInstanceProperty("StringValue", "Name")

		expect(defaultName).to.equal("Value")
	end)

	it("should get default empty string values", function()
		local _, defaultValue = getDefaultInstanceProperty("StringValue", "Value")

		expect(defaultValue).to.equal("")
	end)

	it("should get default number values", function()
		local _, defaultValue = getDefaultInstanceProperty("IntValue", "Value")

		expect(defaultValue).to.equal(0)
	end)

	it("should get nil default values", function()
		local _, defaultValue = getDefaultInstanceProperty("ObjectValue", "Value")

		expect(defaultValue).to.equal(nil)
	end)

	it("should get bool default values", function()
		local _, defaultValue = getDefaultInstanceProperty("BoolValue", "Value")

		expect(defaultValue).to.equal(false)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3BB18961E4C54DABACCE6262A289FBBC">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">init.spec</string>
						<string name="ScriptGuid">{3A01F157-D7E5-4D52-8ADF-03946B70F4C2}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Roact = require(script.Parent)

	it("should load with all public APIs", function()
		local publicApi = {
			createElement = "function",
			createFragment = "function",
			createRef = "function",
			forwardRef = "function",
			createBinding = "function",
			joinBindings = "function",
			mount = "function",
			unmount = "function",
			update = "function",
			oneChild = "function",
			setGlobalConfig = "function",
			createContext = "function",

			-- These functions are deprecated and throw warnings!
			reify = "function",
			teardown = "function",
			reconcile = "function",

			Component = true,
			PureComponent = true,
			Portal = true,
			Children = true,
			Event = true,
			Change = true,
			Ref = true,
			None = true,
			UNSTABLE = true,
		}

		expect(Roact).to.be.ok()

		for key, valueType in pairs(publicApi) do
			local success
			if typeof(valueType) == "string" then
				success = typeof(Roact[key]) == valueType
			else
				success = Roact[key] ~= nil
			end

			if not success then
				local existence = typeof(valueType) == "boolean" and "present" or "of type " .. valueType
				local message = ("Expected public API member %q to be %s, but instead it was of type %s"):format(
					tostring(key),
					existence,
					typeof(Roact[key])
				)

				error(message)
			end
		end

		for key in pairs(Roact) do
			if publicApi[key] == nil then
				local message = ("Found unknown public API key %q!"):format(tostring(key))

				error(message)
			end
		end
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0B493DE68F2B42A4BD697DAAD087052F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">internalAssert</string>
						<string name="ScriptGuid">{05B10188-5A7D-412A-85C3-782972F6C0D4}</string>
						<ProtectedString name="Source"><![CDATA[local function internalAssert(condition, message)
	if not condition then
		error(message .. " (This is probably a bug in Roact!)", 3)
	end
end

return internalAssert
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXF89C0521CC5547DCB084E5BE433DB718">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">invalidSetStateMessages</string>
						<string name="ScriptGuid">{E7148ECD-D4BF-49CF-A456-4161C5D9AB37}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	These messages are used by Component to help users diagnose when they're
	calling setState in inappropriate places.

	The indentation may seem odd, but it's necessary to avoid introducing extra
	whitespace into the error messages themselves.
]]
local ComponentLifecyclePhase = require(script.Parent.ComponentLifecyclePhase)

local invalidSetStateMessages = {}

invalidSetStateMessages[ComponentLifecyclePhase.WillUpdate] = [[
setState cannot be used in the willUpdate lifecycle method.
Consider using the didUpdate method instead, or using getDerivedStateFromProps.

Check the definition of willUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.WillUnmount] = [[
setState cannot be used in the willUnmount lifecycle method.
A component that is being unmounted cannot be updated!

Check the definition of willUnmount in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.ShouldUpdate] = [[
setState cannot be used in the shouldUpdate lifecycle method.
shouldUpdate must be a pure function that only depends on props and state.

Check the definition of shouldUpdate in the component %q.]]

invalidSetStateMessages[ComponentLifecyclePhase.Render] = [[
setState cannot be used in the render method.
render must be a pure function that only depends on props and state.

Check the definition of render in the component %q.]]

invalidSetStateMessages["default"] = [[
setState can not be used in the current situation, because Roact doesn't know
which part of the lifecycle this component is in.

This is a bug in Roact.
It was triggered by the component %q.
]]

return invalidSetStateMessages
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed5</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX62DE02DDFF374C548C51A685411FEBBA">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">oneChild</string>
						<string name="ScriptGuid">{1FFBEFF5-F539-4161-9B38-7F6A30BDA677}</string>
						<ProtectedString name="Source"><![CDATA[--[[
	Retrieves at most one child from the children passed to a component.

	If passed nil or an empty table, will return nil.

	Throws an error if passed more than one child.
]]
local function oneChild(children)
	if not children then
		return nil
	end

	local key, child = next(children)

	if not child then
		return nil
	end

	local after = next(children, key)

	if after then
		error("Expected at most child, had more than one child.", 2)
	end

	return child
end

return oneChild
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX0E4587F45B634072BB209285B864961B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">oneChild.spec</string>
						<string name="ScriptGuid">{0FDF7BEA-C0D5-42C0-B9FC-C96702BC03B7}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local createElement = require(script.Parent.createElement)

	local oneChild = require(script.Parent.oneChild)

	it("should get zero children from a table", function()
		local children = {}

		expect(oneChild(children)).to.equal(nil)
	end)

	it("should get exactly one child", function()
		local child = createElement("Frame")
		local children = {
			foo = child,
		}

		expect(oneChild(children)).to.equal(child)
	end)

	it("should error with more than one child", function()
		local children = {
			a = createElement("Frame"),
			b = createElement("Frame"),
		}

		expect(function()
			oneChild(children)
		end).to.throw()
	end)

	it("should handle being passed nil", function()
		expect(oneChild(nil)).to.equal(nil)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6B0D0207D75C4D55ABB4F87244639AB1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">strict</string>
						<string name="ScriptGuid">{C78893C6-FEED-4985-93A9-1C23206E7B8F}</string>
						<ProtectedString name="Source"><![CDATA[--!nonstrict
local function strict(t, name)
	name = name or tostring(t)

	return setmetatable(t, {
		__index = function(_self, key)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,

		__newindex = function(_self, key, _value)
			local message = ("%q (%s) is not a valid member of %s"):format(tostring(key), typeof(key), name)

			error(message, 2)
		end,
	})
end

return strict
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXBA05DE4D5ADF4D0EBEA1A1BD5D1CF79F">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">strict.spec</string>
						<string name="ScriptGuid">{3F218849-5A9D-4721-931D-9981473BE890}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local strict = require(script.Parent.strict)

	it("should error when getting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			return t.c
		end).to.throw()
	end)

	it("should error when setting a nonexistent key", function()
		local t = strict({
			a = 1,
			b = 2,
		})

		expect(function()
			t.c = 3
		end).to.throw()
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">13c0f9da2de349530205c3b9000c0ed9</UniqueId>
					</Properties>
				</Item>
			</Item>
			<Item class="ModuleScript" referent="RBX875BC10E55594F07AE4D0E8886E696C2">
				<Properties>
					<BinaryString name="AttributesSerialize"></BinaryString>
					<Content name="LinkedSource"><null></null></Content>
					<string name="Name">Flipper</string>
					<string name="ScriptGuid">{6AD43D66-F337-4CE3-81DE-98083CE386BF}</string>
					<ProtectedString name="Source"><![CDATA[local Flipper = {
	SingleMotor = require(script.SingleMotor),
	GroupMotor = require(script.GroupMotor),

	Instant = require(script.Instant),
	Linear = require(script.Linear),
	Spring = require(script.Spring),
	
	isMotor = require(script.isMotor),
}

return Flipper]]></ProtectedString>
					<int64 name="SourceAssetId">-1</int64>
					<BinaryString name="Tags"></BinaryString>
					<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273b5</UniqueId>
				</Properties>
				<Item class="ModuleScript" referent="RBX5841DB8E8A064137A27B8727A10CB98D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">BaseMotor</string>
						<string name="ScriptGuid">{F48EBBC1-2501-488F-8C14-23EE804CEC86}</string>
						<ProtectedString name="Source"><![CDATA[local RunService = game:GetService("RunService")

local Signal = require(script.Parent.Signal)

local noop = function() end

local BaseMotor = {}
BaseMotor.__index = BaseMotor

function BaseMotor.new()
	return setmetatable({
		_onStep = Signal.new(),
		_onStart = Signal.new(),
		_onComplete = Signal.new(),
	}, BaseMotor)
end

function BaseMotor:onStep(handler)
	return self._onStep:connect(handler)
end

function BaseMotor:onStart(handler)
	return self._onStart:connect(handler)
end

function BaseMotor:onComplete(handler)
	return self._onComplete:connect(handler)
end

function BaseMotor:start()
	if not self._connection then
		self._connection = RunService.RenderStepped:Connect(function(deltaTime)
			self:step(deltaTime)
		end)
	end
end

function BaseMotor:stop()
	if self._connection then
		self._connection:Disconnect()
		self._connection = nil
	end
end

BaseMotor.destroy = BaseMotor.stop

BaseMotor.step = noop
BaseMotor.getValue = noop
BaseMotor.setGoal = noop

function BaseMotor:__tostring()
	return "Motor"
end

return BaseMotor
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273b6</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFE67327FC5704CC9AB87A159E7A52BE2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">BaseMotor.spec</string>
						<string name="ScriptGuid">{71D11288-F990-4715-8CAB-E5A4402B5D62}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local RunService = game:GetService("RunService")

	local BaseMotor = require(script.Parent.BaseMotor)

	describe("connection management", function()
		local motor = BaseMotor.new()

		it("should hook up connections on :start()", function()
			motor:start()
			expect(typeof(motor._connection)).to.equal("RBXScriptConnection")
		end)

		it("should remove connections on :stop() or :destroy()", function()
			motor:stop()
			expect(motor._connection).to.equal(nil)
		end)
	end)

	it("should call :step() with deltaTime", function()
		local motor = BaseMotor.new()

		local argumentsProvided
		function motor:step(...)
			argumentsProvided = { ... }
			motor:stop()
		end

		motor:start()
		
		local expectedDeltaTime = RunService.RenderStepped:Wait()

		-- Give it another frame, because connections tend to be invoked later than :Wait() calls
		RunService.RenderStepped:Wait()

		expect(argumentsProvided).to.be.ok()
		expect(argumentsProvided[1]).to.equal(expectedDeltaTime)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273b7</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX68DD66F28962409886A265A4B690EFC2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GroupMotor</string>
						<string name="ScriptGuid">{C9C1070D-46B5-4C9E-AA03-ABFCDE8D9574}</string>
						<ProtectedString name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)
local SingleMotor = require(script.Parent.SingleMotor)

local isMotor = require(script.Parent.isMotor)

local GroupMotor = setmetatable({}, BaseMotor)
GroupMotor.__index = GroupMotor

local function toMotor(value)
	if isMotor(value) then
		return value
	end

	local valueType = typeof(value)

	if valueType == "number" then
		return SingleMotor.new(value, false)
	elseif valueType == "table" then
		return GroupMotor.new(value, false)
	end

	error(("Unable to convert %q to motor; type %s is unsupported"):format(value, valueType), 2)
end

function GroupMotor.new(initialValues, useImplicitConnections)
	assert(initialValues, "Missing argument #1: initialValues")
	assert(typeof(initialValues) == "table", "initialValues must be a table!")
	assert(not initialValues.step, "initialValues contains disallowed property \"step\". Did you mean to put a table of values here?")

	local self = setmetatable(BaseMotor.new(), GroupMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._complete = true
	self._motors = {}

	for key, value in pairs(initialValues) do
		self._motors[key] = toMotor(value)
	end

	return self
end

function GroupMotor:step(deltaTime)
	if self._complete then
		return true
	end

	local allMotorsComplete = true

	for _, motor in pairs(self._motors) do
		local complete = motor:step(deltaTime)
		if not complete then
			-- If any of the sub-motors are incomplete, the group motor will not be complete either
			allMotorsComplete = false
		end
	end

	self._onStep:fire(self:getValue())

	if allMotorsComplete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._complete = true
		self._onComplete:fire()
	end

	return allMotorsComplete
end

function GroupMotor:setGoal(goals)
	assert(not goals.step, "goals contains disallowed property \"step\". Did you mean to put a table of goals here?")

	self._complete = false
	self._onStart:fire()

	for key, goal in pairs(goals) do
		local motor = assert(self._motors[key], ("Unknown motor for key %s"):format(key))
		motor:setGoal(goal)
	end

	if self._useImplicitConnections then
		self:start()
	end
end

function GroupMotor:getValue()
	local values = {}

	for key, motor in pairs(self._motors) do
		values[key] = motor:getValue()
	end

	return values
end

function GroupMotor:__tostring()
	return "Motor(Group)"
end

return GroupMotor
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273b8</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX8A39442DD6F74796A953C912885423F1">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">GroupMotor.spec</string>
						<string name="ScriptGuid">{485D4F58-9EA8-4B3D-8063-F9FC207B627C}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local GroupMotor = require(script.Parent.GroupMotor)

	local Instant = require(script.Parent.Instant)
	local Spring = require(script.Parent.Spring)

	it("should complete when all child motors are complete", function()
		local motor = GroupMotor.new({
			A = 1,
			B = 2,
		}, false)

		expect(motor._complete).to.equal(true)

		motor:setGoal({
			A = Instant.new(3),
			B = Spring.new(4, { frequency = 7.5, dampingRatio = 1 })
		})

		expect(motor._complete).to.equal(false)

		motor:step(1/60)

		expect(motor._complete).to.equal(false)

		for _ = 1, 0.5 * 60 do
			motor:step(1/60)
		end

		expect(motor._complete).to.equal(true)
	end)

	it("should start when the goal is set", function()
		local motor = GroupMotor.new({
			A = 0,
		}, false)

		local bool = false
		motor:onStart(function()
			bool = not bool
		end)

		motor:setGoal({
			A = Instant.new(1)
		})

		expect(bool).to.equal(true)

		motor:setGoal({
			A = Instant.new(1)
		})

		expect(bool).to.equal(false)
	end)

	it("should properly return all values", function()
		local motor = GroupMotor.new({
			A = 1,
			B = 2,
		}, false)

		local value = motor:getValue()

		expect(value.A).to.equal(1)
		expect(value.B).to.equal(2)
	end)

	it("should error when a goal is given to GroupMotor.new", function()
		local success = pcall(function()
			GroupMotor.new(Instant.new(0))
		end)

		expect(success).to.equal(false)
	end)

	it("should error when a single goal is provided to GroupMotor:step", function()
		local success = pcall(function()
			GroupMotor.new({ a = 1 }):setGoal(Instant.new(0))
		end)

		expect(success).to.equal(false)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273b9</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX18C5721B6B8F4AD7841A8FFA1A9A7C21">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Instant</string>
						<string name="ScriptGuid">{8A334C8B-D59A-40AF-B435-63AC2CE6A92D}</string>
						<ProtectedString name="Source"><![CDATA[local Instant = {}
Instant.__index = Instant

function Instant.new(targetValue)
	return setmetatable({
		_targetValue = targetValue,
	}, Instant)
end

function Instant:step()
	return {
		complete = true,
		value = self._targetValue,
	}
end

return Instant]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273ba</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX329254C65CB5428CABA07720A944658B">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Instant.spec</string>
						<string name="ScriptGuid">{D5AD29C8-37D7-4076-9100-2C93D575B5CF}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Instant = require(script.Parent.Instant)

	it("should return a completed state with the provided value", function()
		local goal = Instant.new(1.23)
		local state = goal:step(0.1, { value = 0, complete = false })
		expect(state.complete).to.equal(true)
		expect(state.value).to.equal(1.23)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273bb</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXD956B82610884DB3901728E7C7499670">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Linear</string>
						<string name="ScriptGuid">{D105B7D1-19F2-4762-9D52-70CA6B9F0468}</string>
						<ProtectedString name="Source"><![CDATA[local Linear = {}
Linear.__index = Linear

function Linear.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_velocity = options.velocity or 1,
	}, Linear)
end

function Linear:step(state, dt)
	local position = state.value
	local velocity = self._velocity -- Linear motion ignores the state's velocity
	local goal = self._targetValue

	local dPos = dt * velocity

	local complete = dPos >= math.abs(goal - position)
	position = position + dPos * (goal > position and 1 or -1)
	if complete then
		position = self._targetValue
		velocity = 0
	end
	
	return {
		complete = complete,
		value = position,
		velocity = velocity,
	}
end

return Linear]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273bc</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB6BD04F457F3434C9F68B64FD601BFB2">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Linear.spec</string>
						<string name="ScriptGuid">{5CB3ADD4-D3E3-4824-8E05-58ECEBB79D64}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Linear = require(script.Parent.Linear)

	describe("completed state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Linear.new(1, { velocity = 1 })
		motor:setGoal(goal)
	
		for _ = 1, 60 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(1)
		end)
	end)

	describe("uncompleted state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Linear.new(1, { velocity = 1 })
		motor:setGoal(goal)
	
		for _ = 1, 59 do
			motor:step(1/60)
		end
		
		it("should be uncomplete", function()
			expect(motor._state.complete).to.equal(false)
		end)
	end)

	describe("negative velocity", function()
		local motor = SingleMotor.new(1, false)

		local goal = Linear.new(0, { velocity = 1 })
		motor:setGoal(goal)
		
		for _ = 1, 60 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(0)
		end)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273bd</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXFADB1A1579C64CCEAB2AE96583BB1DB5">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal</string>
						<string name="ScriptGuid">{61BAAF35-00CE-4FCF-9B46-F430A52ACC78}</string>
						<ProtectedString name="Source"><![CDATA[local Connection = {}
Connection.__index = Connection

function Connection.new(signal, handler)
	return setmetatable({
		signal = signal,
		connected = true,
		_handler = handler,
	}, Connection)
end

function Connection:disconnect()
	if self.connected then
		self.connected = false

		for index, connection in pairs(self.signal._connections) do
			if connection == self then
				table.remove(self.signal._connections, index)
				return
			end
		end
	end
end

local Signal = {}
Signal.__index = Signal

function Signal.new()
	return setmetatable({
		_connections = {},
		_threads = {},
	}, Signal)
end

function Signal:fire(...)
	for _, connection in pairs(self._connections) do
		connection._handler(...)
	end

	for _, thread in pairs(self._threads) do
		coroutine.resume(thread, ...)
	end
	
	self._threads = {}
end

function Signal:connect(handler)
	local connection = Connection.new(self, handler)
	table.insert(self._connections, connection)
	return connection
end

function Signal:wait()
	table.insert(self._threads, coroutine.running())
	return coroutine.yield()
end

return Signal]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273be</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX3914F74AB52740F29C19D7A48336C681">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Signal.spec</string>
						<string name="ScriptGuid">{770258E4-1B6F-4119-9616-EB31F922F4EB}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local Signal = require(script.Parent.Signal)

	it("should invoke all connections, instantly", function()
		local signal = Signal.new()

		local a, b

		signal:connect(function(value)
			a = value
		end)

		signal:connect(function(value)
			b = value
		end)

		signal:fire("hello")

		expect(a).to.equal("hello")
		expect(b).to.equal("hello")
	end)

	it("should return values when :wait() is called", function()
		local signal = Signal.new()

		spawn(function()
			signal:fire(123, "hello")
		end)

		local a, b = signal:wait()
		
		expect(a).to.equal(123)
		expect(b).to.equal("hello")
	end)

	it("should properly handle disconnections", function()
		local signal = Signal.new()

		local didRun = false

		local connection = signal:connect(function()
			didRun = true
		end)
		connection:disconnect()

		signal:fire()
		expect(didRun).to.equal(false)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273bf</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX6D5727D6BEC04DBDA2040283A294105D">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleMotor</string>
						<string name="ScriptGuid">{2E740F36-9196-4EE7-BEAC-998A3A13F27B}</string>
						<ProtectedString name="Source"><![CDATA[local BaseMotor = require(script.Parent.BaseMotor)

local SingleMotor = setmetatable({}, BaseMotor)
SingleMotor.__index = SingleMotor

function SingleMotor.new(initialValue, useImplicitConnections)
	assert(initialValue, "Missing argument #1: initialValue")
	assert(typeof(initialValue) == "number", "initialValue must be a number!")

	local self = setmetatable(BaseMotor.new(), SingleMotor)

	if useImplicitConnections ~= nil then
		self._useImplicitConnections = useImplicitConnections
	else
		self._useImplicitConnections = true
	end

	self._goal = nil
	self._state = {
		complete = true,
		value = initialValue,
	}

	return self
end

function SingleMotor:step(deltaTime)
	if self._state.complete then
		return true
	end

	local newState = self._goal:step(self._state, deltaTime)

	self._state = newState
	self._onStep:fire(newState.value)

	if newState.complete then
		if self._useImplicitConnections then
			self:stop()
		end

		self._onComplete:fire()
	end

	return newState.complete
end

function SingleMotor:getValue()
	return self._state.value
end

function SingleMotor:setGoal(goal)
	self._state.complete = false
	self._goal = goal

	self._onStart:fire()

	if self._useImplicitConnections then
		self:start()
	end
end

function SingleMotor:__tostring()
	return "Motor(Single)"
end

return SingleMotor
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c0</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX2DED1F268C0E4ED7A741EEE8CB0B456E">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">SingleMotor.spec</string>
						<string name="ScriptGuid">{AEE1BC67-A02C-49BA-A472-0F2E752D395C}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Instant = require(script.Parent.Instant)

	it("should assign new state on step", function()
		local motor = SingleMotor.new(0, false)

		motor:setGoal(Instant.new(5))
		motor:step(1/60)

		expect(motor._state.complete).to.equal(true)
		expect(motor._state.value).to.equal(5)
	end)

	it("should invoke onComplete listeners when the goal is completed", function()
		local motor = SingleMotor.new(0, false)

		local didComplete = false
		motor:onComplete(function()
			didComplete = true
		end)

		motor:setGoal(Instant.new(5))
		motor:step(1/60)

		expect(didComplete).to.equal(true)
	end)

	it("should start when the goal is set", function()
		local motor = SingleMotor.new(0, false)

		local bool = false
		motor:onStart(function()
			bool = not bool
		end)

		motor:setGoal(Instant.new(5))

		expect(bool).to.equal(true)

		motor:setGoal(Instant.new(5))

		expect(bool).to.equal(false)
	end)
end
]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c1</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX01F0909EE827427CA3305E20D58F05DD">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Spring</string>
						<string name="ScriptGuid">{DDA4D77A-3039-4907-A244-E97A218B161F}</string>
						<ProtectedString name="Source"><![CDATA[local VELOCITY_THRESHOLD = 0.001
local POSITION_THRESHOLD = 0.001

local EPS = 0.0001

local Spring = {}
Spring.__index = Spring

function Spring.new(targetValue, options)
	assert(targetValue, "Missing argument #1: targetValue")
	options = options or {}

	return setmetatable({
		_targetValue = targetValue,
		_frequency = options.frequency or 4,
		_dampingRatio = options.dampingRatio or 1,
	}, Spring)
end

function Spring:step(state, dt)
	-- Copyright 2018 Parker Stebbins (parker@fractality.io)
	-- github.com/Fraktality/Spring
	-- Distributed under the MIT license

	local d = self._dampingRatio
	local f = self._frequency*2*math.pi
	local g = self._targetValue
	local p0 = state.value
	local v0 = state.velocity or 0

	local offset = p0 - g
	local decay = math.exp(-d*f*dt)

	local p1, v1

	if d == 1 then -- Critically damped
		p1 = (offset*(1 + f*dt) + v0*dt)*decay + g
		v1 = (v0*(1 - f*dt) - offset*(f*f*dt))*decay
	elseif d < 1 then -- Underdamped
		local c = math.sqrt(1 - d*d)

		local i = math.cos(f*c*dt)
		local j = math.sin(f*c*dt)

		-- Damping ratios approaching 1 can cause division by small numbers.
		-- To fix that, group terms around z=j/c and find an approximation for z.
		-- Start with the definition of z:
		--    z = sin(dt*f*c)/c
		-- Substitute a=dt*f:
		--    z = sin(a*c)/c
		-- Take the Maclaurin expansion of z with respect to c:
		--    z = a - (a^3*c^2)/6 + (a^5*c^4)/120 + O(c^6)
		--    z ≈ a - (a^3*c^2)/6 + (a^5*c^4)/120
		-- Rewrite in Horner form:
		--    z ≈ a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6

		local z
		if c > EPS then
			z = j/c
		else
			local a = dt*f
			z = a + ((a*a)*(c*c)*(c*c)/20 - c*c)*(a*a*a)/6
		end

		-- Frequencies approaching 0 present a similar problem.
		-- We want an approximation for y as f approaches 0, where:
		--    y = sin(dt*f*c)/(f*c)
		-- Substitute b=dt*c:
		--    y = sin(b*c)/b
		-- Now reapply the process from z.

		local y
		if f*c > EPS then
			y = j/(f*c)
		else
			local b = f*c
			y = dt + ((dt*dt)*(b*b)*(b*b)/20 - b*b)*(dt*dt*dt)/6
		end

		p1 = (offset*(i + d*z) + v0*y)*decay + g
		v1 = (v0*(i - z*d) - offset*(z*f))*decay

	else -- Overdamped
		local c = math.sqrt(d*d - 1)

		local r1 = -f*(d - c)
		local r2 = -f*(d + c)

		local co2 = (v0 - offset*r1)/(2*f*c)
		local co1 = offset - co2

		local e1 = co1*math.exp(r1*dt)
		local e2 = co2*math.exp(r2*dt)

		p1 = e1 + e2 + g
		v1 = e1*r1 + e2*r2
	end

	local complete = math.abs(v1) < VELOCITY_THRESHOLD and math.abs(p1 - g) < POSITION_THRESHOLD
	
	return {
		complete = complete,
		value = complete and g or p1,
		velocity = v1,
	}
end

return Spring]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c2</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBXB6D1985382B140349490F283EE497AE4">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">Spring.spec</string>
						<string name="ScriptGuid">{1B59CFF0-567C-4280-A718-7FFBA87E0AAA}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local SingleMotor = require(script.Parent.SingleMotor)
	local Spring = require(script.Parent.Spring)

	describe("completed state", function()
		local motor = SingleMotor.new(0, false)

		local goal = Spring.new(1, { frequency = 2, dampingRatio = 0.75 })
		motor:setGoal(goal)
	
		for _ = 1, 100 do
			motor:step(1/60)
		end
		
		it("should complete", function()
			expect(motor._state.complete).to.equal(true)
		end)

		it("should be exactly the goal value when completed", function()
			expect(motor._state.value).to.equal(1)
		end)
	end)

	it("should inherit velocity", function()
		local motor = SingleMotor.new(0, false)
		motor._state = { complete = false, value = 0, velocity = -5 }

		local goal = Spring.new(1, { frequency = 2, dampingRatio = 1 })

		motor:setGoal(goal)
		motor:step(1/60)

		expect(motor._state.velocity < 0).to.equal(true)
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c3</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX9CAB35CB308D47878D34352E42112424">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">isMotor</string>
						<string name="ScriptGuid">{757154D1-4024-4799-8CD5-B1B522D46B83}</string>
						<ProtectedString name="Source"><![CDATA[local function isMotor(value)
	local motorType = tostring(value):match("^Motor%((.+)%)$")

	if motorType then
		return true, motorType
	else
		return false
	end
end

return isMotor]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c4</UniqueId>
					</Properties>
				</Item>
				<Item class="ModuleScript" referent="RBX385B3D6AB49740918911420B3E0D3540">
					<Properties>
						<BinaryString name="AttributesSerialize"></BinaryString>
						<Content name="LinkedSource"><null></null></Content>
						<string name="Name">isMotor.spec</string>
						<string name="ScriptGuid">{57FA525B-0B3E-4822-A4C9-39FD64AF3D78}</string>
						<ProtectedString name="Source"><![CDATA[return function()
	local isMotor = require(script.Parent.isMotor)

	local SingleMotor = require(script.Parent.SingleMotor)
	local GroupMotor = require(script.Parent.GroupMotor)

	local singleMotor = SingleMotor.new(0)
	local groupMotor = GroupMotor.new({})

	it("should properly detect motors", function()
		expect(isMotor(singleMotor)).to.equal(true)
		expect(isMotor(groupMotor)).to.equal(true)
	end)

	it("shouldn't detect things that aren't motors", function()
		expect(isMotor({})).to.equal(false)
	end)

	it("should return the proper motor type", function()
		local _, singleMotorType = isMotor(singleMotor)
		local _, groupMotorType = isMotor(groupMotor)

		expect(singleMotorType).to.equal("Single")
		expect(groupMotorType).to.equal("Group")
	end)
end]]></ProtectedString>
						<int64 name="SourceAssetId">-1</int64>
						<BinaryString name="Tags"></BinaryString>
						<UniqueId name="UniqueId">242448fd65cee6e3020c3c00000273c5</UniqueId>
					</Properties>
				</Item>
			</Item>
		</Item>
	</Item>
	<Item class="LuaWebService" referent="RBX585E9627D5D44F0A89F24757ADAA98F2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a121</UniqueId>
		</Properties>
	</Item>
	<Item class="ProcessInstancePhysicsService" referent="RBXCE7CAA81695941F2AFFF59709BB0EF73">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">ProcessInstancePhysicsService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a124</UniqueId>
		</Properties>
	</Item>
	<Item class="LanguageService" referent="RBX857E23F3A48B444C8F3286800019FCEE">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">LanguageService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a12d</UniqueId>
		</Properties>
	</Item>
	<Item class="Lighting" referent="0">
		<Properties>
			<Color3 name="Ambient">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<float name="Brightness">2</float>
			<Color3 name="ColorShift_Bottom">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<Color3 name="ColorShift_Top">
				<R>0</R>
				<G>0</G>
				<B>0</B>
			</Color3>
			<float name="EnvironmentDiffuseScale">0</float>
			<float name="EnvironmentSpecularScale">0</float>
			<float name="ExposureCompensation">0</float>
			<Color3 name="FogColor">
				<R>0.75</R>
				<G>0.75</G>
				<B>0.75</B>
			</Color3>
			<float name="FogEnd">100000</float>
			<float name="FogStart">0</float>
			<float name="GeographicLatitude">41.7332993</float>
			<bool name="GlobalShadows">true</bool>
			<string name="Name">Lighting</string>
			<Color3 name="OutdoorAmbient">
				<R>0.5</R>
				<G>0.5</G>
				<B>0.5</B>
			</Color3>
			<bool name="Outlines">false</bool>
			<float name="ShadowSoftness">0.5</float>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<token name="Technology">1</token>
			<string name="TimeOfDay">14:00:00</string>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a151</UniqueId>
		</Properties>
	</Item>
	<Item class="LodDataService" referent="RBX392B44A0A5464C3E906E637CF928792F">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<string name="Name">Instance</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b90001a153</UniqueId>
		</Properties>
	</Item>
	<Item class="HttpService" referent="RBXBB29DB3B75D34074968B026371C7BDD2">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="HttpEnabled">false</bool>
			<string name="Name">HttpService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b900020a9d</UniqueId>
		</Properties>
	</Item>
	<Item class="ProximityPromptService" referent="RBXE406872BA5124BE387914D5C7EE0D59D">
		<Properties>
			<BinaryString name="AttributesSerialize"></BinaryString>
			<bool name="Enabled">true</bool>
			<int name="MaxPromptsVisible">16</int>
			<string name="Name">ProximityPromptService</string>
			<int64 name="SourceAssetId">-1</int64>
			<BinaryString name="Tags"></BinaryString>
			<UniqueId name="UniqueId">13c0f9da2de349530205c3b900023050</UniqueId>
		</Properties>
	</Item>
	<SharedStrings>
		<SharedString md5="DAijy18UHOckKR7wFs8WPw==">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
uVo9fqchP7i9yb/ks249aiAWPzeZxL8A4Ps5fPonPyhAzL8A4Ps5lEopPzORzL8A4Ps53qIq
P2PWzL8A4Ps52WMtPwNLzb8A4Ps54nIlP0yKy7/eAAAAAAAAAAEAAAACAAAAAAAAAAIAAAAD
AAAAAAAAAAMAAAAGAAAAAAAAAAYAAAANAAAAAAAAAA0AAAATAAAAAAAAABMAAAAbAAAAAAAA
ABsAAAAlAAAAAAAAACUAAAAkAAAAAAAAACQAAAAjAAAAAAAAACMAAAAiAAAAAAAAACIAAAAm
AAAAAAAAACYAAAAcAAAAAAAAABwAAAAUAAAAAAAAABQAAAALAAAAAAAAAAsAAAAEAAAAAAAA
AAQAAAAMAAAAAAAAAAwAAAAOAAAAAAAAAA4AAAAHAAAAAAAAAAcAAAAFAAAAAAAAAAUAAAAB
AAAAAQAAAAUAAAACAAAAAgAAAAYAAAADAAAAAgAAAAUAAAAHAAAAAgAAAAcAAAAIAAAAAgAA
AAgAAAAJAAAAAgAAAAkAAAAKAAAAAgAAAAoAAAAGAAAABAAAAAsAAAAMAAAABgAAAAoAAAAN
AAAABwAAAA4AAAAIAAAACAAAAA4AAAAMAAAACAAAAAwAAAAJAAAACQAAAAwAAAAPAAAACQAA
AA8AAAAQAAAACQAAABAAAAARAAAACQAAABEAAAAKAAAACgAAABEAAAASAAAACgAAABIAAAAT
AAAACgAAABMAAAANAAAACwAAABQAAAAeAAAACwAAAB4AAAAhAAAACwAAACEAAAAfAAAACwAA
AB8AAAAVAAAACwAAABUAAAAMAAAADAAAABUAAAAWAAAADAAAABYAAAAPAAAADwAAABYAAAAQ
AAAAEAAAABYAAAAXAAAAEAAAABcAAAAYAAAAEAAAABgAAAARAAAAEQAAABkAAAAaAAAAEQAA
ABoAAAASAAAAEQAAABgAAAAZAAAAEgAAABoAAAAbAAAAEgAAABsAAAATAAAAFAAAABwAAAAd
AAAAFAAAAB0AAAAeAAAAFQAAAB8AAAAXAAAAFQAAABcAAAAWAAAAFwAAACAAAAAYAAAAFwAA
AB8AAAAhAAAAFwAAACEAAAAgAAAAGAAAACAAAAAiAAAAGAAAACIAAAAjAAAAGAAAACMAAAAk
AAAAGAAAACQAAAAZAAAAGQAAACQAAAAlAAAAGQAAACUAAAAaAAAAGgAAACUAAAAbAAAAHAAA
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
AAAADgAAABcAAAAPAAAADwAAABcAAAAhAAAADwAAACEAAAAYAAAADwAAABgAAAAZAAAADwAA
ABkAAAAQAAAAEAAAABkAAAAaAAAAEAAAABoAAAASAAAAEgAAABoAAAATAAAAEwAAABoAAAAb
AAAAEwAAABsAAAAcAAAAEwAAABwAAAAdAAAAEwAAAB0AAAAUAAAAFAAAAB0AAAAeAAAAFgAA
AB8AAAAgAAAAGAAAACIAAAAZAAAAGAAAACEAAAAjAAAAGAAAACMAAAAkAAAAGAAAACQAAAAi
AAAAGQAAACIAAAAaAAAAGgAAACIAAAAlAAAAGgAAACUAAAAmAAAAGgAAACYAAAAbAAAAGwAA
ACYAAAAcAAAAHAAAACYAAAAnAAAAHAAAACcAAAAoAAAAHAAAACgAAAApAAAAHAAAACkAAAAe
AAAAHAAAAB4AAAAdAAAAHwAAACgAAAAqAAAAHwAAACoAAAAgAAAAIAAAACoAAAAkAAAAIAAA
ACQAAAArAAAAIgAAACQAAAAlAAAAIwAAACwAAAAkAAAAJAAAAC0AAAAuAAAAJAAAAC4AAAAr
AAAAJAAAACoAAAAvAAAAJAAAAC8AAAAnAAAAJAAAACcAAAAmAAAAJAAAACYAAAAlAAAAJAAA
ACwAAAAtAAAAJwAAAC8AAAAoAAAAKAAAAC8AAAAqAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQ
AAAAAAAAAAAAAAAAAAAAAACAP1QAAAAEAAAAAAAAAB1XpD+/ToI/MYULP3xnhD+/ToI/AAAA
AM3Ssz8fVaU/AAAAAEfV1j+/ToI/MYULPz0Fnj/JCbw/AAAAABWsuD+iS7A/MYULP/AEwD+/
ToI/AAAAAOke1z+q84I/nGIGPb/r1T+/ToI/MYULP1h3pT81abs/AAAAABUcwD83E7A/MYUL
P1ZYwj/Mi4c/8n7bPnbmyj+/ToI/AAAAAHg+1z+NOoM/JGQ6PUiR1T+/ToI/MYULP5OXpj+d
ULs/p26fPl7auD8GRrM/AAAAAJTz0T9zKKg/MYULPy8nxD9IoIs/8IXbPitAzT9/oYc/AAAA
AH5a2D8uXKI/MYULP1OHqj8Lk7k/Fze+PvXUyT9Kuas/AAAAAFR80j8+6qc/MYULP/Sowz8K
up8/1+fJPkQozz+KZqY/MYULP15BvD/as7E/MYULPzddwz8EmKs/nAAAAAAAAAABAAAAAgAA
AAAAAAACAAAABQAAAAAAAAAFAAAACgAAAAAAAAAKAAAAEQAAAAAAAAARAAAAFwAAAAAAAAAX
AAAAFAAAAAAAAAAUAAAADQAAAAAAAAANAAAABwAAAAAAAAAHAAAAAwAAAAAAAAADAAAACAAA
AAAAAAAIAAAADgAAAAAAAAAOAAAADAAAAAAAAAAMAAAABgAAAAAAAAAGAAAAAQAAAAEAAAAE
AAAABQAAAAEAAAAFAAAAAgAAAAEAAAAGAAAACwAAAAEAAAALAAAAEgAAAAEAAAASAAAAGAAA
AAEAAAAYAAAAGwAAAAEAAAAbAAAAGgAAAAEAAAAaAAAAFQAAAAEAAAAVAAAADwAAAAEAAAAP
AAAACQAAAAEAAAAJAAAABAAAAAMAAAAHAAAACAAAAAQAAAAJAAAACgAAAAQAAAAKAAAABQAA
AAYAAAAMAAAACwAAAAcAAAANAAAACAAAAAgAAAANAAAADgAAAAkAAAAPAAAACgAAAAoAAAAP
AAAAEAAAAAoAAAAQAAAAEQAAAAsAAAAMAAAAEgAAAAwAAAAOAAAADQAAAAwAAAANAAAAEwAA
AAwAAAATAAAAEgAAAA0AAAAUAAAAEwAAAA8AAAAVAAAAEAAAABAAAAAVAAAAFgAAABAAAAAW
AAAAEQAAABEAAAAWAAAAFwAAABIAAAATAAAAGAAAABMAAAAZAAAAGAAAABMAAAAUAAAAGQAA
ABQAAAAXAAAAFgAAABQAAAAWAAAAGQAAABUAAAAaAAAAFgAAABYAAAAaAAAAGQAAABgAAAAZ
AAAAGwAAABkAAAAaAAAAGwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAA
AAAAgD9UAAAABAAAAHrhDb98U4U/wU6CPwAAAACUV6Q/wU6CPwAAAABe07M/uVWlPwAAAACo
rLg/CUywP3rhDb+Hwp4/a7W7P3rhDb+658A/wU6CPwAAAACz1dY/wU6CPwAAAABHG8A/8BOw
P3rhDb9N7KU/ghu7P3rhDb/h48Q/EU+LP/oR5b5TQM0/6qCHP94K5b5p5co/wU6CP2AaD7xJ
FNc/wU6CPwAAAAC4Htc/K/SCP+DEGbybU8A/fPuvP3rhDb8hU6c/Tv26PwAAAADBfdI/8umn
P3rhDb+aG8Q/q0SrP65u075/KM8/BGemP+DEGbwmlNg/60KiP+DEGbxWdtc/oyODP+DEGbx2
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
Poo/0lCCP8wAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAA
AAwAAAAAAAAADAAAABIAAAAAAAAAEgAAABsAAAAAAAAAGwAAACIAAAAAAAAAIgAAABwAAAAA
AAAAHAAAABMAAAAAAAAAEwAAAA0AAAAAAAAADQAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAA
AAYAAAABAAAABgAAAAIAAAACAAAABgAAAAcAAAACAAAABwAAAAMAAAADAAAACAAAAAQAAAAD
AAAABwAAAAkAAAADAAAACQAAAAoAAAADAAAACgAAABAAAAADAAAAEAAAABUAAAADAAAAFQAA
AB4AAAADAAAAHgAAAB8AAAADAAAAHwAAABcAAAADAAAAFwAAABEAAAADAAAAEQAAAAsAAAAD
AAAACwAAAAgAAAAEAAAACwAAAAwAAAAEAAAACAAAAAsAAAAFAAAADQAAAA4AAAAFAAAADgAA
AAYAAAAGAAAADgAAAA8AAAAGAAAADwAAAAkAAAAGAAAACQAAAAcAAAAJAAAADwAAABAAAAAJ
AAAAEAAAAAoAAAALAAAAEQAAABgAAAALAAAAGAAAACAAAAALAAAAIAAAACMAAAALAAAAIwAA
ACEAAAALAAAAIQAAABkAAAALAAAAGQAAABIAAAALAAAAEgAAAAwAAAANAAAAEwAAAA4AAAAO
AAAAEwAAABQAAAAOAAAAFAAAAA8AAAAPAAAAFQAAABAAAAAPAAAAFAAAABYAAAAPAAAAFgAA
ABUAAAARAAAAFwAAABgAAAASAAAAGQAAABoAAAASAAAAGgAAABsAAAATAAAAHAAAABQAAAAU
AAAAHAAAABoAAAAUAAAAGgAAAB0AAAAUAAAAHQAAABYAAAAVAAAAFgAAAB4AAAAWAAAAHQAA
ABgAAAAWAAAAGAAAAB4AAAAXAAAAHwAAABgAAAAYAAAAHwAAAB4AAAAYAAAAHQAAACAAAAAZ
AAAAIQAAAB0AAAAZAAAAHQAAABoAAAAaAAAAHAAAACIAAAAaAAAAIgAAABsAAAAdAAAAIQAA
ACMAAAAdAAAAIwAAACAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAA
AIA/PAAAAAQAAAAWv+u+AHCcuORAyz8AAICyn6YxvuRAyz8uvvq+AHCcuKcBxT/lt/q+XRfX
vuRAyz8AAICy9FXPvo6Ehz/lt/q+XRdXvo6Ehz8AAICySVAIv+RAyz8uvvq+gH8xvqBJkj8u
vvq+KAgNv46Ehz/lt/q+atLcvgQByD+IY+G+dUvsvlO1yT+IY+G+RYvpvuRAyz8AAICy6ipD
v46Ehz+g7bq7248Iv+RAyz8l/oa+WhdDv46Ehz/+JZS+oFr6vuRAyz/QJxm8FrIIv+RAyz/Q
Jxm86ipDv46Ehz9sAkS+BiZDv46Ehz9TIRW+RBkDv+RAyz9sAAAAAAAAAAEAAAACAAAAAAAA
AAIAAAADAAAAAAAAAAMAAAALAAAAAAAAAAsAAAAPAAAAAAAAAA8AAAATAAAAAAAAABMAAAAQ
AAAAAAAAABAAAAANAAAAAAAAAA0AAAAGAAAAAAAAAAYAAAABAAAAAQAAAAQAAAAFAAAAAQAA
AAUAAAACAAAAAQAAAAYAAAAMAAAAAQAAAAwAAAAEAAAAAgAAAAUAAAAHAAAAAgAAAAcAAAAI
AAAAAgAAAAgAAAADAAAAAwAAAAkAAAAKAAAAAwAAAAoAAAALAAAAAwAAAAgAAAAJAAAABAAA
AAwAAAARAAAABAAAABEAAAASAAAABAAAABIAAAAOAAAABAAAAA4AAAAIAAAABAAAAAgAAAAF
AAAABQAAAAgAAAAHAAAABgAAAA0AAAAMAAAACAAAAA4AAAAJAAAACQAAAA4AAAAKAAAACgAA
AA4AAAALAAAACwAAAA4AAAAPAAAADAAAAA0AAAAQAAAADAAAABAAAAARAAAADgAAABIAAAAQ
AAAADgAAABAAAAATAAAADgAAABMAAAAPAAAAEAAAABIAAAARAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP4EAAAAEAAAAqdUav0grXj++KnK/1K4av6U0aT+x
UGu/oA8av8Itaz/uBW6/sC4av/ygXz9dLXW/eOAXv0YUUT/+mnW/TmTevvISTz8MrAC/jBYX
v4rjeT+xmFu/smsWv64qfD/+Bl6/tfXyvs3XnD+mcUK/WC/jvgQ9oT+CO0S/6tzRvlhypD+U
REe/HOe+vs4rpj+pCEu/X+MYvhHrlz8MrIC/Au2AvvSbiT8MrIC/fPcWv0KHUT+n13i/x6EV
v/ISTz9aYHi/5MgWv/ISTz9DOnW/G0oNv/qDij/KjEa/Z5ESv46ugz/NI0+/gEYZvPISTz8Z
WRG/gEYZvK1nVj8MrAC/Au2Avv7lpT8MrAC/bEgHvxImkT+UX0G/uwESv+aihD+24lG/B+kM
v5A0iz/Cokm/tR0Hv/OUkT/ppUS/iKcAv4+Klz8za0K/UjvyvvbdnD8xGz+/Z+HhvjFqoT+5
7kC/avvPvja6pD8kC0S/X+MYvjY5tD8MrAC/gEYZvBR4uT8MrAC/tbW0vhZdpj87Fk2/gEYZ
vO8pnT8MrIC/8CCUvrsTbD8MrIC/peaFvvISTz8MrIC/AOD7OfISTz+2AhO/AOD7OZQkVz8M
rAC/WowAv1Vblz++FD+/gNk9u3s6uT8MrAC/AOD7OXvLnD8MrIC/AOD7OfISTz+N+zu/AOD7
OaEZuT8MrAC/9gAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAE
AAAABQAAAAAAAAAFAAAAAQAAAAEAAAAFAAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAAAgAA
AAIAAAAHAAAACAAAAAIAAAAIAAAACQAAAAIAAAAJAAAACgAAAAIAAAAKAAAACwAAAAIAAAAL
AAAADAAAAAIAAAAMAAAAAwAAAAMAAAAMAAAADQAAAAMAAAANAAAADgAAAAMAAAAOAAAABAAA
AAQAAAAOAAAADwAAAAQAAAAPAAAAEAAAAAQAAAAQAAAABQAAAAUAAAARAAAAEgAAAAUAAAAS
AAAABgAAAAUAAAAQAAAADwAAAAUAAAAPAAAAIwAAAAUAAAAjAAAAKQAAAAUAAAApAAAAJAAA
AAUAAAAkAAAAEwAAAAUAAAATAAAAFAAAAAUAAAAUAAAAJQAAAAUAAAAlAAAAKgAAAAUAAAAq
AAAAJwAAAAUAAAAnAAAAHwAAAAUAAAAfAAAAHgAAAAUAAAAeAAAAFQAAAAUAAAAVAAAAFgAA
AAUAAAAWAAAAEQAAAAYAAAASAAAABwAAAAcAAAASAAAAFwAAAAcAAAAXAAAAGAAAAAcAAAAY
AAAAGQAAAAcAAAAZAAAAGgAAAAcAAAAaAAAACAAAAAgAAAAaAAAAGwAAAAgAAAAbAAAACQAA
AAkAAAAbAAAAHAAAAAkAAAAcAAAACgAAAAoAAAAcAAAAHQAAAAoAAAAdAAAAHgAAAAoAAAAe
AAAACwAAAAsAAAAeAAAAHwAAAAsAAAAfAAAAIAAAAAsAAAAgAAAADAAAAAwAAAAgAAAAIQAA
AAwAAAAhAAAAKAAAAAwAAAAoAAAAIwAAAAwAAAAjAAAAIgAAAAwAAAAiAAAADQAAAA0AAAAi
AAAADgAAAA4AAAAjAAAADwAAAA4AAAAiAAAAIwAAABEAAAAYAAAAFwAAABEAAAAXAAAAEgAA
ABEAAAAWAAAAGAAAABMAAAAkAAAAFAAAABQAAAAkAAAAJQAAABUAAAAeAAAAGwAAABUAAAAb
AAAAJgAAABUAAAAmAAAAFgAAABYAAAAmAAAAGgAAABYAAAAaAAAAGQAAABYAAAAZAAAAGAAA
ABoAAAAmAAAAGwAAABsAAAAeAAAAHAAAABwAAAAeAAAAHQAAAB8AAAAnAAAAIQAAAB8AAAAh
AAAAIAAAACEAAAAnAAAAKAAAACMAAAAoAAAAKQAAACQAAAApAAAAKAAAACQAAAAoAAAAKgAA
ACQAAAAqAAAAJQAAACcAAAAqAAAAKAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAA
AAAAAAAAAAAAgD9mAAAABAAAAFvZUr8olFg/vvXUP0irSL8tt4M/V6fKP73Kbb9ru4o/mH3H
P52VX78olFg/iO/UP6rnTL8olFg/mrDTP3rhDb9jT6c/9v26P9okGr81kKM/XqK8P8WZNr8I
jLA/otm2P8HYe79MTYw/c9PDP/0Ge78olFg/COHUP3SSRL8olFg/7ObRP3rhDb+1vZ4/NbS7
P3rhDb8z/rw/l1+xP3rhDb/SwcA/RyWuP3rhDb/dGsQ/F0arPw5WQb8yX7Q/wjCyP1WTiL+i
rYQ/l5GnP3rhjb8olFg/nEmyP5zhhL8olFg/7ObRPwqkUb+PLLA/s22UP3S9Lb8olFg/0lCC
P3rhDb8oVIU/0lCCP3rhDb9evp0/jXa5P3rhDb/q5MQ/uk+LPzmMiL+s1n0/IoWaPw2VjL8o
lFg/A7eiP9DyK79q6rU/0lCCP9GVUb8LaKo/PmGHPyClh78olFg/0lCCP3rhDb9Y5cA/0lCC
P3rhDb+cOsM/zY6HPwhehr/Ck2Y/0lCCPwYdS79OoaQ/0lCCPySncL8UP4o/0lCCP8AAAAAA
AAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAkAAAAAAAAACQAAABIAAAAAAAAAEgAA
ABEAAAAAAAAAEQAAABkAAAAAAAAAGQAAABwAAAAAAAAAHAAAABQAAAAAAAAAFAAAAAoAAAAA
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
09o/vplRvxRL2L2W4uc/4lNlvwAAAAD+8uE/zBtGvwAAAAC4R/g/NIPhvlaP6b5IRMs/2AAA
AAAAAAABAAAABQAAAAAAAAAFAAAACgAAAAAAAAAKAAAAEwAAAAAAAAATAAAAIwAAAAAAAAAj
AAAAJAAAAAAAAAAkAAAAFgAAAAAAAAAWAAAAFAAAAAAAAAAUAAAACwAAAAAAAAALAAAABgAA
AAAAAAAGAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAACAAAAAAAAAAIAAAADgAAAAAAAAAO
AAAAGgAAAAAAAAAaAAAAGQAAAAAAAAAZAAAAGAAAAAAAAAAYAAAAHAAAAAAAAAAcAAAADwAA
AAAAAAAPAAAACQAAAAAAAAAJAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAABQAAAAIAAAAG
AAAAAwAAAAMAAAAGAAAABwAAAAMAAAAHAAAACAAAAAQAAAAJAAAAEQAAAAQAAAARAAAAHwAA
AAQAAAAfAAAAJQAAAAQAAAAlAAAAIAAAAAQAAAAgAAAAEgAAAAQAAAASAAAACgAAAAQAAAAK
AAAABQAAAAYAAAALAAAADAAAAAYAAAAMAAAABwAAAAcAAAANAAAACAAAAAcAAAAMAAAADQAA
AAgAAAANAAAADgAAAAkAAAAPAAAAEAAAAAkAAAAQAAAAEQAAAAoAAAASAAAAEwAAAAsAAAAU
AAAADAAAAAwAAAAVAAAADQAAAAwAAAAUAAAAFgAAAAwAAAAWAAAAFQAAAA0AAAAXAAAAGAAA
AA0AAAAYAAAAGQAAAA0AAAAZAAAAGgAAAA0AAAAaAAAADgAAAA0AAAAVAAAAGwAAAA0AAAAb
AAAAFwAAAA8AAAAcAAAAEAAAABAAAAAcAAAAHQAAABAAAAAdAAAAHgAAABAAAAAeAAAAHwAA
ABAAAAAfAAAAEQAAABIAAAAgAAAAIQAAABIAAAAhAAAAEwAAABMAAAAhAAAAIgAAABMAAAAi
AAAAIwAAABUAAAAWAAAAJAAAABUAAAAkAAAAIgAAABUAAAAiAAAAGwAAABcAAAAdAAAAHAAA
ABcAAAAcAAAAGAAAABcAAAAbAAAAHQAAABsAAAAiAAAAHgAAABsAAAAeAAAAHQAAAB4AAAAl
AAAAHwAAAB4AAAAiAAAAIQAAAB4AAAAhAAAAJQAAACAAAAAlAAAAIQAAACIAAAAkAAAAIwAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+BAAAABAAAAADg+zm9
Irk/t5QAvwDg+zlP2Jw/R46AvwDg+zlPMVc/t5QAv5XOBT6VPrQ/t5QAv5gj/D5vu6c/trFl
v9eO6D6nvag/B8NgvwDg+zkWuU4/Q9A8v0209z6GnKY/IZBov6vbBD8HGaQ/ImBsv3invj3v
YJk/R46AvyI5eD4WuU4/R46AvwDg+zkWuU4/fNsTvxQA1j4WuU4/t5QAv3Nv/T5jE6c/lz1j
vwU9Sj4I6ao/t5QAvzaJBz9VoqQ/DPdmv4xdBz9xI6U/tJ5pv5XOBT5A+Jc/R46Av7wHED/T
+6A/hMVrv+xiDT/B/58/13Zuv5SniT4US2o/R46Av7hVFT+pTpo/3h9uv1GrHD/lC5M/gLBq
vzhqJz8WuU4/lf1TvyMWKT8WuU4/UR1Ov6xGLD+b+Fo/sO5Ov91mLT9uImw/G81Rv1q9bj5I
7KU/t5QAvyK5Dz8mtqA/pv1ov1q9bj7/p4k/R46Av/dYFz+iRps/Hq1ov+T+Fz+vSJs/xHFr
v6KKij66Lmw/R46AvyBQHz8QDJQ/2Ahov+4BKj9PhIQ/1phcvzA6Jz8sr4M/7WNfv9N3Kj8k
klo/S8VUv0xILT++gVo/6I9Rv7E6Kj8WuU4/+cRQv8FfLj8sm2s/GmtUvwoJKT871IQ/SAFa
vxFtHj9+R5Q/L2Flv3J5Kz9v1mo/nXZXv/YAAAAAAAAAAQAAAAYAAAAAAAAABgAAAAsAAAAA
AAAACwAAAAIAAAAAAAAAAgAAAAwAAAAAAAAADAAAABsAAAAAAAAAGwAAAA4AAAAAAAAADgAA
AAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAAAAQAAAAB
AAAABAAAAAcAAAABAAAABwAAAAgAAAABAAAACAAAAAkAAAABAAAACQAAABEAAAABAAAAEQAA
AB0AAAABAAAAHQAAACAAAAABAAAAIAAAABQAAAABAAAAFAAAAAoAAAABAAAACgAAAAYAAAAC
AAAACwAAAAwAAAADAAAADQAAAAQAAAADAAAADgAAAA8AAAADAAAADwAAAA0AAAAEAAAADQAA
AA8AAAAEAAAADwAAABAAAAAEAAAAEAAAAAgAAAAEAAAACAAAAAcAAAAGAAAACgAAABcAAAAG
AAAAFwAAACYAAAAGAAAAJgAAABgAAAAGAAAAGAAAAAwAAAAGAAAADAAAAAsAAAAIAAAAEQAA
AAkAAAAIAAAAEAAAABIAAAAIAAAAEgAAABMAAAAIAAAAEwAAABEAAAAKAAAAFAAAABUAAAAK
AAAAFQAAABYAAAAKAAAAFgAAABcAAAAMAAAAGAAAABkAAAAMAAAAGQAAABoAAAAMAAAAGgAA
ABsAAAAOAAAAGwAAAA8AAAAPAAAAHAAAABAAAAAPAAAAGwAAABwAAAAQAAAAHAAAABIAAAAR
AAAAEwAAAB0AAAASAAAAHAAAAB4AAAASAAAAHgAAAB8AAAASAAAAHwAAABMAAAATAAAAHwAA
ABUAAAATAAAAFQAAAB0AAAAUAAAAIAAAABUAAAAVAAAAHwAAACEAAAAVAAAAIQAAABYAAAAV
AAAAIAAAAB0AAAAWAAAAIQAAACIAAAAWAAAAIgAAACMAAAAWAAAAIwAAABcAAAAXAAAAIwAA
ACQAAAAXAAAAJAAAACUAAAAXAAAAJQAAACYAAAAYAAAAJgAAABkAAAAZAAAAJgAAACUAAAAZ
AAAAJQAAABoAAAAaAAAAJQAAACcAAAAaAAAAJwAAACgAAAAaAAAAKAAAABsAAAAbAAAAKAAA
ACkAAAAbAAAAKQAAAB4AAAAbAAAAHgAAABwAAAAeAAAAKQAAAB8AAAAfAAAAKQAAACEAAAAh
AAAAKQAAACIAAAAiAAAAKAAAACcAAAAiAAAAJwAAACoAAAAiAAAAKgAAACMAAAAiAAAAKQAA
ACgAAAAjAAAAKgAAACQAAAAkAAAAKgAAACcAAAAkAAAAJwAAACUAAAAQAAAAAAAAAAAAAAAA
AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/NgAAAAQAAABEHRc/r5VwvwAAAADHJ4Y/GD3j
vwAAAAAiF4U/GD3jv5CUBzwiF4U/GD3jv8wX7j5EHRc/GT1jv4J58D0YXik/GT1jvwAAAACf
DJY/GD3jvwAAAAAWmok/GD3jvywPAD8Wmok/GT1jvywPAD/HJ4Y/GT1jvwAAAABEHZc/GD3j
v5CUBzyfDJY/ykJjvwAAAABQmpI/GD3jvywPAD9QmpI/GT1jvywPAD8Nk5Y/GT1jv0DHhjtE
HZc/GD3jv8wX7j5EHZc/GT1jv5CUBzxEHZc/GT1jv8wX7j5gAAAAAAAAAAEAAAACAAAAAAAA
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
AAEAAAAnAAAAKAAAAAEAAAAoAAAAHQAAAAEAAAAdAAAAEgAAAAEAAAASAAAACAAAAAIAAAAL
AAAAAwAAAAMAAAALAAAABAAAAAQAAAALAAAADAAAAAQAAAAMAAAADQAAAAQAAAANAAAADgAA
AAQAAAAOAAAADwAAAAQAAAAPAAAAEAAAAAQAAAAQAAAABQAAAAYAAAARAAAABwAAAAgAAAAS
AAAAEwAAAAgAAAATAAAAFAAAAAgAAAAUAAAAFQAAAAgAAAAVAAAACQAAAAkAAAAVAAAAFgAA
AAkAAAAWAAAACgAAAAoAAAAWAAAAFwAAAAoAAAAXAAAACwAAAAsAAAAXAAAADAAAAAwAAAAX
AAAAGAAAAAwAAAAYAAAADQAAAA0AAAAYAAAAGQAAAA0AAAAZAAAAGgAAAA0AAAAaAAAADgAA
ABEAAAAbAAAAHAAAABIAAAAdAAAAEwAAABMAAAAdAAAAHgAAABMAAAAeAAAAFAAAABQAAAAe
AAAAHwAAABQAAAAfAAAAFQAAABUAAAAfAAAAIAAAABUAAAAgAAAAFgAAABYAAAAgAAAAIQAA
ABYAAAAhAAAAFwAAABcAAAAhAAAAIgAAABcAAAAiAAAAGAAAABgAAAAiAAAAIwAAABgAAAAj
AAAAJAAAABgAAAAkAAAAGQAAABkAAAAkAAAAJQAAABkAAAAlAAAAIwAAABkAAAAjAAAALAAA
ABkAAAAsAAAAJwAAABkAAAAnAAAAHAAAABkAAAAcAAAAGwAAABkAAAAbAAAAJgAAABkAAAAm
AAAAGgAAAB0AAAAoAAAAKQAAAB0AAAApAAAAHgAAAB4AAAApAAAAHwAAAB8AAAApAAAAKgAA
AB8AAAAqAAAAIAAAACAAAAAqAAAAKwAAACAAAAArAAAAIQAAACEAAAArAAAAJwAAACEAAAAn
AAAALAAAACEAAAAsAAAAIgAAACIAAAAsAAAAIwAAACMAAAAlAAAAJAAAACcAAAAqAAAAKQAA
ACcAAAApAAAAKAAAACcAAAArAAAAKgAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAA
AAAAAAAAAAAAgD8qAAAABAAAAPxpLj8AAAAAY25nP/xpLj9QT0s9v06CP/0RKT8AAAAAcm57
P6CcJj8AAAAAv06CPwAAAAByTlU/AMDQOPxpLj+ioLc+AMDQOPxpLj9EpE8/v06CP+idIj/i
5mI/v06CPwAAAADi5mI/QFT2PQweET6Sa00/AAAAtPxpLj/i5mI/7H1CPqL4Cj+qxRU/AMDQ
ODqp5T5C8mI/AEMGP3VclD5iM0U/AMDQOEgAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAMAAAAA
AAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAoAAAAAAAAACgAAAAYAAAAAAAAABgAA
AAEAAAABAAAAAwAAAAIAAAABAAAABgAAAAcAAAABAAAABwAAAAMAAAADAAAABwAAAAgAAAAD
AAAACAAAAAQAAAAEAAAACQAAAAUAAAAEAAAACAAAAAoAAAAEAAAACgAAAAkAAAAFAAAACQAA
AAsAAAAFAAAACwAAAAoAAAAGAAAACgAAAAcAAAAHAAAACgAAAAwAAAAHAAAADAAAAAgAAAAI
AAAADAAAAAoAAAAJAAAADQAAAAsAAAAJAAAACgAAAA0AAAAKAAAACwAAAA0AAAAQAAAAAAAA
AAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/PwAAAAQAAADcptY+aSAWP3+RgL9G
zzc+aSAWP8Mhtb8A4Ps5aSAWP+E0ir8A4Ps5NAbHPn+RgL+QjDw/XJq1Pn+RgL8EEs89aSAW
P2rVwL/ieTw/GUEZPgk0vL/cIBo/3jhtPmrVwL+658k+Wk3EPmrVwL8A4Ps5aSAWP+64nr8A
4Ps5wEJXvd7Nnr+i3ig/mL9WvX+RgL9YDXc/oGScvH+RgL8wR2I/wEJXvYbSsL8A4Ps5cnAM
P2rVwL+spDQ/xk/NPWrVwL8wWkY/wEJXvWrVwL8gong/wEJXvX+RgL8A4Ps5wEJXvTD0rr8e
B3c/wEJXvTVIir8A4Ps5v0l6PmrVwL9yAAAAAAAAAAEAAAAFAAAAAAAAAAUAAAAJAAAAAAAA
AAkAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAALAAAAAAAAAAsAAAARAAAAAAAAABEAAAAM
AAAAAAAAAAwAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAGAAAAAQAAAAYAAAAHAAAAAQAA
AAcAAAAIAAAAAQAAAAgAAAAFAAAAAgAAAAkAAAAOAAAAAgAAAA4AAAAUAAAAAgAAABQAAAAS
AAAAAgAAABIAAAAKAAAAAgAAAAoAAAADAAAAAwAAAAoAAAALAAAABAAAAAwAAAANAAAABAAA
AA0AAAAGAAAABQAAAAgAAAAHAAAABQAAAAcAAAAPAAAABQAAAA8AAAAQAAAABQAAABAAAAAU
AAAABQAAABQAAAAOAAAABQAAAA4AAAAJAAAABgAAAA8AAAAHAAAABgAAAA0AAAAQAAAABgAA
ABAAAAAPAAAACgAAABEAAAALAAAACgAAABIAAAAQAAAACgAAABAAAAANAAAACgAAAA0AAAAT
AAAACgAAABMAAAARAAAADAAAABEAAAATAAAADAAAABMAAAANAAAAEAAAABIAAAAUAAAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP2YAAAAEAAAAABIoOuiwTj/A
ZG+9ADREPOiwTj9MPVi9ABIoOtZTVT8AAAAAABIoOrozVz9HjgC/6PjVPuiwTj9HjgC/ZHf0
PeiwTj8AIE64IF9SP+iwTj8AAAAAABIoOnhl1T8AAAAAABIoOncguT9HjgC/tm4jP+iwTj9p
jLu+68luPvHqpT9HjgC/4RYVPx0vqj8/b6q+Ep1KP+iwTj/GIea9z8g3Pxnrjz/ErXS+qp43
P8YnkD/eDmq+tmcxP0uXmD9SsH2+Ep1KP9ZhWz8AAAAAALvnO8so1T8AAAAAhtwFP7ddrz/a
A6++4NYFPhc/tD9HjgC/0iIiP79Moz9MNZu+MqwxP7srmD+94IO+0u84P+Hriz9AgHC+Pkg2
P+iwTj9uHXq+IUhAPipGrD9HjgC/01QNP7FRrT/EnK6+7twUPzGgqj9XU6W+uJgeP/axiz8A
AAAAdrkhP6bWoz/vTJa+4NYFPtqG0D8AAAAAfnpfPsJJxD8AAAAA68luPrQywj8AIE64nkAG
P+CUrz9Kwam+XF8NP2+krT+lYKm+wAAAAAAAAAABAAAAAgAAAAAAAAACAAAABwAAAAAAAAAH
AAAACAAAAAAAAAAIAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAACQAAAAAAAAAJAAAAFwAA
AAAAAAAXAAAADAAAAAAAAAAMAAAABgAAAAAAAAAGAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAF
AAAAAgAAAAIAAAAFAAAABgAAAAIAAAAGAAAAEAAAAAIAAAAQAAAAGwAAAAIAAAAbAAAAHgAA
AAIAAAAeAAAAHQAAAAIAAAAdAAAAEQAAAAIAAAARAAAABwAAAAMAAAAIAAAAEwAAAAMAAAAT
AAAAGAAAAAMAAAAYAAAACgAAAAMAAAAKAAAABAAAAAQAAAAKAAAACwAAAAQAAAALAAAACQAA
AAYAAAAMAAAADQAAAAYAAAANAAAADgAAAAYAAAAOAAAADwAAAAYAAAAPAAAAEAAAAAcAAAAR
AAAAEgAAAAcAAAASAAAACAAAAAgAAAASAAAAEwAAAAkAAAALAAAAFAAAAAkAAAAUAAAAFQAA
AAkAAAAVAAAADQAAAAkAAAANAAAAFgAAAAkAAAAWAAAAFwAAAAoAAAAYAAAAGQAAAAoAAAAZ
AAAACwAAAAsAAAAZAAAAGgAAAAsAAAAaAAAAFAAAAAwAAAAXAAAAFgAAAAwAAAAWAAAADQAA
AA0AAAAVAAAADwAAAA0AAAAPAAAADgAAAA8AAAAbAAAAEAAAAA8AAAAVAAAAHAAAAA8AAAAc
AAAAHQAAAA8AAAAdAAAAHgAAAA8AAAAeAAAAHwAAAA8AAAAfAAAAGwAAABEAAAAdAAAAEgAA
ABIAAAAgAAAAIQAAABIAAAAhAAAAGQAAABIAAAAZAAAAEwAAABIAAAAdAAAAIAAAABMAAAAZ
AAAAGAAAABQAAAAaAAAAHAAAABQAAAAcAAAAFQAAABkAAAAhAAAAGgAAABoAAAAhAAAAHQAA
ABoAAAAdAAAAHAAAABsAAAAfAAAAHgAAAB0AAAAhAAAAIAAAABAAAAAAAAAAAAAAAAAAAAAA
AAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9IAAAABAAAAADg+zlBcRY/xNiJvwDg+zlBcRY/vFye
vwByJbtBcRY/rJaJvwDg+zleycY+DKyAvwDg+zlTjww/2/7Av/iQ9r1BcRY/2/7Av4DiA7xB
cRY/Yh+JvwDg+znAQle9MM+ev2AeGrxBcRY/XgKJv4Mi375BcRY/DKyAvzuULb/AQle9DKyA
vwDg+znhP30+2/7AvyZHTL5BcRY/ijO1vx5s076+/sM+2/7AvwDg+znAQle9afSuv35OQb+P
bbU+DKyAv/hhfb/AQle9DKyAv0bvSr/AQle92/7Av46fHb9CanA+2/7AvyRIQb8CJBk+GzS8
v8LRe7/AQle9m0mKv8LRe78gdZ+8DKyAv7EMZ7/AQle9L9Owv5E3Ob++EMo92/7Av4QAAAAA
AAAAAQAAAAUAAAAAAAAABQAAAAwAAAAAAAAADAAAAAkAAAAAAAAACQAAAAgAAAAAAAAACAAA
AAYAAAAAAAAABgAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAcAAAAAAAAABwAAAA4AAAAA
AAAADgAAAAsAAAAAAAAACwAAAAQAAAAAAAAABAAAAAEAAAABAAAABAAAAAUAAAACAAAABgAA
AAMAAAADAAAABgAAAAgAAAADAAAACAAAAAkAAAADAAAACQAAAA8AAAADAAAADwAAABUAAAAD
AAAAFQAAABAAAAADAAAAEAAAAAoAAAADAAAACgAAAAcAAAAEAAAACwAAABEAAAAEAAAAEQAA
ABcAAAAEAAAAFwAAABIAAAAEAAAAEgAAAA0AAAAEAAAADQAAAAUAAAAFAAAADQAAAAwAAAAH
AAAACgAAABAAAAAHAAAAEAAAABQAAAAHAAAAFAAAABYAAAAHAAAAFgAAABEAAAAHAAAAEQAA
AA4AAAAJAAAADAAAAA8AAAALAAAADgAAABEAAAAMAAAADQAAABIAAAAMAAAAEgAAABMAAAAM
AAAAEwAAAA8AAAAPAAAAFAAAABUAAAAPAAAAEwAAABQAAAAQAAAAFQAAABQAAAARAAAAFgAA
ABMAAAARAAAAEwAAABcAAAASAAAAFwAAABMAAAATAAAAFgAAABQAAAAQAAAAAAAAAAAAAAAA
AAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/PAAAAAQAAAAAcPi5w0FevwAwWblInRq/ausM
vwAwWblKjw+/EPEevwAAADQA8Ri8b8FevwAwWbkAcPi5Lvdpv2Tu1b0AcPi5fdb2vtqCh79I
nRq/jFfsvtqCh79InRq/JCAev/4BHr55TQ+/Lvdpv/c+K79mbwG/Lvdpv8wcFL9ybZ2+Lvdp
vyILfr5rjJ2+ZilOvwAwWbkA8Ri8Lvdpv3QEzb0AcPi5Lvdpv4w2fL8AcPi5jik8v9qCh79I
nRq/IMhCv9qCh79InRq/Lvdpv76jVb/ndQy+Lvdpv8JzJ766OJu9Lvdpv/xACL5InRq/Lvdp
vwhxfr9sAAAAAAAAAAEAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAN
AAAAAAAAAA0AAAAOAAAAAAAAAA4AAAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAGAAAAAQAA
AAYAAAAPAAAAAQAAAA8AAAATAAAAAQAAABMAAAAQAAAAAQAAABAAAAAHAAAAAQAAAAcAAAAC
AAAAAgAAAAcAAAAIAAAAAgAAAAgAAAAJAAAAAgAAAAkAAAAKAAAAAgAAAAoAAAALAAAAAgAA
AAsAAAADAAAAAwAAAAsAAAAMAAAAAwAAAAwAAAAEAAAABAAAAAwAAAASAAAABAAAABIAAAAR
AAAABAAAABEAAAAKAAAABAAAAAoAAAAJAAAABAAAAAkAAAAIAAAABAAAAAgAAAAQAAAABAAA
ABAAAAATAAAABAAAABMAAAANAAAABQAAAA4AAAAPAAAABQAAAA8AAAAGAAAABwAAABAAAAAI
AAAACgAAABEAAAALAAAACwAAABEAAAASAAAACwAAABIAAAAMAAAADQAAABMAAAAPAAAADQAA
AA8AAAAOAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPz8AAAAE
AAAALl8aP26S9b6oeIa/T1saP4I+Q79Ad4e/T1saP+tw7L5Ad4e/T1saP3OJBb8AAAA0T1sa
P4jXZb8qJ12/T1saP2Lxab/Gin6/AHD4uWLxab9SNXy/AHD4uQZhPL9Ad4e/4iiZPXDp9b5A
d4e/AHD4uXBAXr8AANm4VByTPeQ6Wr8AAAA0g3MYP+OpCL8AAAA0AHD4uXRF975Ad4e/xVwX
P2Lxab+AWVu/gs8KP4/vHr8AANm4AHD4uWLxab9kEta9mBSUPlcnTr8AANm4JDRSPmLxab+o
hlO+WC4PP2Lxab8usTy/9IUKP2Lxab/iPSu/4e2TPmLxab+KEH6+cgAAAAAAAAABAAAAAgAA
AAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAF
AAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAADAAAAAEAAAAMAAAACAAAAAEAAAAIAAAAAgAA
AAIAAAAIAAAAAwAAAAMAAAAJAAAACgAAAAMAAAAKAAAACwAAAAMAAAALAAAABAAAAAMAAAAI
AAAADAAAAAMAAAAMAAAACQAAAAQAAAANAAAABQAAAAQAAAALAAAADgAAAAQAAAAOAAAADQAA
AAUAAAANAAAAEgAAAAUAAAASAAAAEwAAAAUAAAATAAAAFAAAAAUAAAAUAAAAEQAAAAUAAAAR
AAAADwAAAAUAAAAPAAAABgAAAAYAAAAPAAAACQAAAAYAAAAJAAAADAAAAAYAAAAMAAAABwAA
AAkAAAAPAAAACgAAAAoAAAAQAAAACwAAAAoAAAAPAAAAEQAAAAoAAAARAAAAEAAAAAsAAAAQ
AAAADgAAAA0AAAAOAAAAEgAAAA4AAAAQAAAAEwAAAA4AAAATAAAAEgAAABAAAAARAAAAFAAA
ABAAAAAUAAAAEwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD+E
AAAABAAAANQrdT8svEq/QHeHvwBAx7maRsK/QHeHvzimbz8JxGK/QHeHv+7bdD8svEq/DyKN
vwBAx7ksvEq/lzQEwABAx7kWAsS/CNiQv6wivj2Y7r+/QHeHv+JDbz8tamS/QHeHvxzHWT+p
4YC/gGeuv+C7ZT8svEq/OIK6v+CvKz0svEq/DSYEwABAx7nwtWO/+xgCwERdtj6MTLm/QHeH
vwBAx7n8zrm/mx2/vz7ghj6hqrO/FdHBv+q0sT6W5Lu/sW2Uv8dwbT9wb2i/QHeHv88iJj+0
QqS/M9Sev88iJj81gYa//q7Vv0QDND9MG02/jL7jvyFDOD8svEq/iBHhv1Sp5j0svEq/CucD
wABAx7kSu2a/INUBwC0VLj/lVJ6/QHeHvwBAx7m3zZ2/NVTnv08w/T6TkKG/gsHJv2S9DT6q
j5q/VcHovz7ghj6nyZC/ZxLtv+q0sT7TIYK/x4jzvzKCMz8svEq/yz/kv2O8wD4wrGG/uh77
v5q/tj4svEq/OBcAwARLET4svEq/4sEDwABAx7nK12i/baEBwI6ZMD62cVW/xJMCwABAx7kn
Xoq/STj3v1w0hz151Ii/xub3v57nBD7S04O/ABn6v46ZMD7ss3i/WGT9v3zePz4wFWe/x6MA
wCgVgz4svEq/vwACwABAx7n5sWm/9oUBwABAx7nArW2/3v8AwABAx7nK3Gq/MF8BwPwAAAAA
AAAAAQAAAAYAAAAAAAAABgAAAAwAAAAAAAAADAAAABcAAAAAAAAAFwAAABAAAAAAAAAAEAAA
AAcAAAAAAAAABwAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAkAAAAAAAAACQAAABQAAAAA
AAAAFAAAAB0AAAAAAAAAHQAAAB8AAAAAAAAAHwAAACgAAAAAAAAAKAAAACAAAAAAAAAAIAAA
ABUAAAAAAAAAFQAAAAoAAAAAAAAACgAAAAQAAAAAAAAABAAAAAEAAAABAAAABQAAAAYAAAAB
AAAABAAAAAsAAAABAAAACwAAABYAAAABAAAAFgAAACEAAAABAAAAIQAAACkAAAABAAAAKQAA
ACsAAAABAAAAKwAAACoAAAABAAAAKgAAACMAAAABAAAAIwAAABgAAAABAAAAGAAAAA0AAAAB
AAAADQAAAAUAAAACAAAABwAAAAMAAAADAAAABwAAAAgAAAADAAAACAAAAAkAAAAEAAAACgAA
AAsAAAAFAAAADAAAAAYAAAAFAAAADQAAAA4AAAAFAAAADgAAAA8AAAAFAAAADwAAAAwAAAAH
AAAAEAAAAAgAAAAIAAAAEAAAABEAAAAIAAAAEQAAABIAAAAIAAAAEgAAAAkAAAAJAAAAEgAA
ABMAAAAJAAAAEwAAABQAAAAKAAAAFQAAABYAAAAKAAAAFgAAAAsAAAAMAAAADwAAABEAAAAM
AAAAEQAAABcAAAANAAAAGAAAAA4AAAAOAAAAGQAAABEAAAAOAAAAEQAAAA8AAAAOAAAAGAAA
ABoAAAAOAAAAGgAAABsAAAAOAAAAGwAAABkAAAAQAAAAFwAAABEAAAARAAAAGQAAABIAAAAS
AAAAGQAAABwAAAASAAAAHAAAABMAAAATAAAAHQAAABQAAAATAAAAHAAAAB4AAAATAAAAHgAA
AB8AAAATAAAAHwAAAB0AAAAVAAAAIAAAABYAAAAWAAAAIAAAACIAAAAWAAAAIgAAACEAAAAY
AAAAIwAAACQAAAAYAAAAJAAAABoAAAAZAAAAGwAAABwAAAAaAAAAJAAAABsAAAAbAAAAJAAA
ACUAAAAbAAAAJQAAABwAAAAcAAAAJQAAACYAAAAcAAAAJgAAACcAAAAcAAAAJwAAAB4AAAAe
AAAAJwAAAB8AAAAfAAAAJwAAACgAAAAgAAAAKAAAACIAAAAhAAAAIgAAACcAAAAhAAAAJwAA
ACYAAAAhAAAAJgAAACUAAAAhAAAAJQAAACkAAAAiAAAAKAAAACcAAAAjAAAAKgAAACQAAAAk
AAAAKgAAACUAAAAlAAAAKgAAACsAAAAlAAAAKwAAACkAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/NgAAAAQAAADC5By/AOpePZmlgL/C5By/5pnqPpmlgL8A
4Ps5Q9/GPpmlgL8A4Ps51w5PP1h3Yr3C5By/iE0APwAgTrnC5By/mE8OP4CYX7+1yha/1w5P
P2o0db+tnxW/1w5PP1laeL+q3oW+1w5PP5mlgL8A4Ps5lpUwP5mlgL8A4Ps51w5PP+fuO7/o
gwa+1w5PPwAgTrmlwA+/CMwVPwAgTrnC5By/1w5PPwh0xb4A4Ps5Aas+P5ngdL/gchm867BK
PwnJWr8A4Ps5xTxKP3SVWr/2yJ2+yitFPwAgTrlgAAAAAAAAAAEAAAAIAAAAAAAAAAgAAAAJ
AAAAAAAAAAkAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAANAAAAAAAA
AA0AAAAFAAAAAAAAAAUAAAABAAAAAQAAAAUAAAAGAAAAAQAAAAYAAAAHAAAAAQAAAAcAAAAI
AAAAAgAAAAkAAAAOAAAAAgAAAA4AAAAQAAAAAgAAABAAAAAKAAAAAgAAAAoAAAADAAAAAwAA
AAoAAAAIAAAAAwAAAAgAAAAHAAAAAwAAAAcAAAAGAAAAAwAAAAYAAAANAAAAAwAAAA0AAAAL
AAAAAwAAAAsAAAAEAAAABAAAAAsAAAARAAAABAAAABEAAAAMAAAABAAAAAwAAAANAAAABQAA
AA0AAAAGAAAACAAAAA4AAAAJAAAACAAAAAoAAAAPAAAACAAAAA8AAAAQAAAACAAAABAAAAAO
AAAACgAAABAAAAAPAAAACwAAAA0AAAARAAAADAAAABEAAAANAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP28AAAAEAAAAlO9Wv14UTz8AAAAA5GBPv14UTz8E
fd+9/HwGvl4UTz8AAAAAMNsUvwP2tT8AAAAAyx3wvl39qD+Li/e+uqw5v14UTz9hBIC+N/Di
vopYsj9qB/y+AOD7OV4UTz8Y6GG9AOD7Oa1WVT8AAAAA8p8Sv8lVuD8AAAAAKwPevvDTsT9q
/v2+MBvrvgyBqD/+iPm+ZFnevl4UTz8MrAC/fZcnv14UTz/75Lu+HhbZvlZPtz+yavq+vGnU
vt+xtj+Ybvy+YM0ZvPBqVj8MrAC/YPsKvIN7Vj8MrAC/wAOau1fDVj8MrAC/AOD7OcsmVz8M
rAC/AOD7OXll1T8AAAAAwUkQv74nuT8AAAAAuLLHvlZyvD/ndPK+bUhTvqw/rD8MrAC/Bf93
vhA7pz8MrAC/yOGAvoDkpT8MrAC/SNgYvjw5tD8MrAC/bHwmvhFesj8MrAC/INPDvlSVuz+I
2fS+YM0ZvNx3uT8MrAC/AOD7Oe4ZuT8MrAC/YM0ZvO3I1T8AAAAALxEPv3yTuT8AAAAAzKK5
vt33vT8SReq+yPDCvogHyT8AAAAA+j7AvhJHyT8AAAAAth68vgClyT8AAAAA0gAAAAAAAAAB
AAAABQAAAAAAAAAFAAAADQAAAAAAAAANAAAADAAAAAAAAAAMAAAABwAAAAAAAAAHAAAAAgAA
AAAAAAACAAAACAAAAAAAAAAIAAAAFAAAAAAAAAAUAAAAHwAAAAAAAAAfAAAAJAAAAAAAAAAk
AAAAIwAAAAAAAAAjAAAAIgAAAAAAAAAiAAAAIAAAAAAAAAAgAAAAFQAAAAAAAAAVAAAACQAA
AAAAAAAJAAAAAwAAAAAAAAADAAAAAQAAAAEAAAAEAAAABQAAAAEAAAADAAAABgAAAAEAAAAG
AAAABAAAAAIAAAAHAAAACAAAAAMAAAAJAAAABgAAAAQAAAAKAAAACwAAAAQAAAALAAAADAAA
AAQAAAAMAAAADQAAAAQAAAANAAAABQAAAAQAAAAGAAAACgAAAAYAAAAJAAAADgAAAAYAAAAO
AAAADwAAAAYAAAAPAAAACgAAAAcAAAAMAAAAEAAAAAcAAAAQAAAAEQAAAAcAAAARAAAAEgAA
AAcAAAASAAAAEwAAAAcAAAATAAAAHgAAAAcAAAAeAAAAFAAAAAcAAAAUAAAACAAAAAkAAAAV
AAAAFgAAAAkAAAAWAAAADgAAAAoAAAAXAAAAGAAAAAoAAAAYAAAAGQAAAAoAAAAZAAAADAAA
AAoAAAAMAAAACwAAAAoAAAAPAAAAGgAAAAoAAAAaAAAAGwAAAAoAAAAbAAAAFwAAAAwAAAAZ
AAAAGAAAAAwAAAAYAAAAFwAAAAwAAAAXAAAAGwAAAAwAAAAbAAAAGgAAAAwAAAAaAAAAHQAA
AAwAAAAdAAAAHgAAAAwAAAAeAAAAEwAAAAwAAAATAAAAEgAAAAwAAAASAAAAEQAAAAwAAAAR
AAAAEAAAAA4AAAAWAAAADwAAAA8AAAAWAAAAHAAAAA8AAAAcAAAAHQAAAA8AAAAdAAAAGgAA
ABQAAAAeAAAAHwAAABUAAAAgAAAAFgAAABYAAAAhAAAAHQAAABYAAAAdAAAAHAAAABYAAAAg
AAAAIgAAABYAAAAiAAAAIwAAABYAAAAjAAAAJAAAABYAAAAkAAAAIQAAAB0AAAAhAAAAHwAA
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
ABAAAAARAAAAAAAAABEAAAAHAAAAAAAAAAcAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAJ
AAAAAAAAAAkAAAATAAAAAAAAABMAAAAdAAAAAAAAAB0AAAAeAAAAAAAAAB4AAAA2AAAAAAAA
ADYAAAA3AAAAAAAAADcAAAAmAAAAAAAAACYAAAAlAAAAAAAAACUAAAAkAAAAAAAAACQAAAAj
AAAAAAAAACMAAAAiAAAAAAAAACIAAAAhAAAAAAAAACEAAAAVAAAAAAAAABUAAAAKAAAAAAAA
AAoAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAUAAAAGAAAAAQAAAAQAAAALAAAAAQAAAAsAAAAX
AAAAAQAAABcAAAAuAAAAAQAAAC4AAAAtAAAAAQAAAC0AAAA4AAAAAQAAADgAAAAxAAAAAQAA
ADEAAAAwAAAAAQAAADAAAAAvAAAAAQAAAC8AAAAYAAAAAQAAABgAAAAOAAAAAQAAAA4AAAAN
AAAAAQAAAA0AAAAMAAAAAQAAAAwAAAAFAAAAAgAAAAcAAAAIAAAAAgAAAAgAAAADAAAAAwAA
AAgAAAAJAAAABAAAAAoAAAALAAAABQAAAAwAAAAGAAAABgAAAAwAAAANAAAABgAAAA0AAAAO
AAAABgAAAA4AAAAPAAAABgAAAA8AAAAQAAAABwAAABEAAAASAAAABwAAABIAAAAIAAAACAAA
ABMAAAAJAAAACAAAABIAAAAUAAAACAAAABQAAAATAAAACgAAABUAAAAWAAAACgAAABYAAAAL
AAAACwAAABYAAAAXAAAADgAAABgAAAAZAAAADgAAABkAAAAaAAAADgAAABoAAAAPAAAADwAA
ABoAAAAbAAAADwAAABsAAAAQAAAAEAAAABsAAAARAAAAEQAAABsAAAASAAAAEgAAABsAAAAc
AAAAEgAAABwAAAAUAAAAEwAAABQAAAAdAAAAFAAAAB4AAAAdAAAAFAAAABwAAAAfAAAAFAAA
AB8AAAAgAAAAFAAAACAAAAAeAAAAFQAAACEAAAAWAAAAFgAAACIAAAAjAAAAFgAAACMAAAAk
AAAAFgAAACQAAAAlAAAAFgAAACUAAAAmAAAAFgAAACYAAAAnAAAAFgAAACcAAAAoAAAAFgAA
ACgAAAApAAAAFgAAACkAAAAqAAAAFgAAACoAAAArAAAAFgAAACsAAAAsAAAAFgAAACwAAAAt
AAAAFgAAAC0AAAAuAAAAFgAAAC4AAAAXAAAAFgAAACEAAAAiAAAAGAAAAC8AAAAZAAAAGQAA
AC8AAAAwAAAAGQAAADAAAAAxAAAAGQAAADEAAAAyAAAAGQAAADIAAAAzAAAAGQAAADMAAAAa
AAAAGgAAADQAAAAbAAAAGgAAADMAAAA1AAAAGgAAADUAAAA0AAAAGwAAADQAAAAcAAAAHAAA
ADQAAAA1AAAAHAAAADUAAAAfAAAAHgAAACAAAAA2AAAAHwAAADUAAAAoAAAAHwAAACgAAAAg
AAAAIAAAACgAAAAnAAAAIAAAACcAAAAmAAAAIAAAACYAAAA3AAAAIAAAADcAAAA2AAAAKAAA
ADUAAAApAAAAKQAAADUAAAAzAAAAKQAAADMAAAAqAAAAKgAAADMAAAArAAAAKwAAADMAAAAy
AAAAKwAAADIAAAAsAAAALAAAADgAAAAtAAAALAAAADIAAAAxAAAALAAAADEAAAA4AAAAEAAA
AAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPzkAAAAEAAAAuSMdP4BWujxH
joC/AOD7OcIaxz5HjoC/uSMdPw914z5HjoC/uSMdP0iJMD0sYnW/AOD7OeawTj84MW+9AOD7
OcCqMD9HjoC/REB4PuawTj9HjoC/uSMdP5I8Pz+Ze1O/uSMdP75m3T4guai9AOD7OeawTj+r
wTy/uSMdP8Qy8D4AAAAAgnD0PeawTj8AIM64AOD7OZqqPj9Q4XS/AOD7Odz4ST8CPFu/AOD7
OVQ/Sj/wmlq/uSMdP+awTj+APMG+uSMdPyqFQj/IiVC/6/wKP/bJFT8AAAAAHlmUPrgxRT8A
AAAAZgAAAAAAAAABAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAAAgAAAAAAAAACAAAABwAA
AAAAAAAHAAAAEAAAAAAAAAAQAAAADwAAAAAAAAAPAAAACgAAAAAAAAAKAAAACAAAAAAAAAAI
AAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAEAAAACQAAAAEAAAAJAAAADgAA
AAEAAAAOAAAADQAAAAEAAAANAAAADAAAAAEAAAAMAAAABQAAAAIAAAAGAAAABwAAAAMAAAAI
AAAABAAAAAQAAAAIAAAACgAAAAQAAAAKAAAACwAAAAQAAAALAAAADwAAAAQAAAAPAAAABgAA
AAQAAAAGAAAACQAAAAUAAAAMAAAABgAAAAYAAAAMAAAADQAAAAYAAAANAAAADgAAAAYAAAAO
AAAACQAAAAYAAAAPAAAAEAAAAAYAAAAQAAAABwAAAAoAAAARAAAAEgAAAAoAAAASAAAACwAA
AAoAAAAPAAAAEQAAAAsAAAASAAAADwAAAA8AAAASAAAAEQAAABAAAAAAAAAAAAAAAAAAAAAA
AAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9OAAAABAAAAABw+LkzSMK/QHeHvwBw+Lku92m/iC58
v9f6FT86Kqa/QHeHv+JJtj4FS7m/QHeHv/bUyT5EYba/+AhHvwBw+Lm/kr+/Q/I+v9f6FT8u
92m/nm9+vwBw+Lku92m/dBLWvZr+FT/qapG/93xmv9f6FT8nYKe//j1UvxV3Az8JMqy/QHeH
v9f6FT/yFIe/Vqsovtbxzz7eJZW/NELuvQBw+LkVnZ6/aG2rvdf6FT8u92m/my1WvwBw+Lkx
6pm/AAAAANf6FT9WZXG/AAAAAL46Uj4u92m/sIZTvtf6FT8QTYG/uCt+vdbxzz78XY+/QAtg
vFJScj4MU5O/AAAAAABw+LkXfp6/1Pimve4wDz8u92m/ZKo8vwDvkz4u92m/uit+vnzcyT54
n4q/AAAAALSECj8u92m/GDcrv5AAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAoAAAAAAAAACgAA
AAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAA0AAAAAAAAADQAAABUAAAAA
AAAAFQAAAA8AAAAAAAAADwAAAAcAAAAAAAAABwAAAAEAAAABAAAABgAAAAIAAAABAAAABwAA
ABEAAAABAAAAEQAAABcAAAABAAAAFwAAABkAAAABAAAAGQAAABYAAAABAAAAFgAAAA4AAAAB
AAAADgAAAAYAAAACAAAABgAAAAgAAAACAAAACAAAAAkAAAACAAAACQAAAAoAAAADAAAACgAA
AAkAAAADAAAACQAAAAQAAAAEAAAACQAAAAsAAAAEAAAACwAAAAwAAAAEAAAADAAAAAUAAAAF
AAAADAAAAA0AAAAGAAAADgAAAAgAAAAHAAAADwAAABAAAAAHAAAAEAAAABEAAAAIAAAADgAA
ABAAAAAIAAAAEAAAABIAAAAIAAAAEgAAAAsAAAAIAAAACwAAAAkAAAALAAAAEgAAABMAAAAL
AAAAEwAAAAwAAAAMAAAAEwAAABQAAAAMAAAAFAAAAA8AAAAMAAAADwAAABUAAAAMAAAAFQAA
AA0AAAAOAAAAFgAAABAAAAAPAAAAFAAAABgAAAAPAAAAGAAAABAAAAAQAAAAFwAAABEAAAAQ
AAAAGAAAABMAAAAQAAAAEwAAABIAAAAQAAAAFgAAABkAAAAQAAAAGQAAABcAAAATAAAAGAAA
ABQAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/NgAAAAQAAAAT
mok/VTrjvyCm3LwBnJI/VTrjvyCm3Lz0J4Y/VTrjvwAAAABbAhY/Sy6mv0B3h78gDpY/VTrj
vwAAAACQGy4/pViev0B3h79bAhY/YGlxvwAAAABbAhY/e06Bv7grfr1bAhY/eRSHv1arKL5b
AhY/tGOnv/49VL+Y/hU/JAGKv9qqbL9bAhY/Lvdpv55vfr/g32I/rM5zv0B3h79sB2w/Lvdp
v0B3h7+843Q/Lvdpv8VKgL8gDpY/LvdpvwAAAADwJSA/LvdpvwAAAABbAhY/Lvdpv5stVr9g
AAAAAAAAAAEAAAAEAAAAAAAAAAQAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAABAAAAAQAA
AAMAAAAFAAAAAQAAAAUAAAAEAAAAAgAAAAQAAAAPAAAAAgAAAA8AAAAQAAAAAgAAABAAAAAG
AAAAAgAAAAYAAAAHAAAAAgAAAAcAAAAIAAAAAgAAAAgAAAAJAAAAAgAAAAkAAAADAAAAAwAA
AAkAAAAKAAAAAwAAAAoAAAALAAAAAwAAAAsAAAAMAAAAAwAAAAwAAAANAAAAAwAAAA0AAAAF
AAAABAAAAAUAAAANAAAABAAAAA0AAAAOAAAABAAAAA4AAAAPAAAABgAAABAAAAARAAAABgAA
ABEAAAAKAAAABgAAAAoAAAAHAAAABwAAAAoAAAAIAAAACAAAAAoAAAAJAAAACgAAABEAAAAL
AAAACwAAAA0AAAAMAAAACwAAABEAAAAQAAAACwAAABAAAAAPAAAACwAAAA8AAAAOAAAACwAA
AA4AAAANAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAP2AAAAAE
AAAAoA8ZvFeDwr/agoe/dADjvZ30v7/agoe/QMHsu751wr/agoe/AHD4uXmTv7/T+z6/oA8Z
vO7Hv79JzD6/hGTTvthetr85E0e/iMu/vrZOub/agoe/AHD4uR1Hwr/agoe/AHD4udmdnr8Y
fKu9oA8ZvE7Snr/E/6m9WnzZvjgllb9IIO69F8EVv1vmqL8E71K/F8EVv6bMp7/agoe/AHD4
uS73ab+MNny/AHD4uU7pmb8AAAAAoA8ZvGspmr8AAAAAJ7CCvvJSk78AAAAAWnzZvsxcj7+A
HmC8F8EVvzjVgr+om2i9F8EVv16Hhr/cpfq9F8EVv8GZiL8oNSO+F8EVvy73ab8TT36/AHD4
uS73ab907tW9F8EVv68Ldb8AAAAAoA8ZvC73ab+EBM29BGzTvpmcir8AAAAAVU7avglcib8A
AAAAF8EVvy73ab8AakO/WiybvS73ab8EQQi+g3MMvi73ab/Kcye+8m6dvi73ab8qC36+g0sP
vy73ab/4Piu/tAAAAAAAAAABAAAABgAAAAAAAAAGAAAADAAAAAAAAAAMAAAABwAAAAAAAAAH
AAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAAAQAA
AAEAAAAFAAAABgAAAAIAAAAHAAAAAwAAAAMAAAAHAAAADQAAAAMAAAANAAAAFgAAAAMAAAAW
AAAADgAAAAMAAAAOAAAACAAAAAMAAAAIAAAACQAAAAMAAAAJAAAABAAAAAQAAAAJAAAACgAA
AAQAAAAKAAAABQAAAAUAAAALAAAABgAAAAUAAAAKAAAACwAAAAYAAAALAAAADAAAAAcAAAAM
AAAADQAAAAgAAAAOAAAADwAAAAgAAAAPAAAACQAAAAkAAAAPAAAACgAAAAoAAAAPAAAAEAAA
AAoAAAAQAAAAEQAAAAoAAAARAAAAEgAAAAoAAAASAAAAEwAAAAoAAAATAAAAFAAAAAoAAAAU
AAAACwAAAAsAAAAUAAAAEwAAAAsAAAATAAAAEgAAAAsAAAASAAAAFwAAAAsAAAAXAAAAGwAA
AAsAAAAbAAAAFQAAAAsAAAAVAAAADAAAAAwAAAAVAAAADQAAAA0AAAAVAAAAGwAAAA0AAAAb
AAAAHwAAAA0AAAAfAAAAHgAAAA0AAAAeAAAAHQAAAA0AAAAdAAAAHAAAAA0AAAAcAAAAGAAA
AA0AAAAYAAAAFgAAAA4AAAAXAAAAGgAAAA4AAAAaAAAAGQAAAA4AAAAZAAAAEAAAAA4AAAAQ
AAAADwAAAA4AAAAWAAAAGAAAAA4AAAAYAAAAFwAAABAAAAAZAAAAEQAAABEAAAAZAAAAGgAA
ABEAAAAaAAAAFwAAABEAAAAXAAAAEgAAABcAAAAYAAAAHAAAABcAAAAcAAAAHQAAABcAAAAd
AAAAHgAAABcAAAAeAAAAHwAAABcAAAAfAAAAGwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD9IAAAABAAAAHhefb/AQle9maWAvxLRe7+wEZ+8maWAv6SdLb/A
Qle9maWAv7uMmr/AQle9ACBOuXoUm79woE69ACBOuYy1nL9gFi28ACBOuYD0nL8p3z4+ACBO
uf3tRr/wO+k+mElUvymEZL/bwwQ+maWAv2QKnL9oZFc+ACBOuVVZm78Ihmk+ACBOucLkHL9o
WF89maWAv8yeSL/AQle9ACBOuQCnJ7/XDk8/5O67vsLkHL+bTQ4/gJhfv7dZQb8zebU+maWA
v9dtT79GsDY/joamvtD1Vr/XDk8/ACBOuddtT7/XDk8/UKXfvcLkHL+Ikuo+maWAv8LkHL/f
RQA/ACBOufltH7/XDk8/pzzDvqDJOr/XDk8/nO54vsLkHL/XDk8/CHTFvoQAAAAAAAAAAQAA
AAgAAAAAAAAACAAAAA8AAAAAAAAADwAAABMAAAAAAAAAEwAAAAsAAAAAAAAACwAAAAIAAAAA
AAAAAgAAAAwAAAAAAAAADAAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAA
AAYAAAAAAAAABgAAAAEAAAABAAAABwAAAAgAAAABAAAABgAAAAkAAAABAAAACQAAAAoAAAAB
AAAACgAAAAcAAAACAAAACwAAAAwAAAADAAAADAAAABQAAAADAAAAFAAAABEAAAADAAAAEQAA
AAoAAAADAAAACgAAAAkAAAADAAAACQAAAAYAAAADAAAABgAAAAUAAAADAAAABQAAAAQAAAAH
AAAADQAAAA4AAAAHAAAADgAAAA8AAAAHAAAADwAAAAgAAAAHAAAACgAAABAAAAAHAAAAEAAA
AA0AAAAKAAAAEQAAABIAAAAKAAAAEgAAABAAAAALAAAAEwAAAA4AAAALAAAADgAAABcAAAAL
AAAAFwAAABQAAAALAAAAFAAAAAwAAAANAAAAFQAAAA4AAAANAAAAEAAAABYAAAANAAAAFgAA
ABIAAAANAAAAEgAAABEAAAANAAAAEQAAABcAAAANAAAAFwAAABUAAAAOAAAAEwAAAA8AAAAO
AAAAFQAAABcAAAAQAAAAEgAAABYAAAARAAAAFAAAABcAAAAQAAAAAAAAAAAAAAAAAAAAAAAA
ABAAAAAAAAAAAAAAAAAAAAAAAIA/NgAAAAQAAAB5mpK/VTrjv0DNxbywmIm/VTrjv0DNxbyw
r5W/VTrjvwAAAACY3jK/K16ev9qCh78YwRW/NdKnv9qCh794g4a/VTrjvwAAAACwr5W/Lvdp
vwAAAACxpnm/Lvdpv/dOgL8mv3C/Lvdpv9qCh79czGe/bJdzv9qCh78YwRW/LvdpvxNPfr8Y
wRW//uuovwTvUr8YwRW/w5yIvyg1I74YwRW/ou+Cv0hmb70YwRW/AtSCv6ibaL0YwRW/qBR1
vwAAAABQ7SS/LvdpvwAAAAAYwRW/LvdpvwBqQ79gAAAAAAAAAAEAAAAFAAAAAAAAAAUAAAAC
AAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAABAAAAAQAAAAQAAAAFAAAAAgAA
AAUAAAAPAAAAAgAAAA8AAAAQAAAAAgAAABAAAAAGAAAAAgAAAAYAAAAHAAAAAgAAAAcAAAAI
AAAAAgAAAAgAAAADAAAAAwAAAAgAAAAJAAAAAwAAAAkAAAAEAAAABAAAAAkAAAAKAAAABAAA
AAoAAAARAAAABAAAABEAAAAPAAAABAAAAA8AAAAOAAAABAAAAA4AAAANAAAABAAAAA0AAAAM
AAAABAAAAAwAAAALAAAABAAAAAsAAAAFAAAABQAAAAsAAAAMAAAABQAAAAwAAAANAAAABQAA
AA0AAAAOAAAABQAAAA4AAAAPAAAABgAAABAAAAARAAAABgAAABEAAAAKAAAABgAAAAoAAAAI
AAAABgAAAAgAAAAHAAAACAAAAAoAAAAJAAAADwAAABEAAAAQAAAAEAAAAAAAAAAAAAAAAAAA
AAAAAAAQAAAAAAAAAAAAAAAAAAAAAACAPzwAAAAEAAAAAAAAABg9478K2fM+AAAAAMjomb8A
AAAALlTaPRg9478K2fM+AAAAABg947/0WWg/sEpyPm5Tk78AAAAAAAAAAAC0er8IFJM9RB0X
P1eVcL8AAAAAVuHJPiyhir8AAAAAu6tsPhg9479HJjE/LlTaPRg947/0WWg/AAAAAMhCY78A
qXI/AAAAAMhCY7/g+eU+RB0XP8hCY7/kkfA9cDwQP8hCY798CBw/eb8PP8hCY7+HsR4/EhUP
P8hCY79SKSI/trr2PshCY78uAUY/RGCCPshCY79kAmw/EqdzPshCY79qE24/TH1NPshCY78A
qXI/bAAAAAAAAAABAAAAAgAAAAAAAAACAAAACAAAAAAAAAAIAAAACQAAAAAAAAAJAAAAAwAA
AAAAAAADAAAACgAAAAAAAAAKAAAACwAAAAAAAAALAAAABQAAAAAAAAAFAAAAAQAAAAEAAAAE
AAAAAgAAAAEAAAAFAAAABgAAAAEAAAAGAAAABwAAAAEAAAAHAAAABAAAAAIAAAAEAAAABwAA
AAIAAAAHAAAABgAAAAIAAAAGAAAACAAAAAMAAAAJAAAAEwAAAAMAAAATAAAACgAAAAUAAAAL
AAAADAAAAAUAAAAMAAAABgAAAAYAAAAMAAAADQAAAAYAAAANAAAACAAAAAgAAAAOAAAADwAA
AAgAAAAPAAAAEAAAAAgAAAAQAAAACQAAAAgAAAANAAAADgAAAAkAAAARAAAAEgAAAAkAAAAS
AAAAEwAAAAkAAAAQAAAAEQAAAAoAAAATAAAAEgAAAAoAAAASAAAAEQAAAAoAAAARAAAAEAAA
AAoAAAAQAAAADwAAAAoAAAAPAAAADgAAAAoAAAAOAAAADQAAAAoAAAANAAAADAAAAAoAAAAM
AAAACwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9IAAAABAAA
ANuBdz/AQle98niHv9DNhT+yr/e+8niHv84Pdz/AQle9iEiKv50jJT/AQle98niHv8p0fT/l
dEm/8niHv3XKhT9ybAi/XceVvxgJdz+ekye+lJGqv+VAYj/AQle9+tGwvwBw+LnAQle93M6e
vwBw+LlgNPe+8niHv8IsdT8svEq/8niHv8z9dD8svEq/KCWLv/bidD8svEq/6B6Nv+XDZT8s
vEq/AXm6vzXzaz/0QS6/zLzAv+GfYT+Pd/2+4DLLv/S+XT8ZIKS+4DLLv1p+Oz/AQle94DLL
vwBw+LnAQle9FfWuvwBw+Lk8YDy/8niHvw0IUj8svEq/4DLLv1b1Vj8svEq/EwnHv+U6Wz9M
dze/4DLLv7tVWz/boTa/4DLLv4QAAAAAAAAAAQAAAAIAAAAAAAAAAgAAAAcAAAAAAAAABwAA
ABEAAAAAAAAAEQAAABIAAAAAAAAAEgAAAAgAAAAAAAAACAAAAAMAAAAAAAAAAwAAAAkAAAAA
AAAACQAAABMAAAAAAAAAEwAAAAoAAAAAAAAACgAAAAQAAAAAAAAABAAAAAEAAAABAAAABAAA
AAUAAAABAAAABQAAAAYAAAABAAAABgAAAAIAAAACAAAABgAAAAcAAAADAAAACAAAAAkAAAAE
AAAACgAAAAsAAAAEAAAACwAAAAwAAAAEAAAADAAAAA0AAAAEAAAADQAAAAUAAAAFAAAADQAA
AA4AAAAFAAAADgAAAA8AAAAFAAAADwAAAAYAAAAGAAAADwAAABAAAAAGAAAAEAAAAAcAAAAH
AAAAEAAAABEAAAAIAAAAEgAAABMAAAAIAAAAEwAAAAkAAAAKAAAAEwAAABQAAAAKAAAAFAAA
ABUAAAAKAAAAFQAAAA0AAAAKAAAADQAAAAwAAAAKAAAADAAAAAsAAAANAAAAFQAAAA4AAAAO
AAAAFQAAABYAAAAOAAAAFgAAABcAAAAOAAAAFwAAAA8AAAAPAAAAFwAAABYAAAAPAAAAFgAA
ABQAAAAPAAAAFAAAABEAAAAPAAAAEQAAABAAAAARAAAAFAAAABIAAAASAAAAFAAAABMAAAAU
AAAAFgAAABUAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAAAAAAAAAAAIA/SAAA
AAQAAAAw2RG+GD3jvwrZ8z4AAAAAGD3jvwrZ8z5qrYi+GD3jv0cmMT9EHRe/QhN0vwAAAAD+
Z9O+LKGKvwAAAAAmu4K+blOTvwAAAADgXBm8QiqavwAAAAAAAAAAGD3jv/RZaD8AAAAAyOiZ
vwAAAABCKAC/yEJjvy4BRj9m2BO/yEJjv1IpIj/E/xS/yEJjv3wIHD8w2RG+GD3jv/RZaD/g
XBm8jOF6v2iojz2I0Ra/yEJjv75Ywj5EHRe/8mRjv1CwFj5EHRe/tpJkv9DzCz4AAAAAALR6
vwgUkz0AAAAAyEJjvwCpcj/s5ou+yEJjv2QCbD+cimC+yEJjvwCpcj8xWoO+yEJjv2oTbj9E
HRe/yEJjvzDUFz4AAAAAyEJjv+D55T6EAAAAAAAAAAEAAAAHAAAAAAAAAAcAAAAMAAAAAAAA
AAwAAAACAAAAAAAAAAIAAAADAAAAAAAAAAMAAAAEAAAAAAAAAAQAAAAFAAAAAAAAAAUAAAAG
AAAAAAAAAAYAAAABAAAAAQAAAAYAAAAIAAAAAQAAAAgAAAARAAAAAQAAABEAAAAXAAAAAQAA
ABcAAAASAAAAAQAAABIAAAAHAAAAAgAAAAkAAAAKAAAAAgAAAAoAAAALAAAAAgAAAAsAAAAD
AAAAAgAAAAwAAAAJAAAAAwAAAA0AAAAIAAAAAwAAAAgAAAAGAAAAAwAAAAYAAAAFAAAAAwAA
AAUAAAAEAAAAAwAAAAsAAAAOAAAAAwAAAA4AAAAPAAAAAwAAAA8AAAAWAAAAAwAAABYAAAAQ
AAAAAwAAABAAAAARAAAAAwAAABEAAAANAAAABwAAABIAAAAUAAAABwAAABQAAAAMAAAACAAA
AA0AAAARAAAACQAAAAwAAAATAAAACQAAABMAAAAVAAAACQAAABUAAAAUAAAACQAAABQAAAAS
AAAACQAAABIAAAAXAAAACQAAABcAAAAWAAAACQAAABYAAAAOAAAACQAAAA4AAAALAAAACQAA
AAsAAAAKAAAADAAAABQAAAAVAAAADAAAABUAAAATAAAADgAAABYAAAAPAAAAEAAAABYAAAAR
AAAAEQAAABYAAAAXAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAACA
P1QAAAAEAAAAY5x4P8BCV71HjoC/8N01P8BCV71Ia1G/TO0oP4DqVr1HjoC/Bw93P8ASnLxH
joC/BBKdPytlQT4AAAAAgvScPwDCOj0AAAAAteicPyAiDbwAAAAAtUWbP+gfSb0AAAAAXGua
P8BCV70AAAAALNZDP8BCV70AAAAAuiMdP4CkujxHjoC/cdJfP5G2BD5HjoC/rG8nP+awTj8D
9lO/cPUnP+awTj9FaFO/pD8qP+awTj/Ew1C/hoybPxWmaT4AAAAAl4ibP3B2TT7A6uO8xDGc
P/qUWD4AAAAAuiMdP8Yr8D4AAAAAuiMdP2Bs3T4guai9uiMdPwJ14z5HjoC/RZE8P9uvtT5H
joC/wmAkP+awTj/44FK/12dSP+awTj8AAAAAuiMdP+awTj+APMG+uiMdP4g9Pz+Ze1O//q8i
P+awTj9AHFC/uiMdPwyEQj/IiVC/nAAAAAAAAAABAAAAAgAAAAAAAAACAAAACgAAAAAAAAAK
AAAAFAAAAAAAAAAUAAAAFQAAAAAAAAAVAAAACwAAAAAAAAALAAAAAwAAAAAAAAADAAAABAAA
AAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAACAAAAAAAAAAI
AAAACQAAAAAAAAAJAAAAAQAAAAEAAAAJAAAAAgAAAAIAAAAJAAAACgAAAAMAAAALAAAADAAA
AAMAAAAMAAAADQAAAAMAAAANAAAADgAAAAMAAAAOAAAADwAAAAMAAAAPAAAAEAAAAAMAAAAQ
AAAABAAAAAQAAAAQAAAAEQAAAAQAAAARAAAADwAAAAQAAAAPAAAAFwAAAAQAAAAXAAAAEgAA
AAQAAAASAAAACQAAAAQAAAAJAAAACAAAAAQAAAAIAAAABwAAAAQAAAAHAAAABgAAAAQAAAAG
AAAABQAAAAkAAAASAAAAEwAAAAkAAAATAAAACgAAAAoAAAATAAAAEgAAAAoAAAASAAAAGAAA
AAoAAAAYAAAAGwAAAAoAAAAbAAAAGQAAAAoAAAAZAAAAFAAAAAsAAAAVAAAADAAAAAwAAAAV
AAAAFAAAAAwAAAAUAAAAFgAAAAwAAAAWAAAAGgAAAAwAAAAaAAAAGAAAAAwAAAAYAAAAFwAA
AAwAAAAXAAAADgAAAAwAAAAOAAAADQAAAA4AAAAXAAAADwAAAA8AAAARAAAAEAAAABIAAAAX
AAAAGAAAABQAAAAZAAAAFgAAABYAAAAZAAAAGgAAABgAAAAaAAAAGwAAABkAAAAbAAAAGgAA
ABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAgD9yAAAABAAAAKRier8A
AAAAwE6CP1Jehr/4acU95k2qP2JWkb/jTfs+dhmUPzEzh7+B+Ns+wE6CP1JpK78AAAAAwE6C
P367er8AAAAAFLyvP36LiL/ARkI+CajHP9Wxk79HLRc/cBixPzGPiL/1cU4/wE6CP129Lb8n
lFg/wE6CP/C8E78AAAAAWKeuPxGlbb8AAAAAElrSP7+UiL96EXA+obfUP/C8k7/QqiI/CCi+
PzyWjL8nlFg/QLaiPxykh78nlFg/wE6CP1KPRL8nlFg/H+jRP/C8E79ScXI++jf0P/C8E7/m
mUY+lp3nP/C8E78AAAAAch0CQAtYZb8AAAAAS+7hP9oiRr8AAAAASUP4P0Lce7/s3rY+sXDt
P1LEib8nlFg/c8PAP7rfjb8nlFg/eUqyP340iL+4/Dk/YqLYP1LVUr8nlFg/O/LUP/C8E7/b
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
vBZ0W78wIII/1r0XvqhSXr92wH0/m1KDvhk9Y7+zEm4/ZQuHvtEYQ7/bgoc/QMu/vqm/Sr+B
nn0/Y+2Lvhk9Y7/3AGw/LzH5viQIXL9UVFY/4NsLvJgvQ7/bgoc/gPgYvJgvQ7/bgoc/Qh3z
veYpQ7/bgoc/tAAAAAAAAAABAAAABgAAAAAAAAAGAAAABwAAAAAAAAAHAAAAAgAAAAAAAAAC
AAAAAwAAAAAAAAADAAAACAAAAAAAAAAIAAAADwAAAAAAAAAPAAAAGAAAAAAAAAAYAAAAGwAA
AAAAAAAbAAAAEAAAAAAAAAAQAAAACQAAAAAAAAAJAAAABAAAAAAAAAAEAAAAAQAAAAEAAAAE
AAAABQAAAAEAAAAFAAAACwAAAAEAAAALAAAAEQAAAAEAAAARAAAAEgAAAAEAAAASAAAADAAA
AAEAAAAMAAAABgAAAAIAAAAHAAAAAwAAAAMAAAAHAAAADQAAAAMAAAANAAAAFQAAAAMAAAAV
AAAADgAAAAMAAAAOAAAACAAAAAQAAAAJAAAABQAAAAUAAAAJAAAACgAAAAUAAAAKAAAACwAA
AAYAAAAMAAAADQAAAAYAAAANAAAABwAAAAgAAAAOAAAADwAAAAkAAAAQAAAAEQAAAAkAAAAR
AAAACgAAAAoAAAARAAAACwAAAAwAAAASAAAAEwAAAAwAAAATAAAAFAAAAAwAAAAUAAAADQAA
AA0AAAAUAAAAEwAAAA0AAAATAAAAEgAAAA0AAAASAAAAGQAAAA0AAAAZAAAAHwAAAA0AAAAf
AAAAHgAAAA0AAAAeAAAAHQAAAA0AAAAdAAAAFQAAAA4AAAAWAAAAFwAAAA4AAAAXAAAADwAA
AA4AAAAVAAAAFgAAAA8AAAAXAAAAGQAAAA8AAAAZAAAAGgAAAA8AAAAaAAAAGAAAABAAAAAb
AAAAHAAAABAAAAAcAAAAEQAAABEAAAAcAAAAEgAAABIAAAAcAAAAGgAAABIAAAAaAAAAGQAA
ABUAAAAdAAAAFgAAABYAAAAeAAAAHwAAABYAAAAfAAAAGQAAABYAAAAZAAAAFwAAABYAAAAd
AAAAHgAAABgAAAAaAAAAGwAAABoAAAAcAAAAGwAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD9gAAAABAAAAIxTKT8ZPWO/AAAAAAAAAAAZPWO/7PrlPgAAAAAv
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
AAIAAAANAAAAGQAAAAIAAAAZAAAAGwAAAAIAAAAbAAAADgAAAAIAAAAOAAAACAAAAAIAAAAI
AAAADwAAAAIAAAAPAAAAIAAAAAIAAAAgAAAAIgAAAAIAAAAiAAAAEAAAAAIAAAAQAAAACQAA
AAIAAAAJAAAAAwAAAAMAAAAJAAAACgAAAAMAAAAKAAAABAAAAAQAAAALAAAABgAAAAQAAAAG
AAAABQAAAAQAAAAKAAAACwAAAAYAAAAMAAAADQAAAAYAAAALAAAACgAAAAYAAAAKAAAAEgAA
AAYAAAASAAAAEQAAAAYAAAARAAAAIwAAAAYAAAAjAAAAJAAAAAYAAAAkAAAAEwAAAAYAAAAT
AAAADAAAAAgAAAAOAAAADwAAAAkAAAAQAAAAIQAAAAkAAAAhAAAAKgAAAAkAAAAqAAAAIwAA
AAkAAAAjAAAAEQAAAAkAAAARAAAAEgAAAAkAAAASAAAACgAAAAwAAAATAAAAFAAAAAwAAAAU
AAAAFQAAAAwAAAAVAAAAFgAAAAwAAAAWAAAAFwAAAAwAAAAXAAAAGAAAAAwAAAAYAAAADQAA
AA0AAAAYAAAAGgAAAA0AAAAaAAAAGQAAAA4AAAAbAAAAGgAAAA4AAAAaAAAAHAAAAA4AAAAc
AAAAHQAAAA4AAAAdAAAAHgAAAA4AAAAeAAAADwAAAA8AAAAeAAAAHwAAAA8AAAAfAAAAIAAA
ABAAAAAiAAAAHwAAABAAAAAfAAAAIQAAABMAAAAkAAAAJQAAABMAAAAlAAAAFAAAABQAAAAl
AAAAJgAAABQAAAAmAAAAHQAAABQAAAAdAAAAFgAAABQAAAAWAAAAFQAAABYAAAAcAAAAFwAA
ABYAAAAdAAAAHAAAABcAAAAcAAAAGAAAABgAAAAcAAAAGgAAABkAAAAaAAAAGwAAAB0AAAAm
AAAAJwAAAB0AAAAnAAAAHgAAAB4AAAAnAAAAKAAAAB4AAAAoAAAAKQAAAB4AAAApAAAAHwAA
AB8AAAApAAAAKgAAAB8AAAAqAAAAIQAAAB8AAAAiAAAAIAAAACMAAAAqAAAAJgAAACMAAAAm
AAAAKwAAACMAAAArAAAAJAAAACQAAAArAAAAJQAAACUAAAArAAAAJgAAACYAAAAqAAAAKQAA
ACYAAAApAAAAJwAAACcAAAApAAAAKAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAA
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
v7YxYz+MvCY+fyyGvxo9Yz8qnHs/dEZ0vxo9Yz/BXnM/Wj5yv7YxYz/BXnM/D6mGv7YxYz/A
ToI/6zSHv4gT3D7AToI//Gmuv+gsuD21eLw+/GmuvwAAAADQcKk+/GmuvwIiOj5D+6g+wl6G
v7YxYz9qEH0/9sKHv0JLVz/AToI/YZCIv+xwTj/AToI/xgAAAAAAAAABAAAAAgAAAAAAAAAC
AAAAAwAAAAAAAAADAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAABgAAAAAAAAAGAAAABwAA
AAAAAAAHAAAACAAAAAAAAAAIAAAAFAAAAAAAAAAUAAAAHgAAAAAAAAAeAAAAFQAAAAAAAAAV
AAAACQAAAAAAAAAJAAAAAQAAAAEAAAAJAAAACgAAAAEAAAAKAAAAAgAAAAIAAAAKAAAAAwAA
AAMAAAAKAAAABAAAAAQAAAAKAAAACwAAAAQAAAALAAAADAAAAAQAAAAMAAAADQAAAAQAAAAN
AAAABQAAAAUAAAANAAAADAAAAAUAAAAMAAAADgAAAAUAAAAOAAAABgAAAAYAAAAOAAAADwAA
AAYAAAAPAAAAGAAAAAYAAAAYAAAAGQAAAAYAAAAZAAAAEAAAAAYAAAAQAAAAEQAAAAYAAAAR
AAAABwAAAAcAAAARAAAAEgAAAAcAAAASAAAAEwAAAAcAAAATAAAACAAAAAgAAAATAAAAFAAA
AAkAAAAVAAAACgAAAAoAAAAVAAAACwAAAAsAAAAVAAAAHgAAAAsAAAAeAAAAHQAAAAsAAAAd
AAAAHwAAAAsAAAAfAAAAFgAAAAsAAAAWAAAADAAAAAwAAAAWAAAADgAAAA4AAAAWAAAAFwAA
AA4AAAAXAAAADwAAAA8AAAAXAAAAGAAAABAAAAAZAAAAGgAAABAAAAAaAAAAEQAAABEAAAAa
AAAAEgAAABIAAAAaAAAAGwAAABIAAAAbAAAAIQAAABIAAAAhAAAAIgAAABIAAAAiAAAAHAAA
ABIAAAAcAAAAFAAAABIAAAAUAAAAEwAAABQAAAAcAAAAHQAAABQAAAAdAAAAHgAAABYAAAAf
AAAAGwAAABYAAAAbAAAAIAAAABYAAAAgAAAAGAAAABYAAAAYAAAAFwAAABgAAAAgAAAAGwAA
ABgAAAAbAAAAGQAAABkAAAAbAAAAGgAAABsAAAAfAAAAIQAAABwAAAAiAAAAHQAAAB0AAAAi
AAAAHwAAAB8AAAAiAAAAIQAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAA
AAAAgD9sAAAABAAAACYNlj8aPWO/AAAAACAohj+2MWO/AAAAAPHnnD+gWw68AAAAACAclz+2
MWO/AMgHPCAclz+2MWO/ijPuPkqakj+2MWO/RRcAP82YiT+2MWO/RRcAPxFahz+2MWO/0zf3
PiYZhT+2MWO/ijPuPiYZhT+2MWO/AMgHPPxpLj8nhl+/AAAAAFDsnD8AAAAAAAAAADDnrD8A
AAAAGsgHPvxprj8AAAAAVNQUPvxprj+AWw67lK0VPvxprj94xyS9ZuBzPmR8iT8AAAAAonaH
P99SiT+Anua7onaHPwKMiD+wfSW9onaHP/xprj+AWw67CPyoPvxprj8AAAAAqGipPum+hj/k
QYK9onaHP6nYZz+Uv5u+onaHP8b9RT/fs/e+onaHP/xpLj+kCw2/onaHP/xpLj9z6hC/1BmD
P/xpLj/pGyG/NGthP/xpLj+K41G/4g+zPnScOz+e0mm+AAAAAPxpLj+kqMm+AEDZOGKXRD8A
AAAAAAAAAPe+cz8AAAAAonaHP/xpLj8hqcu+onaHP/xpLj+uURS+Xk8SP/xpLj8AAAAAiGln
Pz2URz/FvnW+onaHP8wAAAAAAAAAAQAAAAoAAAAAAAAACgAAABwAAAAAAAAAHAAAAB4AAAAA
AAAAHgAAAAsAAAAAAAAACwAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAQAAAAAAAAABAAA
AAUAAAAAAAAABQAAAAYAAAAAAAAABgAAAAcAAAAAAAAABwAAAAgAAAAAAAAACAAAAAkAAAAA
AAAACQAAAAEAAAABAAAACQAAAAoAAAACAAAACwAAAAwAAAACAAAADAAAAAMAAAADAAAADAAA
AA0AAAADAAAADQAAAA4AAAADAAAADgAAAA8AAAADAAAADwAAAAQAAAAEAAAAEAAAABEAAAAE
AAAAEQAAABIAAAAEAAAAEgAAAAUAAAAEAAAADwAAABMAAAAEAAAAEwAAABQAAAAEAAAAFAAA
ABAAAAAFAAAAEgAAABUAAAAFAAAAFQAAABYAAAAFAAAAFgAAABcAAAAFAAAAFwAAABgAAAAF
AAAAGAAAAAYAAAAGAAAAGAAAABkAAAAGAAAAGQAAABoAAAAGAAAAGgAAABsAAAAGAAAAGwAA
AAcAAAAHAAAAGwAAAAgAAAAIAAAAGwAAAAoAAAAIAAAACgAAAAkAAAAKAAAAGwAAABoAAAAK
AAAAGgAAABkAAAAKAAAAGQAAABgAAAAKAAAAGAAAACAAAAAKAAAAIAAAACIAAAAKAAAAIgAA
ACEAAAAKAAAAIQAAAB0AAAAKAAAAHQAAABwAAAALAAAAHgAAACIAAAALAAAAIgAAAB8AAAAL
AAAAHwAAABAAAAALAAAAEAAAABQAAAALAAAAFAAAAA0AAAALAAAADQAAAAwAAAANAAAAFAAA
ABMAAAANAAAAEwAAAA8AAAANAAAADwAAAA4AAAAQAAAAHwAAACMAAAAQAAAAIwAAACAAAAAQ
AAAAIAAAABgAAAAQAAAAGAAAABcAAAAQAAAAFwAAABYAAAAQAAAAFgAAABUAAAAQAAAAFQAA
ABIAAAAQAAAAEgAAABEAAAAcAAAAHQAAAB4AAAAdAAAAIQAAAB4AAAAeAAAAIQAAACIAAAAf
AAAAIgAAACMAAAAgAAAAIwAAACIAAAAQAAAAAAAAAAAAAAAAAAAAAAAAABAAAAAAAAAAAAAA
AAAAAAAAAIA/YwAAAAQAAABil0Q/AAAAAAAAAAD8aS4/oaC3PgAAAABQ7Jw/AAAAAAAAAAD8
aS4/AAAAAGNuZz+gRUA/QfJiPwAAAAD8aS4/QfJiP/R9Qj6mE50/BolBPgAAAACOsKw/QPC3
PcTWvz0w56w/AAAAAGDRBz55qHU/AAAAAL9Ogj/8aS4/UE9LPb9Ogj/ypko/QfJiPzQqij3y
pko/nlNbPwAAAAD8aS4/Q6RPP79Ogj/Gs20/QfJiP2d/cz+qjps/GbNpPgAAAAD8aa4/QPC3
PVxu3T38aa4/AAAAAPbGFD6o6Yk/AAAAAL9Ogj+KoF4/QfJiP45EWj78aa4/MhI6PjDMFT6O
sKw/dI5EPoxJCz4aUIQ/QfJiP79Ogj/8aa4/AAAAAOJ9qT5KB40/UrsJPr9Ogj/8aa4/jBRh
Plzhcz7yaGE/QfJiP2EAgj6ZAo4/JrguP79Ogj9Swok/PtFVP1dycz/g+oM/QfJiPxRgfD/8
aa4/QPC3PbZ4vD7iuJI/zyP2Pr9Ogj/8aa4/MhI6PkT7qD66AAAAAAAAAAEAAAAEAAAAAAAA
AAQAAAAMAAAAAAAAAAwAAAAPAAAAAAAAAA8AAAAGAAAAAAAAAAYAAAACAAAAAAAAAAIAAAAI
AAAAAAAAAAgAAAARAAAAAAAAABEAAAAXAAAAAAAAABcAAAASAAAAAAAAABIAAAAJAAAAAAAA
AAkAAAADAAAAAAAAAAMAAAABAAAAAQAAAAMAAAAKAAAAAQAAAAoAAAANAAAAAQAAAA0AAAAF
AAAAAQAAAAUAAAAEAAAAAgAAAAYAAAAHAAAAAgAAAAcAAAAIAAAAAwAAAAkAAAAKAAAABAAA
AAsAAAAMAAAABAAAAAUAAAAOAAAABAAAAA4AAAAWAAAABAAAABYAAAAdAAAABAAAAB0AAAAa
AAAABAAAABoAAAATAAAABAAAABMAAAALAAAABQAAAA0AAAAOAAAABgAAAA8AAAAHAAAABwAA
ABAAAAARAAAABwAAABEAAAAIAAAABwAAAA8AAAAQAAAACQAAABIAAAAYAAAACQAAABgAAAAf
AAAACQAAAB8AAAAbAAAACQAAABsAAAAWAAAACQAAABYAAAANAAAACQAAAA0AAAAKAAAACwAA
ABMAAAAMAAAADAAAABMAAAAUAAAADAAAABQAAAAVAAAADAAAABUAAAAPAAAADQAAABYAAAAO
AAAADwAAABUAAAAUAAAADwAAABQAAAAQAAAAEAAAABQAAAAZAAAAEAAAABkAAAAgAAAAEAAA
ACAAAAAeAAAAEAAAAB4AAAAXAAAAEAAAABcAAAARAAAAEgAAABcAAAAYAAAAEwAAABkAAAAU
AAAAEwAAABoAAAAZAAAAFgAAABsAAAAcAAAAFgAAABwAAAAdAAAAFwAAAB4AAAAYAAAAGAAA
AB4AAAAfAAAAGQAAABoAAAAcAAAAGQAAABwAAAAgAAAAGgAAAB0AAAAcAAAAGwAAAB8AAAAg
AAAAGwAAACAAAAAcAAAAHgAAACAAAAAfAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAQAAAAAAAA
AAAAAAAAAAAAAACAPz8AAAAEAAAAsgZsP6jxab9Ad4e/UHptP9hjaL9Ad4e/zAh3P7T8Zr+A
9IC/HeN0P6jxab8qToC/DGMaP6jxab/Gin6/DGMaP3E5Q79Ad4e/HHJ9P7NwSb9Ad4e/HAyW
P6jxab8AANm4xykgP6jxab8AANm4DGMaP1jSZb8qJ12/DGMaPxN67L5Ad4e/wsqFPy6z975A
d4e/tG6aPyibV70AANm4/C02P+hjsL4AAAA0DGMaP1t/Bb8AAAA0DGMaPxLhXb8x6Eq/9C4l
PyibV71Ad4e/k+F3P9jBeL1Ad4e/B1AwP8BCV71k7mW/ZNlDPyibV70AANm4zYB3PyibV71A
d4e/cgAAAAAAAAABAAAAAgAAAAAAAAACAAAAAwAAAAAAAAADAAAABwAAAAAAAAAHAAAACAAA
AAAAAAAIAAAABAAAAAAAAAAEAAAABQAAAAAAAAAFAAAACgAAAAAAAAAKAAAAEAAAAAAAAAAQ
AAAAFAAAAAAAAAAUAAAAEQAAAAAAAAARAAAACwAAAAAAAAALAAAABgAAAAAAAAAGAAAAAQAA
AAEAAAAGAAAAAgAAAAIAAAAGAAAABwAAAAIAAAAHAAAAAwAAAAQAAAAIAAAACQAAAAQAAAAJ
AAAADwAAAAQAAAAPAAAADgAAAAQAAAAOAAAACgAAAAQAAAAKAAAABQAAAAYAAAALAAAABwAA
AAcAAAALAAAADAAAAAcAAAAMAAAADQAAAAcAAAANAAAADgAAAAcAAAAOAAAACAAAAAgAAAAO
AAAADwAAAAgAAAAPAAAACQAAAAoAAAAOAAAAEAAAAAsAAAARAAAADAAAAAwAAAASAAAAEwAA
AAwAAAATAAAADQAAAAwAAAARAAAAFAAAAAwAAAAUAAAAEgAAAA0AAAATAAAADgAAAA4AAAAT
AAAAEAAAABAAAAATAAAAEgAAABAAAAASAAAAFAAAABAAAAAAAAAAAAAAAAAAAAAAAAAAEAAA
AAAAAAAAAAAAAAAAAAAAgD88AAAABAAAAOi8cL+o8Wm/2oKHv5Awcr/iY2i/2oKHv0idGr9k
xkK/2oKHv0idGr+o8Wm/CHF+vymleb+o8Wm/906Av8bOe7/H/Ga/XPWAv+4hgb/KP0m/2oKH
v0idGr+5Xuy+2oKHv0idGr+o8Wm/vqNVvyqvlb+o8Wm/AAAAAAEuiL/Mzve+2oKHv0TnKb+A
81e92oKHv0idGr9P4wy/AAAAALTpJL+o8Wm/AAAAAMGNmr+A81e9AAAAAMlGfL+A81e92oKH
vxWeSL+A81e9AGDZuHfuOr8pYLC+AAAAACaEhr+A81e9AAAAAC5Whb+grna9AAAAAGwAAAAA
AAAAAQAAAAYAAAAAAAAABgAAAAoAAAAAAAAACgAAAA8AAAAAAAAADwAAAAsAAAAAAAAACwAA
AAcAAAAAAAAABwAAAAIAAAAAAAAAAgAAAAMAAAAAAAAAAwAAAAgAAAAAAAAACAAAAA0AAAAA
AAAADQAAAAkAAAAAAAAACQAAAAQAAAAAAAAABAAAAAUAAAAAAAAABQAAAAEAAAABAAAABQAA
AAYAAAACAAAABwAAAAwAAAACAAAADAAAAAgAAAACAAAACAAAAAMAAAAEAAAACQAAAAUAAAAF
AAAACQAAAAYAAAAGAAAACQAAAAoAAAAHAAAACwAAAAwAAAAIAAAADAAAAA0AAAAJAAAADQAA
AAwAAAAJAAAADAAAABEAAAAJAAAAEQAAABMAAAAJAAAAEwAAABIAAAAJAAAAEgAAAA4AAAAJ
AAAADgAAAAoAAAAKAAAADgAAAA8AAAALAAAADwAAAA4AAAALAAAADgAAABIAAAALAAAAEgAA
ABAAAAALAAAAEAAAAAwAAAAMAAAAEAAAABEAAAAQAAAAEgAAABMAAAAQAAAAEwAAABEAAAA=</SharedString>
		<SharedString md5="yuZpQdnvvUBOTYh1jqZ2cA=="></SharedString>
	</SharedStrings>
</roblox>